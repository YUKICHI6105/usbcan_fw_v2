
usbcan_fw_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08005a4c  08005a4c  00015a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005afc  08005afc  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08005afc  08005afc  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005afc  08005afc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005afc  08005afc  00015afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b04  08005b04  00015b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08005b08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001460  200001d8  08005ce0  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00003000  20001638  08005ce0  00021638  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c638  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004594  00000000  00000000  0003c883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e0  00000000  00000000  00040e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fa4  00000000  00000000  00041ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b0b  00000000  00000000  00042e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d8e4  00000000  00000000  000669a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b38a5  00000000  00000000  0008428b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ad4  00000000  00000000  00137b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000bb08  00000000  00000000  0013a604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0014610c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001d8 	.word	0x200001d8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a34 	.word	0x08005a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001dc 	.word	0x200001dc
 80001c4:	08005a34 	.word	0x08005a34

080001c8 <_ZN9MotorCtrl7setModeEPh>:
		param.e_pre[ReceiveID-0x201] = e;
	}
	return true;
}

inline void MotorCtrl::setMode(uint8_t usb_msg[]){
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
 80001d6:	e031      	b.n	800023c <_ZN9MotorCtrl7setModeEPh+0x74>
		if(usb_msg[i]==0){
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	683a      	ldr	r2, [r7, #0]
 80001dc:	4413      	add	r3, r2
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d105      	bne.n	80001f0 <_ZN9MotorCtrl7setModeEPh+0x28>
			param.mode[i] = Mode::dis;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68fa      	ldr	r2, [r7, #12]
 80001e8:	2100      	movs	r1, #0
 80001ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80001ee:	e022      	b.n	8000236 <_ZN9MotorCtrl7setModeEPh+0x6e>
		}else if(usb_msg[i]==1){
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	683a      	ldr	r2, [r7, #0]
 80001f4:	4413      	add	r3, r2
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d105      	bne.n	8000208 <_ZN9MotorCtrl7setModeEPh+0x40>
			param.mode[i] = Mode::vel;
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	68fa      	ldr	r2, [r7, #12]
 8000200:	2101      	movs	r1, #1
 8000202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000206:	e016      	b.n	8000236 <_ZN9MotorCtrl7setModeEPh+0x6e>
		}else if(usb_msg[i]==2){
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	683a      	ldr	r2, [r7, #0]
 800020c:	4413      	add	r3, r2
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b02      	cmp	r3, #2
 8000212:	d105      	bne.n	8000220 <_ZN9MotorCtrl7setModeEPh+0x58>
			param.mode[i] = Mode::pos;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	68fa      	ldr	r2, [r7, #12]
 8000218:	2102      	movs	r1, #2
 800021a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800021e:	e00a      	b.n	8000236 <_ZN9MotorCtrl7setModeEPh+0x6e>
		}else if(usb_msg[i]==3){
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	683a      	ldr	r2, [r7, #0]
 8000224:	4413      	add	r3, r2
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b03      	cmp	r3, #3
 800022a:	d104      	bne.n	8000236 <_ZN9MotorCtrl7setModeEPh+0x6e>
			param.mode[i] = Mode::hom;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	68fa      	ldr	r2, [r7, #12]
 8000230:	2103      	movs	r1, #3
 8000232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i =0;i<8;i++){
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	3301      	adds	r3, #1
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	2b07      	cmp	r3, #7
 8000240:	ddca      	ble.n	80001d8 <_ZN9MotorCtrl7setModeEPh+0x10>
		}
	}
	if(usb_msg[8] == 1){
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	3308      	adds	r3, #8
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d104      	bne.n	8000256 <_ZN9MotorCtrl7setModeEPh+0x8e>
		diag=1;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2201      	movs	r2, #1
 8000250:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
	}else if(usb_msg[8] == 1){
		diag=0;
	}
}
 8000254:	e008      	b.n	8000268 <_ZN9MotorCtrl7setModeEPh+0xa0>
	}else if(usb_msg[8] == 1){
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	3308      	adds	r3, #8
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d103      	bne.n	8000268 <_ZN9MotorCtrl7setModeEPh+0xa0>
		diag=0;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2200      	movs	r2, #0
 8000264:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
}
 8000268:	bf00      	nop
 800026a:	3714      	adds	r7, #20
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr

08000274 <_ZN9MotorCtrl7setTempEPh>:

inline void MotorCtrl::setTemp(uint8_t usb_msg[]){
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
 800027c:	6039      	str	r1, [r7, #0]
	for(int i = 0;i<8;i++){
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
 8000282:	e00c      	b.n	800029e <_ZN9MotorCtrl7setTempEPh+0x2a>
		param.limitTemp[i]=usb_msg[i];
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	683a      	ldr	r2, [r7, #0]
 8000288:	4413      	add	r3, r2
 800028a:	7819      	ldrb	r1, [r3, #0]
 800028c:	687a      	ldr	r2, [r7, #4]
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	4413      	add	r3, r2
 8000292:	33e8      	adds	r3, #232	; 0xe8
 8000294:	460a      	mov	r2, r1
 8000296:	701a      	strb	r2, [r3, #0]
	for(int i = 0;i<8;i++){
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3301      	adds	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	2b07      	cmp	r3, #7
 80002a2:	ddef      	ble.n	8000284 <_ZN9MotorCtrl7setTempEPh+0x10>
	}
}
 80002a4:	bf00      	nop
 80002a6:	bf00      	nop
 80002a8:	3714      	adds	r7, #20
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <_ZN9MotorCtrl9setTargetEPh>:

inline void MotorCtrl::setTarget(uint8_t usb_msg[]){
 80002b2:	b480      	push	{r7}
 80002b4:	b085      	sub	sp, #20
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	6078      	str	r0, [r7, #4]
 80002ba:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	e028      	b.n	8000314 <_ZN9MotorCtrl9setTargetEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	3301      	adds	r3, #1
 80002c8:	683a      	ldr	r2, [r7, #0]
 80002ca:	4413      	add	r3, r2
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	061a      	lsls	r2, r3, #24
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	3302      	adds	r3, #2
 80002d6:	6839      	ldr	r1, [r7, #0]
 80002d8:	440b      	add	r3, r1
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	041b      	lsls	r3, r3, #16
 80002de:	431a      	orrs	r2, r3
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	3303      	adds	r3, #3
 80002e6:	6839      	ldr	r1, [r7, #0]
 80002e8:	440b      	add	r3, r1
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	021b      	lsls	r3, r3, #8
 80002ee:	4313      	orrs	r3, r2
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	0092      	lsls	r2, r2, #2
 80002f4:	3204      	adds	r2, #4
 80002f6:	6839      	ldr	r1, [r7, #0]
 80002f8:	440a      	add	r2, r1
 80002fa:	7812      	ldrb	r2, [r2, #0]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.target[i],&buf,1);
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3310      	adds	r3, #16
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	687a      	ldr	r2, [r7, #4]
 8000308:	4413      	add	r3, r2
 800030a:	7a3a      	ldrb	r2, [r7, #8]
 800030c:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	3301      	adds	r3, #1
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	2b07      	cmp	r3, #7
 8000318:	ddd3      	ble.n	80002c2 <_ZN9MotorCtrl9setTargetEPh+0x10>
	}
}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr

08000328 <_ZN9MotorCtrl5setKpEPh>:

inline void MotorCtrl::setKp(uint8_t usb_msg[]){
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
 8000336:	e028      	b.n	800038a <_ZN9MotorCtrl5setKpEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	3301      	adds	r3, #1
 800033e:	683a      	ldr	r2, [r7, #0]
 8000340:	4413      	add	r3, r2
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	061a      	lsls	r2, r3, #24
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	3302      	adds	r3, #2
 800034c:	6839      	ldr	r1, [r7, #0]
 800034e:	440b      	add	r3, r1
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	041b      	lsls	r3, r3, #16
 8000354:	431a      	orrs	r2, r3
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	009b      	lsls	r3, r3, #2
 800035a:	3303      	adds	r3, #3
 800035c:	6839      	ldr	r1, [r7, #0]
 800035e:	440b      	add	r3, r1
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	021b      	lsls	r3, r3, #8
 8000364:	4313      	orrs	r3, r2
 8000366:	68fa      	ldr	r2, [r7, #12]
 8000368:	0092      	lsls	r2, r2, #2
 800036a:	3204      	adds	r2, #4
 800036c:	6839      	ldr	r1, [r7, #0]
 800036e:	440a      	add	r2, r1
 8000370:	7812      	ldrb	r2, [r2, #0]
 8000372:	4313      	orrs	r3, r2
 8000374:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.Kp[i],&buf,1);
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	333c      	adds	r3, #60	; 0x3c
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	687a      	ldr	r2, [r7, #4]
 800037e:	4413      	add	r3, r2
 8000380:	7a3a      	ldrb	r2, [r7, #8]
 8000382:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	3301      	adds	r3, #1
 8000388:	60fb      	str	r3, [r7, #12]
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	2b07      	cmp	r3, #7
 800038e:	ddd3      	ble.n	8000338 <_ZN9MotorCtrl5setKpEPh+0x10>
	}
}
 8000390:	bf00      	nop
 8000392:	bf00      	nop
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr

0800039e <_ZN9MotorCtrl5setKiEPh>:

inline void MotorCtrl::setKi(uint8_t usb_msg[]){
 800039e:	b480      	push	{r7}
 80003a0:	b085      	sub	sp, #20
 80003a2:	af00      	add	r7, sp, #0
 80003a4:	6078      	str	r0, [r7, #4]
 80003a6:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 80003a8:	2300      	movs	r3, #0
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	e028      	b.n	8000400 <_ZN9MotorCtrl5setKiEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	3301      	adds	r3, #1
 80003b4:	683a      	ldr	r2, [r7, #0]
 80003b6:	4413      	add	r3, r2
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	061a      	lsls	r2, r3, #24
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	3302      	adds	r3, #2
 80003c2:	6839      	ldr	r1, [r7, #0]
 80003c4:	440b      	add	r3, r1
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	041b      	lsls	r3, r3, #16
 80003ca:	431a      	orrs	r2, r3
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	3303      	adds	r3, #3
 80003d2:	6839      	ldr	r1, [r7, #0]
 80003d4:	440b      	add	r3, r1
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	021b      	lsls	r3, r3, #8
 80003da:	4313      	orrs	r3, r2
 80003dc:	68fa      	ldr	r2, [r7, #12]
 80003de:	0092      	lsls	r2, r2, #2
 80003e0:	3204      	adds	r2, #4
 80003e2:	6839      	ldr	r1, [r7, #0]
 80003e4:	440a      	add	r2, r1
 80003e6:	7812      	ldrb	r2, [r2, #0]
 80003e8:	4313      	orrs	r3, r2
 80003ea:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.Ki[i],&buf,1);
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	3344      	adds	r3, #68	; 0x44
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	687a      	ldr	r2, [r7, #4]
 80003f4:	4413      	add	r3, r2
 80003f6:	7a3a      	ldrb	r2, [r7, #8]
 80003f8:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	3301      	adds	r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	2b07      	cmp	r3, #7
 8000404:	ddd3      	ble.n	80003ae <_ZN9MotorCtrl5setKiEPh+0x10>
	}
}
 8000406:	bf00      	nop
 8000408:	bf00      	nop
 800040a:	3714      	adds	r7, #20
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <_ZN9MotorCtrl5setKdEPh>:

inline void MotorCtrl::setKd(uint8_t usb_msg[]){
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
	for(int i =0;i<8;i++){
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
 8000422:	e028      	b.n	8000476 <_ZN9MotorCtrl5setKdEPh+0x62>
		uint32_t buf = (usb_msg[4*i+1] << 24) | (usb_msg[4*i+2] << 16) | (usb_msg[4*i+3] << 8) | (usb_msg[4*i+4] << 0);
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	3301      	adds	r3, #1
 800042a:	683a      	ldr	r2, [r7, #0]
 800042c:	4413      	add	r3, r2
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	061a      	lsls	r2, r3, #24
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	3302      	adds	r3, #2
 8000438:	6839      	ldr	r1, [r7, #0]
 800043a:	440b      	add	r3, r1
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	041b      	lsls	r3, r3, #16
 8000440:	431a      	orrs	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	3303      	adds	r3, #3
 8000448:	6839      	ldr	r1, [r7, #0]
 800044a:	440b      	add	r3, r1
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	021b      	lsls	r3, r3, #8
 8000450:	4313      	orrs	r3, r2
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	0092      	lsls	r2, r2, #2
 8000456:	3204      	adds	r2, #4
 8000458:	6839      	ldr	r1, [r7, #0]
 800045a:	440a      	add	r2, r1
 800045c:	7812      	ldrb	r2, [r2, #0]
 800045e:	4313      	orrs	r3, r2
 8000460:	60bb      	str	r3, [r7, #8]
		std::memcpy(&param.Kp[i],&buf,1);
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	333c      	adds	r3, #60	; 0x3c
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	4413      	add	r3, r2
 800046c:	7a3a      	ldrb	r2, [r7, #8]
 800046e:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<8;i++){
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	3301      	adds	r3, #1
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	2b07      	cmp	r3, #7
 800047a:	ddd3      	ble.n	8000424 <_ZN9MotorCtrl5setKdEPh+0x10>
	}
}
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
	...

0800048c <usb_process>:
void usb_to_can(uint8_t usb_msg[], const uint8_t len);
void robomaster(uint8_t usb_msg[], const uint8_t len);

// it process  all usb messages
void usb_process(uint8_t usb_msg[], const uint8_t len)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	460b      	mov	r3, r1
 8000496:	70fb      	strb	r3, [r7, #3]
    ... : some data
    */

    // if you want to add new command, you can add it here
    // attention: it is called in interrupt, so it should be short
    switch (usb_msg[0] >> 4)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d010      	beq.n	80004c6 <usb_process+0x3a>
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	dc13      	bgt.n	80004d0 <usb_process+0x44>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <usb_process+0x26>
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d006      	beq.n	80004be <usb_process+0x32>
    case 0x03: //robomaster_set_parameter
    {
    	robomaster(usb_msg, len);
    }
    default:
        break;
 80004b0:	e00e      	b.n	80004d0 <usb_process+0x44>
        usb_to_can(usb_msg, len);
 80004b2:	78fb      	ldrb	r3, [r7, #3]
 80004b4:	4619      	mov	r1, r3
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f000 f812 	bl	80004e0 <_Z10usb_to_canPhh>
    break;
 80004bc:	e009      	b.n	80004d2 <usb_process+0x46>
        CDC_Transmit_FS(HelloSLCAN_encoded, 11 + 2);
 80004be:	210d      	movs	r1, #13
 80004c0:	4806      	ldr	r0, [pc, #24]	; (80004dc <usb_process+0x50>)
 80004c2:	f005 f8af 	bl	8005624 <CDC_Transmit_FS>
    	robomaster(usb_msg, len);
 80004c6:	78fb      	ldrb	r3, [r7, #3]
 80004c8:	4619      	mov	r1, r3
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f000 f87a 	bl	80005c4 <_Z10robomasterPhh>
        break;
 80004d0:	bf00      	nop
    }
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000000 	.word	0x20000000

080004e0 <_Z10usb_to_canPhh>:

CAN_TxHeaderTypeDef TxHeader;
uint32_t TxMailbox;
// it process usb messages to normal can messages
void usb_to_can(uint8_t usb_msg[], const uint8_t len)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	70fb      	strb	r3, [r7, #3]
    uint8_t command & frame_type: (command: if it is normal can frame, it is 0x00.)<<4 | is_rtr << 2 | is_extended << 1 | is_error
    uint8_t id[4] : can id
    uint8_t dlc : data length
    uint8_t data[8] : data
    */
    if (usb_msg[0] & 0x02)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	f003 0302 	and.w	r3, r3, #2
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d018      	beq.n	800052a <_Z10usb_to_canPhh+0x4a>
    {
        // extended id
        TxHeader.IDE = CAN_ID_EXT;
 80004f8:	4b2f      	ldr	r3, [pc, #188]	; (80005b8 <_Z10usb_to_canPhh+0xd8>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	609a      	str	r2, [r3, #8]
        TxHeader.ExtId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3301      	adds	r3, #1
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	061a      	lsls	r2, r3, #24
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	3302      	adds	r3, #2
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	041b      	lsls	r3, r3, #16
 800050e:	431a      	orrs	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3303      	adds	r3, #3
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	021b      	lsls	r3, r3, #8
 8000518:	4313      	orrs	r3, r2
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	3204      	adds	r2, #4
 800051e:	7812      	ldrb	r2, [r2, #0]
 8000520:	4313      	orrs	r3, r2
 8000522:	461a      	mov	r2, r3
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <_Z10usb_to_canPhh+0xd8>)
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	e017      	b.n	800055a <_Z10usb_to_canPhh+0x7a>
    }
    else
    {
        // standard id
        TxHeader.IDE = CAN_ID_STD;
 800052a:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <_Z10usb_to_canPhh+0xd8>)
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
        TxHeader.StdId = (usb_msg[1] << 24) | (usb_msg[2] << 16) | (usb_msg[3] << 8) | (usb_msg[4] << 0);
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3301      	adds	r3, #1
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	061a      	lsls	r2, r3, #24
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	3302      	adds	r3, #2
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	041b      	lsls	r3, r3, #16
 8000540:	431a      	orrs	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	3303      	adds	r3, #3
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	021b      	lsls	r3, r3, #8
 800054a:	4313      	orrs	r3, r2
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	3204      	adds	r2, #4
 8000550:	7812      	ldrb	r2, [r2, #0]
 8000552:	4313      	orrs	r3, r2
 8000554:	461a      	mov	r2, r3
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <_Z10usb_to_canPhh+0xd8>)
 8000558:	601a      	str	r2, [r3, #0]
    }

    // is_rtr
    if (usb_msg[0] & 0x04)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	f003 0304 	and.w	r3, r3, #4
 8000562:	2b00      	cmp	r3, #0
 8000564:	d003      	beq.n	800056e <_Z10usb_to_canPhh+0x8e>
    {
        TxHeader.RTR = CAN_RTR_REMOTE;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <_Z10usb_to_canPhh+0xd8>)
 8000568:	2202      	movs	r2, #2
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	e002      	b.n	8000574 <_Z10usb_to_canPhh+0x94>
    }
    else
    {
        TxHeader.RTR = CAN_RTR_DATA;
 800056e:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <_Z10usb_to_canPhh+0xd8>)
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
    }

    // is_error
    //?

    TxHeader.TransmitGlobalTime = DISABLE;
 8000574:	4b10      	ldr	r3, [pc, #64]	; (80005b8 <_Z10usb_to_canPhh+0xd8>)
 8000576:	2200      	movs	r2, #0
 8000578:	751a      	strb	r2, [r3, #20]
    // dlc
    TxHeader.DLC = usb_msg[5];
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3305      	adds	r3, #5
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <_Z10usb_to_canPhh+0xd8>)
 8000584:	611a      	str	r2, [r3, #16]

    if (0 < HAL_CAN_GetTxMailboxesFreeLevel(&hcan))
 8000586:	480d      	ldr	r0, [pc, #52]	; (80005bc <_Z10usb_to_canPhh+0xdc>)
 8000588:	f000 fdd7 	bl	800113a <HAL_CAN_GetTxMailboxesFreeLevel>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	bf14      	ite	ne
 8000592:	2301      	movne	r3, #1
 8000594:	2300      	moveq	r3, #0
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d009      	beq.n	80005b0 <_Z10usb_to_canPhh+0xd0>
    {
        led_on(can);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f851 	bl	8000644 <led_on>
        HAL_CAN_AddTxMessage(&hcan, &TxHeader, usb_msg + 6, &TxMailbox);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	1d9a      	adds	r2, r3, #6
 80005a6:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <_Z10usb_to_canPhh+0xe0>)
 80005a8:	4903      	ldr	r1, [pc, #12]	; (80005b8 <_Z10usb_to_canPhh+0xd8>)
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <_Z10usb_to_canPhh+0xdc>)
 80005ac:	f000 fd4e 	bl	800104c <HAL_CAN_AddTxMessage>
    }
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200001f4 	.word	0x200001f4
 80005bc:	20000210 	.word	0x20000210
 80005c0:	2000020c 	.word	0x2000020c

080005c4 <_Z10robomasterPhh>:

void robomaster(uint8_t usb_msg[], const uint8_t len){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	// data structure
	/*
	uint8_t command & prosess_id: (command: if it is normal can frame,
	uint8_t data[8or9or32] : data
    */
	switch (usb_msg[0] & 0x0f){
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d82d      	bhi.n	8000638 <_Z10robomasterPhh+0x74>
 80005dc:	a201      	add	r2, pc, #4	; (adr r2, 80005e4 <_Z10robomasterPhh+0x20>)
 80005de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e2:	bf00      	nop
 80005e4:	080005fd 	.word	0x080005fd
 80005e8:	08000607 	.word	0x08000607
 80005ec:	08000611 	.word	0x08000611
 80005f0:	0800061b 	.word	0x0800061b
 80005f4:	08000625 	.word	0x08000625
 80005f8:	0800062f 	.word	0x0800062f
	case 0x00:{
		motor.setMode(usb_msg);
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	4810      	ldr	r0, [pc, #64]	; (8000640 <_Z10robomasterPhh+0x7c>)
 8000600:	f7ff fde2 	bl	80001c8 <_ZN9MotorCtrl7setModeEPh>
		break;
 8000604:	e018      	b.n	8000638 <_Z10robomasterPhh+0x74>
	}case 0x01:{
		motor.setTemp(usb_msg);
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <_Z10robomasterPhh+0x7c>)
 800060a:	f7ff fe33 	bl	8000274 <_ZN9MotorCtrl7setTempEPh>
		break;
 800060e:	e013      	b.n	8000638 <_Z10robomasterPhh+0x74>
	}case 0x02:{
		motor.setTarget(usb_msg);
 8000610:	6879      	ldr	r1, [r7, #4]
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <_Z10robomasterPhh+0x7c>)
 8000614:	f7ff fe4d 	bl	80002b2 <_ZN9MotorCtrl9setTargetEPh>
		break;
 8000618:	e00e      	b.n	8000638 <_Z10robomasterPhh+0x74>
	}case 0x03:{
		motor.setKp(usb_msg);
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	4808      	ldr	r0, [pc, #32]	; (8000640 <_Z10robomasterPhh+0x7c>)
 800061e:	f7ff fe83 	bl	8000328 <_ZN9MotorCtrl5setKpEPh>
		break;
 8000622:	e009      	b.n	8000638 <_Z10robomasterPhh+0x74>
	}case 0x04:{
		motor.setKi(usb_msg);
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	4806      	ldr	r0, [pc, #24]	; (8000640 <_Z10robomasterPhh+0x7c>)
 8000628:	f7ff feb9 	bl	800039e <_ZN9MotorCtrl5setKiEPh>
		break;
 800062c:	e004      	b.n	8000638 <_Z10robomasterPhh+0x74>
	}case 0x05:{
		motor.setKd(usb_msg);
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <_Z10robomasterPhh+0x7c>)
 8000632:	f7ff feef 	bl	8000414 <_ZN9MotorCtrl5setKdEPh>
	}
	}
}
 8000636:	e7ff      	b.n	8000638 <_Z10robomasterPhh+0x74>
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000284 	.word	0x20000284

08000644 <led_on>:
};

void led_on(led name)
{
    // if the led is off.
    if (led_list[name].is_high == 0)
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <led_on+0x30>)
 8000646:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800064a:	7b1b      	ldrb	r3, [r3, #12]
 800064c:	b103      	cbz	r3, 8000650 <led_on+0xc>
 800064e:	4770      	bx	lr
{
 8000650:	b510      	push	{r4, lr}
    {
        HAL_GPIO_WritePin(led_list[name].gpio, led_list[name].pin, GPIO_PIN_SET);
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <led_on+0x30>)
 8000654:	ea4f 1c00 	mov.w	ip, r0, lsl #4
 8000658:	eb03 1400 	add.w	r4, r3, r0, lsl #4
 800065c:	2201      	movs	r2, #1
 800065e:	88a1      	ldrh	r1, [r4, #4]
 8000660:	f853 000c 	ldr.w	r0, [r3, ip]
 8000664:	f001 f80a 	bl	800167c <HAL_GPIO_WritePin>
        led_list[name].before_tick = HAL_GetTick();
 8000668:	f000 fbaa 	bl	8000dc0 <HAL_GetTick>
 800066c:	60a0      	str	r0, [r4, #8]
        led_list[name].is_high = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	7323      	strb	r3, [r4, #12]
    }
}
 8000672:	bd10      	pop	{r4, pc}
 8000674:	20000010 	.word	0x20000010

08000678 <led_process>:

void led_process(void)
{
 8000678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for (int i = 0; i < LED_LIST_SIZE; i++)
 800067a:	4c0d      	ldr	r4, [pc, #52]	; (80006b0 <led_process+0x38>)
 800067c:	f104 0640 	add.w	r6, r4, #64	; 0x40
    {
        if (led_list[i].is_high && ((HAL_GetTick() - led_list[i].before_tick) > LED_INTERVAL))
        {
            HAL_GPIO_WritePin(led_list[i].gpio, led_list[i].pin, GPIO_PIN_RESET);
 8000680:	2700      	movs	r7, #0
 8000682:	e002      	b.n	800068a <led_process+0x12>
    for (int i = 0; i < LED_LIST_SIZE; i++)
 8000684:	3410      	adds	r4, #16
 8000686:	42b4      	cmp	r4, r6
 8000688:	d010      	beq.n	80006ac <led_process+0x34>
        if (led_list[i].is_high && ((HAL_GetTick() - led_list[i].before_tick) > LED_INTERVAL))
 800068a:	7b23      	ldrb	r3, [r4, #12]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0f9      	beq.n	8000684 <led_process+0xc>
 8000690:	f000 fb96 	bl	8000dc0 <HAL_GetTick>
 8000694:	68a3      	ldr	r3, [r4, #8]
 8000696:	1ac0      	subs	r0, r0, r3
 8000698:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 800069c:	d9f2      	bls.n	8000684 <led_process+0xc>
            HAL_GPIO_WritePin(led_list[i].gpio, led_list[i].pin, GPIO_PIN_RESET);
 800069e:	463a      	mov	r2, r7
 80006a0:	88a1      	ldrh	r1, [r4, #4]
 80006a2:	6820      	ldr	r0, [r4, #0]
 80006a4:	f000 ffea 	bl	800167c <HAL_GPIO_WritePin>
            led_list[i].is_high = 0;
 80006a8:	7327      	strb	r7, [r4, #12]
 80006aa:	e7eb      	b.n	8000684 <led_process+0xc>
        }
    }
}
 80006ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000010 	.word	0x20000010

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b500      	push	{lr}
 80006b6:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b8:	2100      	movs	r1, #0
 80006ba:	9114      	str	r1, [sp, #80]	; 0x50
 80006bc:	9115      	str	r1, [sp, #84]	; 0x54
 80006be:	9117      	str	r1, [sp, #92]	; 0x5c
 80006c0:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c2:	910d      	str	r1, [sp, #52]	; 0x34
 80006c4:	910e      	str	r1, [sp, #56]	; 0x38
 80006c6:	910f      	str	r1, [sp, #60]	; 0x3c
 80006c8:	9110      	str	r1, [sp, #64]	; 0x40
 80006ca:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006cc:	2234      	movs	r2, #52	; 0x34
 80006ce:	4668      	mov	r0, sp
 80006d0:	f005 f983 	bl	80059da <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2201      	movs	r2, #1
 80006d6:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006dc:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006de:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e0:	2202      	movs	r2, #2
 80006e2:	9219      	str	r2, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e4:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ea:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	a812      	add	r0, sp, #72	; 0x48
 80006ee:	f001 ffb7 	bl	8002660 <HAL_RCC_OscConfig>
 80006f2:	b9c8      	cbnz	r0, 8000728 <SystemClock_Config+0x74>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	930d      	str	r3, [sp, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2102      	movs	r1, #2
 80006fa:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000704:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000706:	9311      	str	r3, [sp, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000708:	a80d      	add	r0, sp, #52	; 0x34
 800070a:	f002 facb 	bl	8002ca4 <HAL_RCC_ClockConfig>
 800070e:	b968      	cbnz	r0, 800072c <SystemClock_Config+0x78>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000714:	9300      	str	r3, [sp, #0]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000716:	2300      	movs	r3, #0
 8000718:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071a:	4668      	mov	r0, sp
 800071c:	f002 fb8c 	bl	8002e38 <HAL_RCCEx_PeriphCLKConfig>
 8000720:	b930      	cbnz	r0, 8000730 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
}
 8000722:	b01d      	add	sp, #116	; 0x74
 8000724:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072a:	e7fe      	b.n	800072a <SystemClock_Config+0x76>
 800072c:	b672      	cpsid	i
 800072e:	e7fe      	b.n	800072e <SystemClock_Config+0x7a>
 8000730:	b672      	cpsid	i
 8000732:	e7fe      	b.n	8000732 <SystemClock_Config+0x7e>

08000734 <main>:
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b09c      	sub	sp, #112	; 0x70
  HAL_Init();
 8000738:	f000 fb24 	bl	8000d84 <HAL_Init>
  SystemClock_Config();
 800073c:	f7ff ffba 	bl	80006b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	2400      	movs	r4, #0
 8000742:	940b      	str	r4, [sp, #44]	; 0x2c
 8000744:	940c      	str	r4, [sp, #48]	; 0x30
 8000746:	940d      	str	r4, [sp, #52]	; 0x34
 8000748:	940e      	str	r4, [sp, #56]	; 0x38
 800074a:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074c:	4b6f      	ldr	r3, [pc, #444]	; (800090c <main+0x1d8>)
 800074e:	695a      	ldr	r2, [r3, #20]
 8000750:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000754:	615a      	str	r2, [r3, #20]
 8000756:	695a      	ldr	r2, [r3, #20]
 8000758:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800075c:	9201      	str	r2, [sp, #4]
 800075e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	695a      	ldr	r2, [r3, #20]
 8000762:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000766:	615a      	str	r2, [r3, #20]
 8000768:	695a      	ldr	r2, [r3, #20]
 800076a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800076e:	9202      	str	r2, [sp, #8]
 8000770:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000780:	9303      	str	r3, [sp, #12]
 8000782:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port, USB_PULLUP_Pin, GPIO_PIN_RESET);
 8000784:	4622      	mov	r2, r4
 8000786:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f000 ff75 	bl	800167c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000792:	4f5f      	ldr	r7, [pc, #380]	; (8000910 <main+0x1dc>)
 8000794:	4622      	mov	r2, r4
 8000796:	21f0      	movs	r1, #240	; 0xf0
 8000798:	4638      	mov	r0, r7
 800079a:	f000 ff6f 	bl	800167c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = EMS_Pin;
 800079e:	2602      	movs	r6, #2
 80007a0:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007a6:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007a8:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 80007aa:	a90b      	add	r1, sp, #44	; 0x2c
 80007ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b0:	f000 fe8a 	bl	80014c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PULLUP_Pin;
 80007b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2501      	movs	r5, #1
 80007bc:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(USB_PULLUP_GPIO_Port, &GPIO_InitStruct);
 80007c2:	a90b      	add	r1, sp, #44	; 0x2c
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f000 fe7e 	bl	80014c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_CAN_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 80007cc:	23f0      	movs	r3, #240	; 0xf0
 80007ce:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	a90b      	add	r1, sp, #44	; 0x2c
 80007d8:	4638      	mov	r0, r7
 80007da:	f000 fe75 	bl	80014c8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007de:	4622      	mov	r2, r4
 80007e0:	4621      	mov	r1, r4
 80007e2:	2007      	movs	r0, #7
 80007e4:	f000 fe18 	bl	8001418 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007e8:	2007      	movs	r0, #7
 80007ea:	f000 fe4b 	bl	8001484 <HAL_NVIC_EnableIRQ>
  hcan.Instance = CAN;
 80007ee:	4849      	ldr	r0, [pc, #292]	; (8000914 <main+0x1e0>)
 80007f0:	4b49      	ldr	r3, [pc, #292]	; (8000918 <main+0x1e4>)
 80007f2:	6003      	str	r3, [r0, #0]
  hcan.Init.Prescaler = 2;
 80007f4:	6046      	str	r6, [r0, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007f6:	6084      	str	r4, [r0, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007f8:	60c4      	str	r4, [r0, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80007fa:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80007fe:	6103      	str	r3, [r0, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000800:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000804:	6143      	str	r3, [r0, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000806:	7604      	strb	r4, [r0, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000808:	7644      	strb	r4, [r0, #25]
  hcan.Init.AutoWakeUp = ENABLE;
 800080a:	7685      	strb	r5, [r0, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800080c:	76c4      	strb	r4, [r0, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800080e:	7704      	strb	r4, [r0, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000810:	7744      	strb	r4, [r0, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000812:	f000 fadb 	bl	8000dcc <HAL_CAN_Init>
 8000816:	2800      	cmp	r0, #0
 8000818:	d161      	bne.n	80008de <main+0x1aa>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	2300      	movs	r3, #0
 800081c:	9307      	str	r3, [sp, #28]
 800081e:	9308      	str	r3, [sp, #32]
 8000820:	9309      	str	r3, [sp, #36]	; 0x24
 8000822:	930a      	str	r3, [sp, #40]	; 0x28
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000824:	9304      	str	r3, [sp, #16]
 8000826:	9305      	str	r3, [sp, #20]
 8000828:	9306      	str	r3, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	930b      	str	r3, [sp, #44]	; 0x2c
 800082c:	930c      	str	r3, [sp, #48]	; 0x30
 800082e:	930d      	str	r3, [sp, #52]	; 0x34
 8000830:	930e      	str	r3, [sp, #56]	; 0x38
 8000832:	930f      	str	r3, [sp, #60]	; 0x3c
 8000834:	9310      	str	r3, [sp, #64]	; 0x40
 8000836:	9311      	str	r3, [sp, #68]	; 0x44
  htim3.Instance = TIM3;
 8000838:	4838      	ldr	r0, [pc, #224]	; (800091c <main+0x1e8>)
 800083a:	4a39      	ldr	r2, [pc, #228]	; (8000920 <main+0x1ec>)
 800083c:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 1;
 800083e:	2201      	movs	r2, #1
 8000840:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 35999;
 8000844:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000848:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084a:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800084e:	f002 febb 	bl	80035c8 <HAL_TIM_Base_Init>
 8000852:	2800      	cmp	r0, #0
 8000854:	d145      	bne.n	80008e2 <main+0x1ae>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085a:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800085c:	a907      	add	r1, sp, #28
 800085e:	482f      	ldr	r0, [pc, #188]	; (800091c <main+0x1e8>)
 8000860:	f002 fffa 	bl	8003858 <HAL_TIM_ConfigClockSource>
 8000864:	2800      	cmp	r0, #0
 8000866:	d13e      	bne.n	80008e6 <main+0x1b2>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000868:	482c      	ldr	r0, [pc, #176]	; (800091c <main+0x1e8>)
 800086a:	f002 fedd 	bl	8003628 <HAL_TIM_PWM_Init>
 800086e:	2800      	cmp	r0, #0
 8000870:	d13b      	bne.n	80008ea <main+0x1b6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	2300      	movs	r3, #0
 8000874:	9304      	str	r3, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000876:	9306      	str	r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000878:	a904      	add	r1, sp, #16
 800087a:	4828      	ldr	r0, [pc, #160]	; (800091c <main+0x1e8>)
 800087c:	f003 f8a2 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	2800      	cmp	r0, #0
 8000882:	d134      	bne.n	80008ee <main+0x1ba>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000884:	2360      	movs	r3, #96	; 0x60
 8000886:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000888:	2200      	movs	r2, #0
 800088a:	920c      	str	r2, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088c:	920d      	str	r2, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088e:	920f      	str	r2, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000890:	a90b      	add	r1, sp, #44	; 0x2c
 8000892:	4822      	ldr	r0, [pc, #136]	; (800091c <main+0x1e8>)
 8000894:	f002 ff36 	bl	8003704 <HAL_TIM_PWM_ConfigChannel>
 8000898:	bb58      	cbnz	r0, 80008f2 <main+0x1be>
  MX_USB_DEVICE_Init();
 800089a:	f004 fdef 	bl	800547c <MX_USB_DEVICE_Init>
  led_on(green);
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fed0 	bl	8000644 <led_on>
  led_on(yellow);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fecd 	bl	8000644 <led_on>
  led_on(red);
 80008aa:	2003      	movs	r0, #3
 80008ac:	f7ff feca 	bl	8000644 <led_on>
  led_on(can);
 80008b0:	2000      	movs	r0, #0
 80008b2:	f7ff fec7 	bl	8000644 <led_on>
  filter.FilterIdHigh         = 0;                        // フィルターID(上�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 80008b6:	2300      	movs	r3, #0
 80008b8:	9312      	str	r3, [sp, #72]	; 0x48
  filter.FilterIdLow          = 0;                        // フィルターID(下�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 80008ba:	9313      	str	r3, [sp, #76]	; 0x4c
  filter.FilterMaskIdHigh     = 0;                        // フィルターマスク(上�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 80008bc:	9314      	str	r3, [sp, #80]	; 0x50
  filter.FilterMaskIdLow      = 0;                        // フィルターマスク(下�?16ビッ????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?)
 80008be:	9315      	str	r3, [sp, #84]	; 0x54
  filter.FilterScale          = CAN_FILTERSCALE_32BIT;    // フィルタースケール
 80008c0:	2201      	movs	r2, #1
 80008c2:	9219      	str	r2, [sp, #100]	; 0x64
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;         // フィルターに割り当てるFIFO
 80008c4:	9316      	str	r3, [sp, #88]	; 0x58
  filter.FilterBank           = 0;                        // フィルターバンクNo
 80008c6:	9317      	str	r3, [sp, #92]	; 0x5c
  filter.FilterMode           = CAN_FILTERMODE_IDMASK;    // フィルターモー????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?
 80008c8:	9318      	str	r3, [sp, #96]	; 0x60
  filter.SlaveStartFilterBank = 14;                       // スレーブCANの開始フィルターバンクNo
 80008ca:	230e      	movs	r3, #14
 80008cc:	931b      	str	r3, [sp, #108]	; 0x6c
  filter.FilterActivation     = ENABLE;                   // フィルター無効?????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��????????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��???????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��??????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��?????��?��??��?��???��?��??��?��????��?��??��?��???��?��??��?��有効
 80008ce:	921a      	str	r2, [sp, #104]	; 0x68
  if(HAL_CAN_ConfigFilter(&hcan, &filter)!=HAL_OK ){
 80008d0:	a912      	add	r1, sp, #72	; 0x48
 80008d2:	4810      	ldr	r0, [pc, #64]	; (8000914 <main+0x1e0>)
 80008d4:	f000 fb09 	bl	8000eea <HAL_CAN_ConfigFilter>
 80008d8:	b168      	cbz	r0, 80008f6 <main+0x1c2>
 80008da:	b672      	cpsid	i
  while (1)
 80008dc:	e7fe      	b.n	80008dc <main+0x1a8>
 80008de:	b672      	cpsid	i
 80008e0:	e7fe      	b.n	80008e0 <main+0x1ac>
 80008e2:	b672      	cpsid	i
 80008e4:	e7fe      	b.n	80008e4 <main+0x1b0>
 80008e6:	b672      	cpsid	i
 80008e8:	e7fe      	b.n	80008e8 <main+0x1b4>
 80008ea:	b672      	cpsid	i
 80008ec:	e7fe      	b.n	80008ec <main+0x1b8>
 80008ee:	b672      	cpsid	i
 80008f0:	e7fe      	b.n	80008f0 <main+0x1bc>
 80008f2:	b672      	cpsid	i
 80008f4:	e7fe      	b.n	80008f4 <main+0x1c0>
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)!=HAL_OK){
 80008f6:	2102      	movs	r1, #2
 80008f8:	4806      	ldr	r0, [pc, #24]	; (8000914 <main+0x1e0>)
 80008fa:	f000 fc35 	bl	8001168 <HAL_CAN_ActivateNotification>
 80008fe:	b108      	cbz	r0, 8000904 <main+0x1d0>
 8000900:	b672      	cpsid	i
  while (1)
 8000902:	e7fe      	b.n	8000902 <main+0x1ce>
  main_cpp();
 8000904:	f000 f946 	bl	8000b94 <main_cpp>
  while (1)
 8000908:	e7fe      	b.n	8000908 <main+0x1d4>
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000
 8000910:	48000400 	.word	0x48000400
 8000914:	20000210 	.word	0x20000210
 8000918:	40006400 	.word	0x40006400
 800091c:	20000238 	.word	0x20000238
 8000920:	40000400 	.word	0x40000400

08000924 <Error_Handler>:
 8000924:	b672      	cpsid	i
  while (1)
 8000926:	e7fe      	b.n	8000926 <Error_Handler+0x2>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_MspInit+0x2c>)
 800092c:	699a      	ldr	r2, [r3, #24]
 800092e:	f042 0201 	orr.w	r2, r2, #1
 8000932:	619a      	str	r2, [r3, #24]
 8000934:	699a      	ldr	r2, [r3, #24]
 8000936:	f002 0201 	and.w	r2, r2, #1
 800093a:	9200      	str	r2, [sp, #0]
 800093c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	69da      	ldr	r2, [r3, #28]
 8000940:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000944:	61da      	str	r2, [r3, #28]
 8000946:	69db      	ldr	r3, [r3, #28]
 8000948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094c:	9301      	str	r3, [sp, #4]
 800094e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000950:	b002      	add	sp, #8
 8000952:	4770      	bx	lr
 8000954:	40021000 	.word	0x40021000

08000958 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000958:	b500      	push	{lr}
 800095a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	2300      	movs	r3, #0
 800095e:	9303      	str	r3, [sp, #12]
 8000960:	9304      	str	r3, [sp, #16]
 8000962:	9305      	str	r3, [sp, #20]
 8000964:	9306      	str	r3, [sp, #24]
 8000966:	9307      	str	r3, [sp, #28]
  if(hcan->Instance==CAN)
 8000968:	6802      	ldr	r2, [r0, #0]
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_CAN_MspInit+0x74>)
 800096c:	429a      	cmp	r2, r3
 800096e:	d002      	beq.n	8000976 <HAL_CAN_MspInit+0x1e>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000970:	b009      	add	sp, #36	; 0x24
 8000972:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000976:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 800097a:	69da      	ldr	r2, [r3, #28]
 800097c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000980:	61da      	str	r2, [r3, #28]
 8000982:	69da      	ldr	r2, [r3, #28]
 8000984:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000988:	9201      	str	r2, [sp, #4]
 800098a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	695a      	ldr	r2, [r3, #20]
 800098e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099a:	9302      	str	r3, [sp, #8]
 800099c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800099e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80009ac:	2309      	movs	r3, #9
 80009ae:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	a903      	add	r1, sp, #12
 80009b2:	4807      	ldr	r0, [pc, #28]	; (80009d0 <HAL_CAN_MspInit+0x78>)
 80009b4:	f000 fd88 	bl	80014c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 1, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	2014      	movs	r0, #20
 80009be:	f000 fd2b 	bl	8001418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80009c2:	2014      	movs	r0, #20
 80009c4:	f000 fd5e 	bl	8001484 <HAL_NVIC_EnableIRQ>
}
 80009c8:	e7d2      	b.n	8000970 <HAL_CAN_MspInit+0x18>
 80009ca:	bf00      	nop
 80009cc:	40006400 	.word	0x40006400
 80009d0:	48000400 	.word	0x48000400

080009d4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 80009d4:	6802      	ldr	r2, [r0, #0]
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_TIM_Base_MspInit+0x3c>)
 80009d8:	429a      	cmp	r2, r3
 80009da:	d000      	beq.n	80009de <HAL_TIM_Base_MspInit+0xa>
 80009dc:	4770      	bx	lr
{
 80009de:	b500      	push	{lr}
 80009e0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009e2:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80009e6:	69da      	ldr	r2, [r3, #28]
 80009e8:	f042 0202 	orr.w	r2, r2, #2
 80009ec:	61da      	str	r2, [r3, #28]
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	9301      	str	r3, [sp, #4]
 80009f6:	9b01      	ldr	r3, [sp, #4]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	4611      	mov	r1, r2
 80009fc:	201d      	movs	r0, #29
 80009fe:	f000 fd0b 	bl	8001418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a02:	201d      	movs	r0, #29
 8000a04:	f000 fd3e 	bl	8001484 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a08:	b003      	add	sp, #12
 8000a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a0e:	bf00      	nop
 8000a10:	40000400 	.word	0x40000400

08000a14 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler>

08000a16 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler>

08000a18 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler>

08000a1a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <BusFault_Handler>

08000a1c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler>

08000a1e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	4770      	bx	lr

08000a20 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a26:	f000 f9bf 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2a:	bd08      	pop	{r3, pc}

08000a2c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f000 fe2a 	bl	8001688 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a34:	bd08      	pop	{r3, pc}
	...

08000a38 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000a38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */
//	led_on(green);
  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a3a:	4802      	ldr	r0, [pc, #8]	; (8000a44 <USB_LP_CAN_RX0_IRQHandler+0xc>)
 8000a3c:	f000 fbb3 	bl	80011a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000a40:	bd08      	pop	{r3, pc}
 8000a42:	bf00      	nop
 8000a44:	20000210 	.word	0x20000210

08000a48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <TIM3_IRQHandler+0xc>)
 8000a4c:	f002 fc6a 	bl	8003324 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a50:	bd08      	pop	{r3, pc}
 8000a52:	bf00      	nop
 8000a54:	20000238 	.word	0x20000238

08000a58 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8000a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a5a:	4802      	ldr	r0, [pc, #8]	; (8000a64 <USB_LP_IRQHandler+0xc>)
 8000a5c:	f000 feb3 	bl	80017c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8000a60:	bd08      	pop	{r3, pc}
 8000a62:	bf00      	nop
 8000a64:	2000112c 	.word	0x2000112c

08000a68 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <SystemInit+0x10>)
 8000a6a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000a6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <_ZN10MotorParamC1Ev>:
struct MotorParam{
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4618      	mov	r0, r3
 8000a88:	2320      	movs	r3, #32
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f004 ffa4 	bl	80059da <memset>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	3320      	adds	r3, #32
 8000a96:	2220      	movs	r2, #32
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f004 ff9d 	bl	80059da <memset>
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	4a2b      	ldr	r2, [pc, #172]	; (8000b50 <_ZN10MotorParamC1Ev+0xd4>)
 8000aa4:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8000aa8:	4615      	mov	r5, r2
 8000aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ab2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3360      	adds	r3, #96	; 0x60
 8000aba:	2220      	movs	r2, #32
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f004 ff8b 	bl	80059da <memset>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3380      	adds	r3, #128	; 0x80
 8000ac8:	2220      	movs	r2, #32
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f004 ff84 	bl	80059da <memset>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	33a0      	adds	r3, #160	; 0xa0
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f004 ff7d 	bl	80059da <memset>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	33c0      	adds	r3, #192	; 0xc0
 8000ae4:	2220      	movs	r2, #32
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 ff76 	bl	80059da <memset>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	33e0      	adds	r3, #224	; 0xe0
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <_ZN10MotorParamC1Ev+0xd8>)
 8000afc:	33e8      	adds	r3, #232	; 0xe8
 8000afe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b02:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <_ZN10MotorParamC1Ev+0xdc>)
 8000b0a:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8000b0e:	4615      	mov	r5, r2
 8000b10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b14:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000b22:	2220      	movs	r2, #32
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f004 ff57 	bl	80059da <memset>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8000b32:	2220      	movs	r2, #32
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 ff4f 	bl	80059da <memset>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <_ZN10MotorParamC1Ev+0xe0>)
 8000b40:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	08005a4c 	.word	0x08005a4c
 8000b54:	08005a6c 	.word	0x08005a6c
 8000b58:	08005a74 	.word	0x08005a74
 8000b5c:	3f4ccccd 	.word	0x3f4ccccd

08000b60 <_ZN9MotorCtrlC1Ev>:
class MotorCtrl{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ff86 	bl	8000a7c <_ZN10MotorParamC1Ev>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f04f 0200 	mov.w	r2, #0
 8000b76:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2201      	movs	r2, #1
 8000b86:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <main_cpp>:

CAN_TxHeaderTypeDef TxHeader1;
CAN_TxHeaderTypeDef TxHeader2;

void main_cpp()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	TxHeader1.IDE = CAN_ID_STD;
 8000b9a:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <main_cpp+0xfc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
	TxHeader1.RTR = CAN_RTR_DATA;
 8000ba0:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <main_cpp+0xfc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
	TxHeader1.StdId = 0x200;
 8000ba6:	4b3a      	ldr	r3, [pc, #232]	; (8000c90 <main_cpp+0xfc>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bac:	601a      	str	r2, [r3, #0]
	TxHeader1.DLC = 8;
 8000bae:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <main_cpp+0xfc>)
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	611a      	str	r2, [r3, #16]
	TxHeader1.TransmitGlobalTime = DISABLE;
 8000bb4:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <main_cpp+0xfc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	751a      	strb	r2, [r3, #20]
	TxHeader2.IDE = CAN_ID_STD;
 8000bba:	4b36      	ldr	r3, [pc, #216]	; (8000c94 <main_cpp+0x100>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
	TxHeader2.RTR = CAN_RTR_DATA;
 8000bc0:	4b34      	ldr	r3, [pc, #208]	; (8000c94 <main_cpp+0x100>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
	TxHeader2.StdId = 0x1ff;
 8000bc6:	4b33      	ldr	r3, [pc, #204]	; (8000c94 <main_cpp+0x100>)
 8000bc8:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000bcc:	601a      	str	r2, [r3, #0]
	TxHeader2.DLC = 8;
 8000bce:	4b31      	ldr	r3, [pc, #196]	; (8000c94 <main_cpp+0x100>)
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	611a      	str	r2, [r3, #16]
	TxHeader2.TransmitGlobalTime = DISABLE;
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <main_cpp+0x100>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	751a      	strb	r2, [r3, #20]

	HAL_CAN_Start(&hcan);
 8000bda:	482f      	ldr	r0, [pc, #188]	; (8000c98 <main_cpp+0x104>)
 8000bdc:	f000 fa08 	bl	8000ff0 <HAL_CAN_Start>
	HAL_TIM_Base_Start_IT(&htim3);
 8000be0:	482e      	ldr	r0, [pc, #184]	; (8000c9c <main_cpp+0x108>)
 8000be2:	f002 fb5b 	bl	800329c <HAL_TIM_Base_Start_IT>

	uint8_t debug_state = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	71fb      	strb	r3, [r7, #7]
	while (true)
	{
		if (READ_BIT(CAN->MSR, CAN_MSR_INAK) == 1)
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <main_cpp+0x10c>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	bf0c      	ite	eq
 8000bf6:	2301      	moveq	r3, #1
 8000bf8:	2300      	movne	r3, #0
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d008      	beq.n	8000c12 <main_cpp+0x7e>
		{
			// can start
			CLEAR_BIT(CAN->MCR, CAN_MCR_INRQ);
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <main_cpp+0x10c>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a26      	ldr	r2, [pc, #152]	; (8000ca0 <main_cpp+0x10c>)
 8000c06:	f023 0301 	bic.w	r3, r3, #1
 8000c0a:	6013      	str	r3, [r2, #0]
			led_on(green);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f7ff fd19 	bl	8000644 <led_on>
		}
		if (debug_state == 0)
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d126      	bne.n	8000c66 <main_cpp+0xd2>
		{
			switch (hUsbDeviceFS.dev_state)
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <main_cpp+0x110>)
 8000c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d832      	bhi.n	8000c8a <main_cpp+0xf6>
 8000c24:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <main_cpp+0x98>)
 8000c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000c3d 	.word	0x08000c3d
 8000c30:	08000c45 	.word	0x08000c45
 8000c34:	08000c5b 	.word	0x08000c5b
 8000c38:	08000c4d 	.word	0x08000c4d
			{
			case USBD_STATE_DEFAULT:
				led_on(red);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff fd01 	bl	8000644 <led_on>
				break;
 8000c42:	e022      	b.n	8000c8a <main_cpp+0xf6>
			case USBD_STATE_ADDRESSED:
				led_on(yellow);
 8000c44:	2002      	movs	r0, #2
 8000c46:	f7ff fcfd 	bl	8000644 <led_on>
				break;
 8000c4a:	e01e      	b.n	8000c8a <main_cpp+0xf6>
			case USBD_STATE_SUSPENDED:
				led_on(yellow);
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f7ff fcf9 	bl	8000644 <led_on>
				led_on(red);
 8000c52:	2003      	movs	r0, #3
 8000c54:	f7ff fcf6 	bl	8000644 <led_on>
				break;
 8000c58:	e017      	b.n	8000c8a <main_cpp+0xf6>
			case USBD_STATE_CONFIGURED:
				led_on(green);
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	f7ff fcf2 	bl	8000644 <led_on>
				debug_state = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	71fb      	strb	r3, [r7, #7]
				break;
 8000c64:	e011      	b.n	8000c8a <main_cpp+0xf6>
			}
		}
		else if (debug_state == 1)
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d10e      	bne.n	8000c8a <main_cpp+0xf6>
		{
			switch (hcan.ErrorCode)
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <main_cpp+0x104>)
 8000c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c70:	2b20      	cmp	r3, #32
 8000c72:	d005      	beq.n	8000c80 <main_cpp+0xec>
 8000c74:	2b80      	cmp	r3, #128	; 0x80
 8000c76:	d107      	bne.n	8000c88 <main_cpp+0xf4>
			{
			case HAL_CAN_ERROR_BD: // bit dominant error
				led_on(red);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f7ff fce3 	bl	8000644 <led_on>
				break;
 8000c7e:	e004      	b.n	8000c8a <main_cpp+0xf6>
			case HAL_CAN_ERROR_ACK: // acknowledge error
				led_on(yellow);
 8000c80:	2002      	movs	r0, #2
 8000c82:	f7ff fcdf 	bl	8000644 <led_on>
				break;
 8000c86:	e000      	b.n	8000c8a <main_cpp+0xf6>
			default:
				break;
 8000c88:	bf00      	nop
			}
		}

		led_process(); //turn off all led
 8000c8a:	f7ff fcf5 	bl	8000678 <led_process>
		if (READ_BIT(CAN->MSR, CAN_MSR_INAK) == 1)
 8000c8e:	e7ac      	b.n	8000bea <main_cpp+0x56>
 8000c90:	200003ec 	.word	0x200003ec
 8000c94:	20000404 	.word	0x20000404
 8000c98:	20000210 	.word	0x20000210
 8000c9c:	20000238 	.word	0x20000238
 8000ca0:	40006400 	.word	0x40006400
 8000ca4:	20000424 	.word	0x20000424

08000ca8 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d107      	bne.n	8000cc8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d102      	bne.n	8000cc8 <_Z41__static_initialization_and_destruction_0ii+0x20>
MotorCtrl motor;
 8000cc2:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000cc4:	f7ff ff4c 	bl	8000b60 <_ZN9MotorCtrlC1Ev>
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000284 	.word	0x20000284

08000cd4 <_GLOBAL__sub_I_motor>:
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff ffe3 	bl	8000ca8 <_Z41__static_initialization_and_destruction_0ii>
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce8:	480d      	ldr	r0, [pc, #52]	; (8000d20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cea:	490e      	ldr	r1, [pc, #56]	; (8000d24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cec:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <LoopForever+0xe>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf0:	e002      	b.n	8000cf8 <LoopCopyDataInit>

08000cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf6:	3304      	adds	r3, #4

08000cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cfc:	d3f9      	bcc.n	8000cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d00:	4c0b      	ldr	r4, [pc, #44]	; (8000d30 <LoopForever+0x16>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d04:	e001      	b.n	8000d0a <LoopFillZerobss>

08000d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d08:	3204      	adds	r2, #4

08000d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d0c:	d3fb      	bcc.n	8000d06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d0e:	f7ff feab 	bl	8000a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f004 fe6b 	bl	80059ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d16:	f7ff fd0d 	bl	8000734 <main>

08000d1a <LoopForever>:

LoopForever:
    b LoopForever
 8000d1a:	e7fe      	b.n	8000d1a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d1c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d24:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8000d28:	08005b08 	.word	0x08005b08
  ldr r2, =_sbss
 8000d2c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8000d30:	20001638 	.word	0x20001638

08000d34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC1_2_IRQHandler>
	...

08000d38 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b510      	push	{r4, lr}
 8000d3a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_InitTick+0x40>)
 8000d3e:	781a      	ldrb	r2, [r3, #0]
 8000d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d48:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <HAL_InitTick+0x44>)
 8000d4a:	6810      	ldr	r0, [r2, #0]
 8000d4c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d50:	f000 fba6 	bl	80014a0 <HAL_SYSTICK_Config>
 8000d54:	b968      	cbnz	r0, 8000d72 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	2c0f      	cmp	r4, #15
 8000d58:	d901      	bls.n	8000d5e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	e00a      	b.n	8000d74 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	4621      	mov	r1, r4
 8000d62:	f04f 30ff 	mov.w	r0, #4294967295
 8000d66:	f000 fb57 	bl	8001418 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_InitTick+0x48>)
 8000d6c:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8000d6e:	2000      	movs	r0, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
}
 8000d74:	bd10      	pop	{r4, pc}
 8000d76:	bf00      	nop
 8000d78:	20000054 	.word	0x20000054
 8000d7c:	20000050 	.word	0x20000050
 8000d80:	20000058 	.word	0x20000058

08000d84 <HAL_Init>:
{
 8000d84:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d86:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x20>)
 8000d88:	6813      	ldr	r3, [r2, #0]
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 fb2f 	bl	80013f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	200f      	movs	r0, #15
 8000d98:	f7ff ffce 	bl	8000d38 <HAL_InitTick>
  HAL_MspInit();
 8000d9c:	f7ff fdc4 	bl	8000928 <HAL_MspInit>
}
 8000da0:	2000      	movs	r0, #0
 8000da2:	bd08      	pop	{r3, pc}
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_IncTick+0x10>)
 8000daa:	6811      	ldr	r1, [r2, #0]
 8000dac:	4b03      	ldr	r3, [pc, #12]	; (8000dbc <HAL_IncTick+0x14>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	440b      	add	r3, r1
 8000db2:	6013      	str	r3, [r2, #0]
}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000041c 	.word	0x2000041c
 8000dbc:	20000054 	.word	0x20000054

08000dc0 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000dc0:	4b01      	ldr	r3, [pc, #4]	; (8000dc8 <HAL_GetTick+0x8>)
 8000dc2:	6818      	ldr	r0, [r3, #0]
}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000041c 	.word	0x2000041c

08000dcc <HAL_CAN_Init>:
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	f000 808a 	beq.w	8000ee6 <HAL_CAN_Init+0x11a>
{
 8000dd2:	b538      	push	{r3, r4, r5, lr}
 8000dd4:	4604      	mov	r4, r0
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dd6:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000dda:	b1d3      	cbz	r3, 8000e12 <HAL_CAN_Init+0x46>
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ddc:	6822      	ldr	r2, [r4, #0]
 8000dde:	6813      	ldr	r3, [r2, #0]
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000de6:	f7ff ffeb 	bl	8000dc0 <HAL_GetTick>
 8000dea:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dec:	6823      	ldr	r3, [r4, #0]
 8000dee:	685a      	ldr	r2, [r3, #4]
 8000df0:	f012 0f01 	tst.w	r2, #1
 8000df4:	d110      	bne.n	8000e18 <HAL_CAN_Init+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000df6:	f7ff ffe3 	bl	8000dc0 <HAL_GetTick>
 8000dfa:	1b40      	subs	r0, r0, r5
 8000dfc:	280a      	cmp	r0, #10
 8000dfe:	d9f5      	bls.n	8000dec <HAL_CAN_Init+0x20>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e06:	6263      	str	r3, [r4, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e08:	2305      	movs	r3, #5
 8000e0a:	f884 3020 	strb.w	r3, [r4, #32]

      return HAL_ERROR;
 8000e0e:	2001      	movs	r0, #1
  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8000e10:	bd38      	pop	{r3, r4, r5, pc}
    HAL_CAN_MspInit(hcan);
 8000e12:	f7ff fda1 	bl	8000958 <HAL_CAN_MspInit>
 8000e16:	e7e1      	b.n	8000ddc <HAL_CAN_Init+0x10>
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	f022 0202 	bic.w	r2, r2, #2
 8000e1e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000e20:	f7ff ffce 	bl	8000dc0 <HAL_GetTick>
 8000e24:	4605      	mov	r5, r0
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e26:	6823      	ldr	r3, [r4, #0]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	f012 0f02 	tst.w	r2, #2
 8000e2e:	d00d      	beq.n	8000e4c <HAL_CAN_Init+0x80>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e30:	f7ff ffc6 	bl	8000dc0 <HAL_GetTick>
 8000e34:	1b40      	subs	r0, r0, r5
 8000e36:	280a      	cmp	r0, #10
 8000e38:	d9f5      	bls.n	8000e26 <HAL_CAN_Init+0x5a>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e42:	2305      	movs	r3, #5
 8000e44:	f884 3020 	strb.w	r3, [r4, #32]
      return HAL_ERROR;
 8000e48:	2001      	movs	r0, #1
 8000e4a:	e7e1      	b.n	8000e10 <HAL_CAN_Init+0x44>
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e4c:	7e22      	ldrb	r2, [r4, #24]
 8000e4e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	bf0c      	ite	eq
 8000e54:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e58:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000e5c:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e5e:	7e63      	ldrb	r3, [r4, #25]
 8000e60:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e62:	6822      	ldr	r2, [r4, #0]
 8000e64:	6813      	ldr	r3, [r2, #0]
 8000e66:	bf0c      	ite	eq
 8000e68:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e6c:	f023 0340 	bicne.w	r3, r3, #64	; 0x40
 8000e70:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e72:	7ea3      	ldrb	r3, [r4, #26]
 8000e74:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e76:	6822      	ldr	r2, [r4, #0]
 8000e78:	6813      	ldr	r3, [r2, #0]
 8000e7a:	bf0c      	ite	eq
 8000e7c:	f043 0320 	orreq.w	r3, r3, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e80:	f023 0320 	bicne.w	r3, r3, #32
 8000e84:	6013      	str	r3, [r2, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e86:	7ee3      	ldrb	r3, [r4, #27]
 8000e88:	2b01      	cmp	r3, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e8a:	6822      	ldr	r2, [r4, #0]
 8000e8c:	6813      	ldr	r3, [r2, #0]
 8000e8e:	bf0c      	ite	eq
 8000e90:	f023 0310 	biceq.w	r3, r3, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e94:	f043 0310 	orrne.w	r3, r3, #16
 8000e98:	6013      	str	r3, [r2, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e9a:	7f23      	ldrb	r3, [r4, #28]
 8000e9c:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e9e:	6822      	ldr	r2, [r4, #0]
 8000ea0:	6813      	ldr	r3, [r2, #0]
 8000ea2:	bf0c      	ite	eq
 8000ea4:	f043 0308 	orreq.w	r3, r3, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ea8:	f023 0308 	bicne.w	r3, r3, #8
 8000eac:	6013      	str	r3, [r2, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000eae:	7f63      	ldrb	r3, [r4, #29]
 8000eb0:	2b01      	cmp	r3, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eb2:	6822      	ldr	r2, [r4, #0]
 8000eb4:	6813      	ldr	r3, [r2, #0]
 8000eb6:	bf0c      	ite	eq
 8000eb8:	f043 0304 	orreq.w	r3, r3, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ebc:	f023 0304 	bicne.w	r3, r3, #4
 8000ec0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ec2:	6821      	ldr	r1, [r4, #0]
 8000ec4:	68a3      	ldr	r3, [r4, #8]
 8000ec6:	68e2      	ldr	r2, [r4, #12]
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	6922      	ldr	r2, [r4, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	6962      	ldr	r2, [r4, #20]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	6862      	ldr	r2, [r4, #4]
 8000ed4:	3a01      	subs	r2, #1
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61cb      	str	r3, [r1, #28]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eda:	2000      	movs	r0, #0
 8000edc:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f884 3020 	strb.w	r3, [r4, #32]
  return HAL_OK;
 8000ee4:	e794      	b.n	8000e10 <HAL_CAN_Init+0x44>
    return HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1
}
 8000ee8:	4770      	bx	lr

08000eea <HAL_CAN_ConfigFilter>:
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000eea:	6802      	ldr	r2, [r0, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eec:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d905      	bls.n	8000f04 <HAL_CAN_ConfigFilter+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ef8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efe:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000f00:	2001      	movs	r0, #1
  }
}
 8000f02:	4770      	bx	lr
{
 8000f04:	b430      	push	{r4, r5}
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f06:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f12:	694b      	ldr	r3, [r1, #20]
 8000f14:	f003 031f 	and.w	r3, r3, #31
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f303 	lsl.w	r3, r0, r3
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f1e:	f8d2 021c 	ldr.w	r0, [r2, #540]	; 0x21c
 8000f22:	ea6f 0c03 	mvn.w	ip, r3
 8000f26:	ea20 0003 	bic.w	r0, r0, r3
 8000f2a:	f8c2 021c 	str.w	r0, [r2, #540]	; 0x21c
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f2e:	69c8      	ldr	r0, [r1, #28]
 8000f30:	b9b0      	cbnz	r0, 8000f60 <HAL_CAN_ConfigFilter+0x76>
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f32:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8000f36:	ea0c 0000 	and.w	r0, ip, r0
 8000f3a:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f3e:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f40:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f42:	68cd      	ldr	r5, [r1, #12]
 8000f44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f48:	3048      	adds	r0, #72	; 0x48
 8000f4a:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f4e:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f50:	880c      	ldrh	r4, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f52:	688d      	ldr	r5, [r1, #8]
 8000f54:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f58:	3048      	adds	r0, #72	; 0x48
 8000f5a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000f5e:	6044      	str	r4, [r0, #4]
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f60:	69c8      	ldr	r0, [r1, #28]
 8000f62:	2801      	cmp	r0, #1
 8000f64:	d01b      	beq.n	8000f9e <HAL_CAN_ConfigFilter+0xb4>
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f66:	6988      	ldr	r0, [r1, #24]
 8000f68:	bb80      	cbnz	r0, 8000fcc <HAL_CAN_ConfigFilter+0xe2>
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f6a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8000f6e:	ea0c 0000 	and.w	r0, ip, r0
 8000f72:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f76:	6908      	ldr	r0, [r1, #16]
 8000f78:	bb70      	cbnz	r0, 8000fd8 <HAL_CAN_ConfigFilter+0xee>
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f7a:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8000f7e:	ea0c 0000 	and.w	r0, ip, r0
 8000f82:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f86:	6a09      	ldr	r1, [r1, #32]
 8000f88:	2901      	cmp	r1, #1
 8000f8a:	d02b      	beq.n	8000fe4 <HAL_CAN_ConfigFilter+0xfa>
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f8c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000f90:	f023 0301 	bic.w	r3, r3, #1
 8000f94:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    return HAL_OK;
 8000f98:	2000      	movs	r0, #0
}
 8000f9a:	bc30      	pop	{r4, r5}
 8000f9c:	4770      	bx	lr
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f9e:	f8d2 020c 	ldr.w	r0, [r2, #524]	; 0x20c
 8000fa2:	4318      	orrs	r0, r3
 8000fa4:	f8c2 020c 	str.w	r0, [r2, #524]	; 0x20c
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa8:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000faa:	888c      	ldrh	r4, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fac:	680d      	ldr	r5, [r1, #0]
 8000fae:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb2:	3048      	adds	r0, #72	; 0x48
 8000fb4:	f842 4030 	str.w	r4, [r2, r0, lsl #3]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fb8:	6948      	ldr	r0, [r1, #20]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fba:	898c      	ldrh	r4, [r1, #12]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fbc:	688d      	ldr	r5, [r1, #8]
 8000fbe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc2:	3048      	adds	r0, #72	; 0x48
 8000fc4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8000fc8:	6044      	str	r4, [r0, #4]
 8000fca:	e7cc      	b.n	8000f66 <HAL_CAN_ConfigFilter+0x7c>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fcc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8000fd0:	4318      	orrs	r0, r3
 8000fd2:	f8c2 0204 	str.w	r0, [r2, #516]	; 0x204
 8000fd6:	e7ce      	b.n	8000f76 <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fd8:	f8d2 0214 	ldr.w	r0, [r2, #532]	; 0x214
 8000fdc:	4318      	orrs	r0, r3
 8000fde:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
 8000fe2:	e7d0      	b.n	8000f86 <HAL_CAN_ConfigFilter+0x9c>
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fe4:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
 8000fee:	e7cd      	b.n	8000f8c <HAL_CAN_ConfigFilter+0xa2>

08000ff0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000ff0:	b570      	push	{r4, r5, r6, lr}
 8000ff2:	4604      	mov	r4, r0
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ff4:	f890 5020 	ldrb.w	r5, [r0, #32]
 8000ff8:	b2ed      	uxtb	r5, r5
 8000ffa:	2d01      	cmp	r5, #1
 8000ffc:	d006      	beq.n	800100c <HAL_CAN_Start+0x1c>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000ffe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001004:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001006:	2501      	movs	r5, #1
  }
}
 8001008:	4628      	mov	r0, r5
 800100a:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_LISTENING;
 800100c:	2302      	movs	r3, #2
 800100e:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001012:	6802      	ldr	r2, [r0, #0]
 8001014:	6813      	ldr	r3, [r2, #0]
 8001016:	f023 0301 	bic.w	r3, r3, #1
 800101a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800101c:	f7ff fed0 	bl	8000dc0 <HAL_GetTick>
 8001020:	4606      	mov	r6, r0
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f013 0f01 	tst.w	r3, #1
 800102a:	d00c      	beq.n	8001046 <HAL_CAN_Start+0x56>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800102c:	f7ff fec8 	bl	8000dc0 <HAL_GetTick>
 8001030:	1b83      	subs	r3, r0, r6
 8001032:	2b0a      	cmp	r3, #10
 8001034:	d9f5      	bls.n	8001022 <HAL_CAN_Start+0x32>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 800103e:	2305      	movs	r3, #5
 8001040:	f884 3020 	strb.w	r3, [r4, #32]
        return HAL_ERROR;
 8001044:	e7e0      	b.n	8001008 <HAL_CAN_Start+0x18>
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001046:	2500      	movs	r5, #0
 8001048:	6265      	str	r5, [r4, #36]	; 0x24
    return HAL_OK;
 800104a:	e7dd      	b.n	8001008 <HAL_CAN_Start+0x18>

0800104c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800104c:	b570      	push	{r4, r5, r6, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800104e:	f890 c020 	ldrb.w	ip, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001052:	6804      	ldr	r4, [r0, #0]
 8001054:	68a4      	ldr	r4, [r4, #8]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001056:	f10c 3cff 	add.w	ip, ip, #4294967295
 800105a:	fa5f fc8c 	uxtb.w	ip, ip
 800105e:	f1bc 0f01 	cmp.w	ip, #1
 8001062:	d864      	bhi.n	800112e <HAL_CAN_AddTxMessage+0xe2>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001064:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8001068:	d05b      	beq.n	8001122 <HAL_CAN_AddTxMessage+0xd6>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800106a:	f3c4 6c01 	ubfx	ip, r4, #24, #2

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800106e:	2401      	movs	r4, #1
 8001070:	fa04 f40c 	lsl.w	r4, r4, ip
 8001074:	601c      	str	r4, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001076:	688b      	ldr	r3, [r1, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d13b      	bne.n	80010f4 <HAL_CAN_AddTxMessage+0xa8>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800107c:	6804      	ldr	r4, [r0, #0]
 800107e:	680d      	ldr	r5, [r1, #0]
 8001080:	68cb      	ldr	r3, [r1, #12]
 8001082:	ea43 5545 	orr.w	r5, r3, r5, lsl #21
 8001086:	f10c 0318 	add.w	r3, ip, #24
 800108a:	011b      	lsls	r3, r3, #4
 800108c:	50e5      	str	r5, [r4, r3]
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800108e:	6803      	ldr	r3, [r0, #0]
 8001090:	690c      	ldr	r4, [r1, #16]
 8001092:	f10c 0e18 	add.w	lr, ip, #24
 8001096:	eb03 130e 	add.w	r3, r3, lr, lsl #4
 800109a:	605c      	str	r4, [r3, #4]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800109c:	7d0b      	ldrb	r3, [r1, #20]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d035      	beq.n	800110e <HAL_CAN_AddTxMessage+0xc2>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80010a2:	6801      	ldr	r1, [r0, #0]
 80010a4:	79d4      	ldrb	r4, [r2, #7]
 80010a6:	7993      	ldrb	r3, [r2, #6]
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80010ae:	7914      	ldrb	r4, [r2, #4]
 80010b0:	4323      	orrs	r3, r4
 80010b2:	7954      	ldrb	r4, [r2, #5]
 80010b4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80010b8:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 80010bc:	f8c1 318c 	str.w	r3, [r1, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80010c0:	6801      	ldr	r1, [r0, #0]
 80010c2:	78d4      	ldrb	r4, [r2, #3]
 80010c4:	7893      	ldrb	r3, [r2, #2]
 80010c6:	041b      	lsls	r3, r3, #16
 80010c8:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80010cc:	7814      	ldrb	r4, [r2, #0]
 80010ce:	4323      	orrs	r3, r4
 80010d0:	7852      	ldrb	r2, [r2, #1]
 80010d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80010d6:	eb01 110c 	add.w	r1, r1, ip, lsl #4
 80010da:	f8c1 3188 	str.w	r3, [r1, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010de:	6803      	ldr	r3, [r0, #0]
 80010e0:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 80010e4:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 80010e8:	f042 0201 	orr.w	r2, r2, #1
 80010ec:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 80010f0:	2000      	movs	r0, #0
 80010f2:	e021      	b.n	8001138 <HAL_CAN_AddTxMessage+0xec>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010f4:	6804      	ldr	r4, [r0, #0]
 80010f6:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 80010f8:	68ce      	ldr	r6, [r1, #12]
 80010fa:	4333      	orrs	r3, r6
 80010fc:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001100:	f10c 0e18 	add.w	lr, ip, #24
 8001104:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
 8001108:	f844 300e 	str.w	r3, [r4, lr]
 800110c:	e7bf      	b.n	800108e <HAL_CAN_AddTxMessage+0x42>
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800110e:	6803      	ldr	r3, [r0, #0]
 8001110:	eb03 130c 	add.w	r3, r3, ip, lsl #4
 8001114:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 8001118:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800111c:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
 8001120:	e7bf      	b.n	80010a2 <HAL_CAN_AddTxMessage+0x56>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001122:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001128:	6243      	str	r3, [r0, #36]	; 0x24

      return HAL_ERROR;
 800112a:	2001      	movs	r0, #1
 800112c:	e004      	b.n	8001138 <HAL_CAN_AddTxMessage+0xec>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800112e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001134:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
  }
}
 8001138:	bd70      	pop	{r4, r5, r6, pc}

0800113a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 800113a:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 800113e:	3b01      	subs	r3, #1
 8001140:	b2db      	uxtb	r3, r3
 8001142:	2b01      	cmp	r3, #1
 8001144:	d901      	bls.n	800114a <HAL_CAN_GetTxMailboxesFreeLevel+0x10>
  uint32_t freelevel = 0U;
 8001146:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8001148:	4770      	bx	lr
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800114a:	6803      	ldr	r3, [r0, #0]
 800114c:	6898      	ldr	r0, [r3, #8]
 800114e:	f3c0 6080 	ubfx	r0, r0, #26, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
      freelevel++;
 8001158:	bf18      	it	ne
 800115a:	3001      	addne	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001162:	d0f1      	beq.n	8001148 <HAL_CAN_GetTxMailboxesFreeLevel+0xe>
      freelevel++;
 8001164:	3001      	adds	r0, #1
 8001166:	4770      	bx	lr

08001168 <HAL_CAN_ActivateNotification>:
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
  HAL_CAN_StateTypeDef state = hcan->State;
 8001168:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800116c:	3b01      	subs	r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d905      	bls.n	8001180 <HAL_CAN_ActivateNotification+0x18>
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001174:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001176:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 800117c:	2001      	movs	r0, #1
  }
}
 800117e:	4770      	bx	lr
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001180:	6802      	ldr	r2, [r0, #0]
 8001182:	6953      	ldr	r3, [r2, #20]
 8001184:	430b      	orrs	r3, r1
 8001186:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8001188:	2000      	movs	r0, #0
 800118a:	4770      	bx	lr

0800118c <HAL_CAN_TxMailbox0CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800118c:	4770      	bx	lr

0800118e <HAL_CAN_TxMailbox1CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800118e:	4770      	bx	lr

08001190 <HAL_CAN_TxMailbox2CompleteCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001190:	4770      	bx	lr

08001192 <HAL_CAN_TxMailbox0AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001192:	4770      	bx	lr

08001194 <HAL_CAN_TxMailbox1AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001194:	4770      	bx	lr

08001196 <HAL_CAN_TxMailbox2AbortCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001196:	4770      	bx	lr

08001198 <HAL_CAN_RxFifo0MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001198:	4770      	bx	lr

0800119a <HAL_CAN_RxFifo0FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800119a:	4770      	bx	lr

0800119c <HAL_CAN_RxFifo1MsgPendingCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800119c:	4770      	bx	lr

0800119e <HAL_CAN_RxFifo1FullCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800119e:	4770      	bx	lr

080011a0 <HAL_CAN_SleepCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011a0:	4770      	bx	lr

080011a2 <HAL_CAN_WakeUpFromRxMsgCallback>:

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011a2:	4770      	bx	lr

080011a4 <HAL_CAN_ErrorCallback>:
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011a4:	4770      	bx	lr

080011a6 <HAL_CAN_IRQHandler>:
{
 80011a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011aa:	4605      	mov	r5, r0
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80011ac:	6803      	ldr	r3, [r0, #0]
 80011ae:	695c      	ldr	r4, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80011b0:	f8d3 8004 	ldr.w	r8, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011b4:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011b6:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011ba:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011be:	f8d3 9018 	ldr.w	r9, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011c2:	f014 0601 	ands.w	r6, r4, #1
 80011c6:	d03b      	beq.n	8001240 <HAL_CAN_IRQHandler+0x9a>
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011c8:	f017 0601 	ands.w	r6, r7, #1
 80011cc:	d016      	beq.n	80011fc <HAL_CAN_IRQHandler+0x56>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011ce:	2201      	movs	r2, #1
 80011d0:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011d2:	f017 0f02 	tst.w	r7, #2
 80011d6:	d108      	bne.n	80011ea <HAL_CAN_IRQHandler+0x44>
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011d8:	f017 0f04 	tst.w	r7, #4
 80011dc:	d10c      	bne.n	80011f8 <HAL_CAN_IRQHandler+0x52>
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80011de:	f017 0608 	ands.w	r6, r7, #8
 80011e2:	d006      	beq.n	80011f2 <HAL_CAN_IRQHandler+0x4c>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80011e4:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 80011e8:	e008      	b.n	80011fc <HAL_CAN_IRQHandler+0x56>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011ea:	f7ff ffcf 	bl	800118c <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80011ee:	2600      	movs	r6, #0
 80011f0:	e004      	b.n	80011fc <HAL_CAN_IRQHandler+0x56>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80011f2:	f7ff ffce 	bl	8001192 <HAL_CAN_TxMailbox0AbortCallback>
 80011f6:	e001      	b.n	80011fc <HAL_CAN_IRQHandler+0x56>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011f8:	f44f 6600 	mov.w	r6, #2048	; 0x800
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80011fc:	f417 7f80 	tst.w	r7, #256	; 0x100
 8001200:	d00d      	beq.n	800121e <HAL_CAN_IRQHandler+0x78>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001202:	682b      	ldr	r3, [r5, #0]
 8001204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001208:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800120a:	f417 7f00 	tst.w	r7, #512	; 0x200
 800120e:	f040 8087 	bne.w	8001320 <HAL_CAN_IRQHandler+0x17a>
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001212:	f417 6f80 	tst.w	r7, #1024	; 0x400
 8001216:	f000 8087 	beq.w	8001328 <HAL_CAN_IRQHandler+0x182>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800121a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800121e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001222:	d00d      	beq.n	8001240 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122a:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800122c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001230:	f040 8084 	bne.w	800133c <HAL_CAN_IRQHandler+0x196>
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001234:	f417 2f80 	tst.w	r7, #262144	; 0x40000
 8001238:	f000 8084 	beq.w	8001344 <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800123c:	f446 4600 	orr.w	r6, r6, #32768	; 0x8000
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001240:	f014 0f08 	tst.w	r4, #8
 8001244:	d007      	beq.n	8001256 <HAL_CAN_IRQHandler+0xb0>
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001246:	f01b 0f10 	tst.w	fp, #16
 800124a:	d004      	beq.n	8001256 <HAL_CAN_IRQHandler+0xb0>
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800124c:	f446 7600 	orr.w	r6, r6, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	2210      	movs	r2, #16
 8001254:	60da      	str	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001256:	f014 0f04 	tst.w	r4, #4
 800125a:	d002      	beq.n	8001262 <HAL_CAN_IRQHandler+0xbc>
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800125c:	f01b 0f08 	tst.w	fp, #8
 8001260:	d17a      	bne.n	8001358 <HAL_CAN_IRQHandler+0x1b2>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001262:	f014 0f02 	tst.w	r4, #2
 8001266:	d004      	beq.n	8001272 <HAL_CAN_IRQHandler+0xcc>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f013 0f03 	tst.w	r3, #3
 8001270:	d179      	bne.n	8001366 <HAL_CAN_IRQHandler+0x1c0>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001272:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001276:	d007      	beq.n	8001288 <HAL_CAN_IRQHandler+0xe2>
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001278:	f01a 0f10 	tst.w	sl, #16
 800127c:	d004      	beq.n	8001288 <HAL_CAN_IRQHandler+0xe2>
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800127e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001282:	682b      	ldr	r3, [r5, #0]
 8001284:	2210      	movs	r2, #16
 8001286:	611a      	str	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001288:	f014 0f20 	tst.w	r4, #32
 800128c:	d002      	beq.n	8001294 <HAL_CAN_IRQHandler+0xee>
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800128e:	f01a 0f08 	tst.w	sl, #8
 8001292:	d16c      	bne.n	800136e <HAL_CAN_IRQHandler+0x1c8>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001294:	f014 0f10 	tst.w	r4, #16
 8001298:	d004      	beq.n	80012a4 <HAL_CAN_IRQHandler+0xfe>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800129a:	682b      	ldr	r3, [r5, #0]
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	f013 0f03 	tst.w	r3, #3
 80012a2:	d16b      	bne.n	800137c <HAL_CAN_IRQHandler+0x1d6>
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80012a4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 80012a8:	d002      	beq.n	80012b0 <HAL_CAN_IRQHandler+0x10a>
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80012aa:	f018 0f10 	tst.w	r8, #16
 80012ae:	d169      	bne.n	8001384 <HAL_CAN_IRQHandler+0x1de>
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80012b0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 80012b4:	d002      	beq.n	80012bc <HAL_CAN_IRQHandler+0x116>
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80012b6:	f018 0f08 	tst.w	r8, #8
 80012ba:	d16a      	bne.n	8001392 <HAL_CAN_IRQHandler+0x1ec>
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80012bc:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80012c0:	f000 8084 	beq.w	80013cc <HAL_CAN_IRQHandler+0x226>
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012c4:	f018 0f04 	tst.w	r8, #4
 80012c8:	d07d      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x220>
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012ca:	f414 7f80 	tst.w	r4, #256	; 0x100
 80012ce:	d004      	beq.n	80012da <HAL_CAN_IRQHandler+0x134>
 80012d0:	f019 0f01 	tst.w	r9, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 80012d4:	bf18      	it	ne
 80012d6:	f046 0601 	orrne.w	r6, r6, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012da:	f414 7f00 	tst.w	r4, #512	; 0x200
 80012de:	d004      	beq.n	80012ea <HAL_CAN_IRQHandler+0x144>
 80012e0:	f019 0f02 	tst.w	r9, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 80012e4:	bf18      	it	ne
 80012e6:	f046 0602 	orrne.w	r6, r6, #2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012ea:	f414 6f80 	tst.w	r4, #1024	; 0x400
 80012ee:	d004      	beq.n	80012fa <HAL_CAN_IRQHandler+0x154>
 80012f0:	f019 0f04 	tst.w	r9, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 80012f4:	bf18      	it	ne
 80012f6:	f046 0604 	orrne.w	r6, r6, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012fa:	f414 6f00 	tst.w	r4, #2048	; 0x800
 80012fe:	d062      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x220>
 8001300:	f019 0970 	ands.w	r9, r9, #112	; 0x70
 8001304:	d05f      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x220>
        switch (esrflags & CAN_ESR_LEC)
 8001306:	f1b9 0f40 	cmp.w	r9, #64	; 0x40
 800130a:	d065      	beq.n	80013d8 <HAL_CAN_IRQHandler+0x232>
 800130c:	d84e      	bhi.n	80013ac <HAL_CAN_IRQHandler+0x206>
 800130e:	f1b9 0f20 	cmp.w	r9, #32
 8001312:	d05e      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x22c>
 8001314:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8001318:	d142      	bne.n	80013a0 <HAL_CAN_IRQHandler+0x1fa>
            errorcode |= HAL_CAN_ERROR_ACK;
 800131a:	f046 0620 	orr.w	r6, r6, #32
            break;
 800131e:	e04d      	b.n	80013bc <HAL_CAN_IRQHandler+0x216>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001320:	4628      	mov	r0, r5
 8001322:	f7ff ff34 	bl	800118e <HAL_CAN_TxMailbox1CompleteCallback>
 8001326:	e77a      	b.n	800121e <HAL_CAN_IRQHandler+0x78>
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001328:	f417 6f00 	tst.w	r7, #2048	; 0x800
 800132c:	d002      	beq.n	8001334 <HAL_CAN_IRQHandler+0x18e>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800132e:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001332:	e774      	b.n	800121e <HAL_CAN_IRQHandler+0x78>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001334:	4628      	mov	r0, r5
 8001336:	f7ff ff2d 	bl	8001194 <HAL_CAN_TxMailbox1AbortCallback>
 800133a:	e770      	b.n	800121e <HAL_CAN_IRQHandler+0x78>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800133c:	4628      	mov	r0, r5
 800133e:	f7ff ff27 	bl	8001190 <HAL_CAN_TxMailbox2CompleteCallback>
 8001342:	e77d      	b.n	8001240 <HAL_CAN_IRQHandler+0x9a>
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001344:	f417 2f00 	tst.w	r7, #524288	; 0x80000
 8001348:	d002      	beq.n	8001350 <HAL_CAN_IRQHandler+0x1aa>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800134a:	f446 3680 	orr.w	r6, r6, #65536	; 0x10000
 800134e:	e777      	b.n	8001240 <HAL_CAN_IRQHandler+0x9a>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001350:	4628      	mov	r0, r5
 8001352:	f7ff ff20 	bl	8001196 <HAL_CAN_TxMailbox2AbortCallback>
 8001356:	e773      	b.n	8001240 <HAL_CAN_IRQHandler+0x9a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	2208      	movs	r2, #8
 800135c:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 800135e:	4628      	mov	r0, r5
 8001360:	f7ff ff1b 	bl	800119a <HAL_CAN_RxFifo0FullCallback>
 8001364:	e77d      	b.n	8001262 <HAL_CAN_IRQHandler+0xbc>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001366:	4628      	mov	r0, r5
 8001368:	f7ff ff16 	bl	8001198 <HAL_CAN_RxFifo0MsgPendingCallback>
 800136c:	e781      	b.n	8001272 <HAL_CAN_IRQHandler+0xcc>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	2208      	movs	r2, #8
 8001372:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001374:	4628      	mov	r0, r5
 8001376:	f7ff ff12 	bl	800119e <HAL_CAN_RxFifo1FullCallback>
 800137a:	e78b      	b.n	8001294 <HAL_CAN_IRQHandler+0xee>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800137c:	4628      	mov	r0, r5
 800137e:	f7ff ff0d 	bl	800119c <HAL_CAN_RxFifo1MsgPendingCallback>
 8001382:	e78f      	b.n	80012a4 <HAL_CAN_IRQHandler+0xfe>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	2210      	movs	r2, #16
 8001388:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 800138a:	4628      	mov	r0, r5
 800138c:	f7ff ff08 	bl	80011a0 <HAL_CAN_SleepCallback>
 8001390:	e78e      	b.n	80012b0 <HAL_CAN_IRQHandler+0x10a>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001392:	682b      	ldr	r3, [r5, #0]
 8001394:	2208      	movs	r2, #8
 8001396:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001398:	4628      	mov	r0, r5
 800139a:	f7ff ff02 	bl	80011a2 <HAL_CAN_WakeUpFromRxMsgCallback>
 800139e:	e78d      	b.n	80012bc <HAL_CAN_IRQHandler+0x116>
        switch (esrflags & CAN_ESR_LEC)
 80013a0:	f1b9 0f10 	cmp.w	r9, #16
 80013a4:	d10a      	bne.n	80013bc <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_STF;
 80013a6:	f046 0608 	orr.w	r6, r6, #8
            break;
 80013aa:	e007      	b.n	80013bc <HAL_CAN_IRQHandler+0x216>
        switch (esrflags & CAN_ESR_LEC)
 80013ac:	f1b9 0f50 	cmp.w	r9, #80	; 0x50
 80013b0:	d015      	beq.n	80013de <HAL_CAN_IRQHandler+0x238>
 80013b2:	f1b9 0f60 	cmp.w	r9, #96	; 0x60
            errorcode |= HAL_CAN_ERROR_CRC;
 80013b6:	bf08      	it	eq
 80013b8:	f446 7680 	orreq.w	r6, r6, #256	; 0x100
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80013bc:	682a      	ldr	r2, [r5, #0]
 80013be:	6993      	ldr	r3, [r2, #24]
 80013c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013c4:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80013c6:	682b      	ldr	r3, [r5, #0]
 80013c8:	2204      	movs	r2, #4
 80013ca:	605a      	str	r2, [r3, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 80013cc:	b956      	cbnz	r6, 80013e4 <HAL_CAN_IRQHandler+0x23e>
}
 80013ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            errorcode |= HAL_CAN_ERROR_FOR;
 80013d2:	f046 0610 	orr.w	r6, r6, #16
            break;
 80013d6:	e7f1      	b.n	80013bc <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BR;
 80013d8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            break;
 80013dc:	e7ee      	b.n	80013bc <HAL_CAN_IRQHandler+0x216>
            errorcode |= HAL_CAN_ERROR_BD;
 80013de:	f046 0680 	orr.w	r6, r6, #128	; 0x80
            break;
 80013e2:	e7eb      	b.n	80013bc <HAL_CAN_IRQHandler+0x216>
    hcan->ErrorCode |= errorcode;
 80013e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013e6:	4333      	orrs	r3, r6
 80013e8:	626b      	str	r3, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 80013ea:	4628      	mov	r0, r5
 80013ec:	f7ff feda 	bl	80011a4 <HAL_CAN_ErrorCallback>
}
 80013f0:	e7ed      	b.n	80013ce <HAL_CAN_IRQHandler+0x228>
	...

080013f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4907      	ldr	r1, [pc, #28]	; (8001414 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80013f6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	0203      	lsls	r3, r0, #8
 80013fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001402:	0412      	lsls	r2, r2, #16
 8001404:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001410:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001418:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_NVIC_SetPriority+0x64>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001422:	f1c3 0c07 	rsb	ip, r3, #7
 8001426:	f1bc 0f04 	cmp.w	ip, #4
 800142a:	bf28      	it	cs
 800142c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001430:	f103 0e04 	add.w	lr, r3, #4
 8001434:	f1be 0f06 	cmp.w	lr, #6
 8001438:	bf8c      	ite	hi
 800143a:	3b03      	subhi	r3, #3
 800143c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800143e:	f04f 3eff 	mov.w	lr, #4294967295
 8001442:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001446:	ea21 010c 	bic.w	r1, r1, ip
 800144a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	fa0e fe03 	lsl.w	lr, lr, r3
 8001450:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001456:	2800      	cmp	r0, #0
 8001458:	db09      	blt.n	800146e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	0109      	lsls	r1, r1, #4
 800145c:	b2c9      	uxtb	r1, r1
 800145e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001462:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001466:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800146a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	f000 000f 	and.w	r0, r0, #15
 8001472:	0109      	lsls	r1, r1, #4
 8001474:	b2c9      	uxtb	r1, r1
 8001476:	4b02      	ldr	r3, [pc, #8]	; (8001480 <HAL_NVIC_SetPriority+0x68>)
 8001478:	5419      	strb	r1, [r3, r0]
 800147a:	e7f6      	b.n	800146a <HAL_NVIC_SetPriority+0x52>
 800147c:	e000ed00 	.word	0xe000ed00
 8001480:	e000ed14 	.word	0xe000ed14

08001484 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001484:	2800      	cmp	r0, #0
 8001486:	db07      	blt.n	8001498 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001488:	0941      	lsrs	r1, r0, #5
 800148a:	f000 001f 	and.w	r0, r0, #31
 800148e:	2301      	movs	r3, #1
 8001490:	4083      	lsls	r3, r0
 8001492:	4a02      	ldr	r2, [pc, #8]	; (800149c <HAL_NVIC_EnableIRQ+0x18>)
 8001494:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	3801      	subs	r0, #1
 80014a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80014a6:	d20b      	bcs.n	80014c0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80014ac:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <HAL_SYSTICK_Config+0x24>)
 80014b0:	21f0      	movs	r1, #240	; 0xf0
 80014b2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b6:	2000      	movs	r0, #0
 80014b8:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ba:	2207      	movs	r2, #7
 80014bc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80014c0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c8:	680b      	ldr	r3, [r1, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80ce 	beq.w	800166c <HAL_GPIO_Init+0x1a4>
{
 80014d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d4:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d6:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 80014da:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014dc:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014de:	f04f 0e03 	mov.w	lr, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014e2:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4c62      	ldr	r4, [pc, #392]	; (8001670 <HAL_GPIO_Init+0x1a8>)
 80014e8:	e047      	b.n	800157a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80014ea:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014ec:	fa0e fa0c 	lsl.w	sl, lr, ip
 80014f0:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014f4:	68cb      	ldr	r3, [r1, #12]
 80014f6:	fa03 f30c 	lsl.w	r3, r3, ip
 80014fa:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80014fe:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8001500:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001502:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001506:	684b      	ldr	r3, [r1, #4]
 8001508:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800150c:	4093      	lsls	r3, r2
 800150e:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 8001510:	6043      	str	r3, [r0, #4]
 8001512:	e03d      	b.n	8001590 <HAL_GPIO_Init+0xc8>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001514:	2700      	movs	r7, #0
 8001516:	fa07 f70b 	lsl.w	r7, r7, fp
 800151a:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 800151e:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR;
 8001520:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 8001522:	ea6f 0709 	mvn.w	r7, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001526:	684e      	ldr	r6, [r1, #4]
 8001528:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 800152c:	bf0c      	ite	eq
 800152e:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8001530:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR = temp;
 8001534:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8001536:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001538:	684e      	ldr	r6, [r1, #4]
 800153a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800153e:	bf0c      	ite	eq
 8001540:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8001542:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 8001546:	60e3      	str	r3, [r4, #12]

        temp = EXTI->EMR;
 8001548:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800154a:	684e      	ldr	r6, [r1, #4]
 800154c:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001550:	bf0c      	ite	eq
 8001552:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8001554:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR = temp;
 8001558:	6063      	str	r3, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800155a:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800155c:	684e      	ldr	r6, [r1, #4]
 800155e:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001562:	bf0c      	ite	eq
 8001564:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 8001566:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR = temp;
 800156a:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 800156c:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	680b      	ldr	r3, [r1, #0]
 8001570:	f10c 0c02 	add.w	ip, ip, #2
 8001574:	fa33 f702 	lsrs.w	r7, r3, r2
 8001578:	d075      	beq.n	8001666 <HAL_GPIO_Init+0x19e>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800157a:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 800157e:	ea17 0903 	ands.w	r9, r7, r3
 8001582:	d0f3      	beq.n	800156c <HAL_GPIO_Init+0xa4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001584:	684b      	ldr	r3, [r1, #4]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	3b01      	subs	r3, #1
 800158c:	2b01      	cmp	r3, #1
 800158e:	d9ac      	bls.n	80014ea <HAL_GPIO_Init+0x22>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001590:	684b      	ldr	r3, [r1, #4]
 8001592:	f003 0303 	and.w	r3, r3, #3
 8001596:	2b03      	cmp	r3, #3
 8001598:	d020      	beq.n	80015dc <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 800159a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800159c:	fa0e f30c 	lsl.w	r3, lr, ip
 80015a0:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80015a4:	688b      	ldr	r3, [r1, #8]
 80015a6:	fa03 f30c 	lsl.w	r3, r3, ip
 80015aa:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 80015ac:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ae:	684b      	ldr	r3, [r1, #4]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d111      	bne.n	80015dc <HAL_GPIO_Init+0x114>
        temp = GPIOx->AFR[position >> 3u];
 80015b8:	08d7      	lsrs	r7, r2, #3
 80015ba:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80015be:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015c0:	f002 0b07 	and.w	fp, r2, #7
 80015c4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80015c8:	fa08 fa0b 	lsl.w	sl, r8, fp
 80015cc:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015d0:	690b      	ldr	r3, [r1, #16]
 80015d2:	fa03 f30b 	lsl.w	r3, r3, fp
 80015d6:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 80015da:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 80015dc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015de:	fa0e f30c 	lsl.w	r3, lr, ip
 80015e2:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015e6:	684b      	ldr	r3, [r1, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	fa03 f30c 	lsl.w	r3, r3, ip
 80015f0:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80015f2:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f4:	684b      	ldr	r3, [r1, #4]
 80015f6:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80015fa:	d0b7      	beq.n	800156c <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fc:	4e1d      	ldr	r6, [pc, #116]	; (8001674 <HAL_GPIO_Init+0x1ac>)
 80015fe:	69b3      	ldr	r3, [r6, #24]
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	61b3      	str	r3, [r6, #24]
 8001606:	69b3      	ldr	r3, [r6, #24]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001610:	f022 0303 	bic.w	r3, r2, #3
 8001614:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001618:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800161c:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800161e:	f002 0b03 	and.w	fp, r2, #3
 8001622:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001626:	fa08 fa0b 	lsl.w	sl, r8, fp
 800162a:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800162e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001632:	f43f af6f 	beq.w	8001514 <HAL_GPIO_Init+0x4c>
 8001636:	4e10      	ldr	r6, [pc, #64]	; (8001678 <HAL_GPIO_Init+0x1b0>)
 8001638:	42b0      	cmp	r0, r6
 800163a:	d00e      	beq.n	800165a <HAL_GPIO_Init+0x192>
 800163c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001640:	42b0      	cmp	r0, r6
 8001642:	d00c      	beq.n	800165e <HAL_GPIO_Init+0x196>
 8001644:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001648:	42b0      	cmp	r0, r6
 800164a:	d00a      	beq.n	8001662 <HAL_GPIO_Init+0x19a>
 800164c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001650:	42b0      	cmp	r0, r6
 8001652:	bf0c      	ite	eq
 8001654:	2704      	moveq	r7, #4
 8001656:	2705      	movne	r7, #5
 8001658:	e75d      	b.n	8001516 <HAL_GPIO_Init+0x4e>
 800165a:	462f      	mov	r7, r5
 800165c:	e75b      	b.n	8001516 <HAL_GPIO_Init+0x4e>
 800165e:	2702      	movs	r7, #2
 8001660:	e759      	b.n	8001516 <HAL_GPIO_Init+0x4e>
 8001662:	4677      	mov	r7, lr
 8001664:	e757      	b.n	8001516 <HAL_GPIO_Init+0x4e>
  }
}
 8001666:	b003      	add	sp, #12
 8001668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40010400 	.word	0x40010400
 8001674:	40021000 	.word	0x40021000
 8001678:	48000400 	.word	0x48000400

0800167c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800167c:	b10a      	cbz	r2, 8001682 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800167e:	6181      	str	r1, [r0, #24]
 8001680:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001682:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001684:	4770      	bx	lr

08001686 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001686:	4770      	bx	lr

08001688 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001688:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	4203      	tst	r3, r0
 8001690:	d100      	bne.n	8001694 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8001692:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001696:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001698:	f7ff fff5 	bl	8001686 <HAL_GPIO_EXTI_Callback>
}
 800169c:	e7f9      	b.n	8001692 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800169e:	bf00      	nop
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_PCD_Init>:
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016a4:	2800      	cmp	r0, #0
 80016a6:	d05f      	beq.n	8001768 <HAL_PCD_Init+0xc4>
{
 80016a8:	b530      	push	{r4, r5, lr}
 80016aa:	b087      	sub	sp, #28
 80016ac:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016ae:	f890 32a9 	ldrb.w	r3, [r0, #681]	; 0x2a9
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d053      	beq.n	800175e <HAL_PCD_Init+0xba>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016b6:	2303      	movs	r3, #3
 80016b8:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016bc:	6820      	ldr	r0, [r4, #0]
 80016be:	f002 f9cd 	bl	8003a5c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c2:	6860      	ldr	r0, [r4, #4]
 80016c4:	b390      	cbz	r0, 800172c <HAL_PCD_Init+0x88>
 80016c6:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016c8:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016cc:	4619      	mov	r1, r3
    hpcd->IN_ep[i].is_in = 1U;
 80016ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80016d2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80016d6:	f882 c029 	strb.w	ip, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 80016da:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80016de:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 80016e2:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016e4:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 80016e6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80016ea:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80016ee:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4283      	cmp	r3, r0
 80016f6:	d3ea      	bcc.n	80016ce <HAL_PCD_Init+0x2a>
 80016f8:	2300      	movs	r3, #0
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016fa:	4619      	mov	r1, r3
 80016fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001700:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001704:	f882 1169 	strb.w	r1, [r2, #361]	; 0x169
    hpcd->OUT_ep[i].num = i;
 8001708:	f882 3168 	strb.w	r3, [r2, #360]	; 0x168
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800170c:	f882 116b 	strb.w	r1, [r2, #363]	; 0x16b
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001710:	f8c2 1178 	str.w	r1, [r2, #376]	; 0x178
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001714:	f8c2 117c 	str.w	r1, [r2, #380]	; 0x17c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001718:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800171c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8001720:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001724:	3301      	adds	r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	4283      	cmp	r3, r0
 800172a:	d3e7      	bcc.n	80016fc <HAL_PCD_Init+0x58>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800172c:	46a4      	mov	ip, r4
 800172e:	f85c 5b10 	ldr.w	r5, [ip], #16
 8001732:	46ee      	mov	lr, sp
 8001734:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001738:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800173c:	f8dc 3000 	ldr.w	r3, [ip]
 8001740:	f8ce 3000 	str.w	r3, [lr]
 8001744:	1d23      	adds	r3, r4, #4
 8001746:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001748:	4628      	mov	r0, r5
 800174a:	f002 f991 	bl	8003a70 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800174e:	2000      	movs	r0, #0
 8001750:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001754:	2301      	movs	r3, #1
 8001756:	f884 32a9 	strb.w	r3, [r4, #681]	; 0x2a9
  return HAL_OK;
}
 800175a:	b007      	add	sp, #28
 800175c:	bd30      	pop	{r4, r5, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800175e:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
    HAL_PCD_MspInit(hpcd);
 8001762:	f003 fff5 	bl	8005750 <HAL_PCD_MspInit>
 8001766:	e7a6      	b.n	80016b6 <HAL_PCD_Init+0x12>
    return HAL_ERROR;
 8001768:	2001      	movs	r0, #1
}
 800176a:	4770      	bx	lr

0800176c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800176c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 800176e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 8001772:	2b01      	cmp	r3, #1
 8001774:	d011      	beq.n	800179a <HAL_PCD_Start+0x2e>
 8001776:	4604      	mov	r4, r0
 8001778:	2501      	movs	r5, #1
 800177a:	f880 52a8 	strb.w	r5, [r0, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800177e:	6800      	ldr	r0, [r0, #0]
 8001780:	f002 f963 	bl	8003a4a <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001784:	4629      	mov	r1, r5
 8001786:	4620      	mov	r0, r4
 8001788:	f004 f91b 	bl	80059c2 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 800178c:	6820      	ldr	r0, [r4, #0]
 800178e:	f002 fcad 	bl	80040ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001792:	2000      	movs	r0, #0
 8001794:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 8001798:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800179a:	2002      	movs	r0, #2
 800179c:	e7fc      	b.n	8001798 <HAL_PCD_Start+0x2c>

0800179e <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800179e:	f890 32a8 	ldrb.w	r3, [r0, #680]	; 0x2a8
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d00d      	beq.n	80017c2 <HAL_PCD_SetAddress+0x24>
{
 80017a6:	b510      	push	{r4, lr}
 80017a8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80017aa:	2301      	movs	r3, #1
 80017ac:	f880 32a8 	strb.w	r3, [r0, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017b0:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017b4:	6800      	ldr	r0, [r0, #0]
 80017b6:	f002 fc93 	bl	80040e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8

  return HAL_OK;
}
 80017c0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80017c2:	2002      	movs	r0, #2
}
 80017c4:	4770      	bx	lr

080017c6 <HAL_PCD_IRQHandler>:
{
 80017c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017ca:	4605      	mov	r5, r0
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80017cc:	6800      	ldr	r0, [r0, #0]
 80017ce:	f002 fc8f 	bl	80040f0 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80017d2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80017d6:	d126      	bne.n	8001826 <HAL_PCD_IRQHandler+0x60>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80017d8:	f410 6f80 	tst.w	r0, #1024	; 0x400
 80017dc:	f040 84cb 	bne.w	8002176 <HAL_PCD_IRQHandler+0x9b0>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80017e0:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80017e4:	f040 84d8 	bne.w	8002198 <HAL_PCD_IRQHandler+0x9d2>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80017e8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80017ec:	f040 84df 	bne.w	80021ae <HAL_PCD_IRQHandler+0x9e8>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80017f0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
 80017f4:	f040 84e5 	bne.w	80021c2 <HAL_PCD_IRQHandler+0x9fc>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80017f8:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80017fc:	f040 8500 	bne.w	8002200 <HAL_PCD_IRQHandler+0xa3a>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001800:	f410 7f00 	tst.w	r0, #512	; 0x200
 8001804:	f040 8519 	bne.w	800223a <HAL_PCD_IRQHandler+0xa74>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001808:	f410 7f80 	tst.w	r0, #256	; 0x100
 800180c:	f000 84cd 	beq.w	80021aa <HAL_PCD_IRQHandler+0x9e4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001810:	682a      	ldr	r2, [r5, #0]
 8001812:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001816:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	0c1b      	lsrs	r3, r3, #16
 800181e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 8001822:	f000 bcc2 	b.w	80021aa <HAL_PCD_IRQHandler+0x9e4>
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001826:	6828      	ldr	r0, [r5, #0]
 8001828:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800182c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001830:	f000 84bb 	beq.w	80021aa <HAL_PCD_IRQHandler+0x9e4>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001834:	f248 0780 	movw	r7, #32896	; 0x8080
 8001838:	2600      	movs	r6, #0
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800183a:	f24c 0880 	movw	r8, #49280	; 0xc080
 800183e:	e058      	b.n	80018f2 <HAL_PCD_IRQHandler+0x12c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001840:	8803      	ldrh	r3, [r0, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800184c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001854:	b29b      	uxth	r3, r3
 8001856:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001858:	682b      	ldr	r3, [r5, #0]
 800185a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800185e:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8001862:	00c9      	lsls	r1, r1, #3
 8001864:	fa11 f282 	uxtah	r2, r1, r2
 8001868:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800186c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8001870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001874:	646b      	str	r3, [r5, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001876:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001878:	441a      	add	r2, r3
 800187a:	63ea      	str	r2, [r5, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800187c:	4631      	mov	r1, r6
 800187e:	4628      	mov	r0, r5
 8001880:	f003 ffbe 	bl	8005800 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001884:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001888:	b363      	cbz	r3, 80018e4 <HAL_PCD_IRQHandler+0x11e>
 800188a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800188c:	bb53      	cbnz	r3, 80018e4 <HAL_PCD_IRQHandler+0x11e>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800188e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8001892:	682a      	ldr	r2, [r5, #0]
 8001894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001898:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800189c:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 80018a0:	e020      	b.n	80018e4 <HAL_PCD_IRQHandler+0x11e>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018a2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80018a6:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 80018aa:	00d2      	lsls	r2, r2, #3
 80018ac:	fa12 f383 	uxtah	r3, r2, r3
 80018b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80018b4:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 80018b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018bc:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018c0:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 80018c4:	f505 712c 	add.w	r1, r5, #688	; 0x2b0
 80018c8:	f002 ff88 	bl	80047dc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018cc:	682a      	ldr	r2, [r5, #0]
 80018ce:	8813      	ldrh	r3, [r2, #0]
 80018d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018d4:	051b      	lsls	r3, r3, #20
 80018d6:	0d1b      	lsrs	r3, r3, #20
 80018d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018dc:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80018de:	4628      	mov	r0, r5
 80018e0:	f003 ff7a 	bl	80057d8 <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018e4:	6828      	ldr	r0, [r5, #0]
 80018e6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80018ea:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80018ee:	f000 845c 	beq.w	80021aa <HAL_PCD_IRQHandler+0x9e4>
    wIstr = hpcd->Instance->ISTR;
 80018f2:	f8b0 4044 	ldrh.w	r4, [r0, #68]	; 0x44
 80018f6:	b2a3      	uxth	r3, r4
    if (epindex == 0U)
 80018f8:	f014 040f 	ands.w	r4, r4, #15
 80018fc:	d17e      	bne.n	80019fc <HAL_PCD_IRQHandler+0x236>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80018fe:	f013 0f10 	tst.w	r3, #16
 8001902:	d09d      	beq.n	8001840 <HAL_PCD_IRQHandler+0x7a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001904:	8803      	ldrh	r3, [r0, #0]
 8001906:	b29a      	uxth	r2, r3
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001908:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800190c:	d1c9      	bne.n	80018a2 <HAL_PCD_IRQHandler+0xdc>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800190e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001912:	d0e7      	beq.n	80018e4 <HAL_PCD_IRQHandler+0x11e>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001914:	8803      	ldrh	r3, [r0, #0]
 8001916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800191a:	051b      	lsls	r3, r3, #20
 800191c:	0d1b      	lsrs	r3, r3, #20
 800191e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001922:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001924:	6828      	ldr	r0, [r5, #0]
 8001926:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800192a:	f895 2168 	ldrb.w	r2, [r5, #360]	; 0x168
 800192e:	00d2      	lsls	r2, r2, #3
 8001930:	fa12 f383 	uxtah	r3, r2, r3
 8001934:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001938:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 800193c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001940:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001944:	b18b      	cbz	r3, 800196a <HAL_PCD_IRQHandler+0x1a4>
 8001946:	f8d5 117c 	ldr.w	r1, [r5, #380]	; 0x17c
 800194a:	b171      	cbz	r1, 800196a <HAL_PCD_IRQHandler+0x1a4>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800194c:	f8b5 216e 	ldrh.w	r2, [r5, #366]	; 0x16e
 8001950:	f002 ff44 	bl	80047dc <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8001954:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 8001958:	f8d5 2184 	ldr.w	r2, [r5, #388]	; 0x184
 800195c:	4413      	add	r3, r2
 800195e:	f8c5 317c 	str.w	r3, [r5, #380]	; 0x17c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001962:	4631      	mov	r1, r6
 8001964:	4628      	mov	r0, r5
 8001966:	f003 ff3f 	bl	80057e8 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800196a:	682a      	ldr	r2, [r5, #0]
 800196c:	8813      	ldrh	r3, [r2, #0]
 800196e:	b299      	uxth	r1, r3
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001970:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001974:	d1b6      	bne.n	80018e4 <HAL_PCD_IRQHandler+0x11e>
 8001976:	f401 5140 	and.w	r1, r1, #12288	; 0x3000
 800197a:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800197e:	d0b1      	beq.n	80018e4 <HAL_PCD_IRQHandler+0x11e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001980:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001984:	b29b      	uxth	r3, r3
 8001986:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800198a:	5ad1      	ldrh	r1, [r2, r3]
 800198c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001990:	52d1      	strh	r1, [r2, r3]
 8001992:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 8001996:	293e      	cmp	r1, #62	; 0x3e
 8001998:	d91b      	bls.n	80019d2 <HAL_PCD_IRQHandler+0x20c>
 800199a:	0948      	lsrs	r0, r1, #5
 800199c:	f011 0f1f 	tst.w	r1, #31
 80019a0:	bf08      	it	eq
 80019a2:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80019a6:	5ad1      	ldrh	r1, [r2, r3]
 80019a8:	b289      	uxth	r1, r1
 80019aa:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80019ae:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80019b2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80019b6:	b289      	uxth	r1, r1
 80019b8:	52d1      	strh	r1, [r2, r3]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019ba:	682a      	ldr	r2, [r5, #0]
 80019bc:	8813      	ldrh	r3, [r2, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80019cc:	433b      	orrs	r3, r7
 80019ce:	8013      	strh	r3, [r2, #0]
 80019d0:	e788      	b.n	80018e4 <HAL_PCD_IRQHandler+0x11e>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80019d2:	b939      	cbnz	r1, 80019e4 <HAL_PCD_IRQHandler+0x21e>
 80019d4:	5ad1      	ldrh	r1, [r2, r3]
 80019d6:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80019da:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80019de:	b289      	uxth	r1, r1
 80019e0:	52d1      	strh	r1, [r2, r3]
 80019e2:	e7ea      	b.n	80019ba <HAL_PCD_IRQHandler+0x1f4>
 80019e4:	0848      	lsrs	r0, r1, #1
 80019e6:	f011 0f01 	tst.w	r1, #1
 80019ea:	bf18      	it	ne
 80019ec:	3001      	addne	r0, #1
 80019ee:	5ad1      	ldrh	r1, [r2, r3]
 80019f0:	b289      	uxth	r1, r1
 80019f2:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80019f6:	b289      	uxth	r1, r1
 80019f8:	52d1      	strh	r1, [r2, r3]
 80019fa:	e7de      	b.n	80019ba <HAL_PCD_IRQHandler+0x1f4>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80019fc:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001a00:	fa1f f983 	uxth.w	r9, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a04:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001a08:	d152      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x2ea>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001a0a:	f019 0f80 	tst.w	r9, #128	; 0x80
 8001a0e:	f43f af69 	beq.w	80018e4 <HAL_PCD_IRQHandler+0x11e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001a12:	682a      	ldr	r2, [r5, #0]
 8001a14:	f832 3024 	ldrh.w	r3, [r2, r4, lsl #2]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001a26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	f822 3024 	strh.w	r3, [r2, r4, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8001a30:	eb04 0a84 	add.w	sl, r4, r4, lsl #2
 8001a34:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8001a38:	f89a 302b 	ldrb.w	r3, [sl, #43]	; 0x2b
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	f000 818e 	beq.w	8001d5e <HAL_PCD_IRQHandler+0x598>
          if ((wEPVal & USB_EP_KIND) == 0U)
 8001a42:	f419 7f80 	tst.w	r9, #256	; 0x100
 8001a46:	f040 81e4 	bne.w	8001e12 <HAL_PCD_IRQHandler+0x64c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a4a:	6828      	ldr	r0, [r5, #0]
 8001a4c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
            if (ep->xfer_len > TxPctSize)
 8001a56:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001a5a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001a5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a60:	3302      	adds	r3, #2
 8001a62:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001a66:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a6a:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	; 0x400
            if (ep->xfer_len > TxPctSize)
 8001a6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a72:	429a      	cmp	r2, r3
 8001a74:	f240 83ee 	bls.w	8002254 <HAL_PCD_IRQHandler+0xa8e>
              ep->xfer_len -= TxPctSize;
 8001a78:	1ad2      	subs	r2, r2, r3
 8001a7a:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8001a7e:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8001a82:	f8cc 2040 	str.w	r2, [ip, #64]	; 0x40
            if (ep->xfer_len == 0U)
 8001a86:	2a00      	cmp	r2, #0
 8001a88:	f000 83e9 	beq.w	800225e <HAL_PCD_IRQHandler+0xa98>
              ep->xfer_buff += TxPctSize;
 8001a8c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001a90:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001a94:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a96:	4419      	add	r1, r3
 8001a98:	63d1      	str	r1, [r2, #60]	; 0x3c
              ep->xfer_count += TxPctSize;
 8001a9a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001a9c:	440b      	add	r3, r1
 8001a9e:	6453      	str	r3, [r2, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8001aa0:	3401      	adds	r4, #1
 8001aa2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001aa6:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8001aaa:	f002 fb3c 	bl	8004126 <USB_EPStartXfer>
 8001aae:	e719      	b.n	80018e4 <HAL_PCD_IRQHandler+0x11e>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ab0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ab8:	051b      	lsls	r3, r3, #20
 8001aba:	0d1b      	lsrs	r3, r3, #20
 8001abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
        if (ep->doublebuffer == 0U)
 8001ac4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001ac8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001acc:	f893 3174 	ldrb.w	r3, [r3, #372]	; 0x174
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d145      	bne.n	8001b60 <HAL_PCD_IRQHandler+0x39a>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ad4:	6828      	ldr	r0, [r5, #0]
 8001ad6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001ae0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001ae4:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001ae8:	3306      	adds	r3, #6
 8001aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001aee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001af2:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001af6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
          if (count != 0U)
 8001afa:	f1ba 0f00 	cmp.w	sl, #0
 8001afe:	d123      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x382>
        ep->xfer_count += count;
 8001b00:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001b04:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001b08:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
 8001b0c:	4452      	add	r2, sl
 8001b0e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        ep->xfer_buff += count;
 8001b12:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 8001b16:	4452      	add	r2, sl
 8001b18:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b1c:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8001b20:	b143      	cbz	r3, 8001b34 <HAL_PCD_IRQHandler+0x36e>
 8001b22:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001b26:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001b2a:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8001b2e:	459a      	cmp	sl, r3
 8001b30:	f080 810b 	bcs.w	8001d4a <HAL_PCD_IRQHandler+0x584>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001b34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001b38:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001b3c:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001b40:	4628      	mov	r0, r5
 8001b42:	f003 fe51 	bl	80057e8 <HAL_PCD_DataOutStageCallback>
 8001b46:	e760      	b.n	8001a0a <HAL_PCD_IRQHandler+0x244>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b48:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001b4c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	f8b1 216e 	ldrh.w	r2, [r1, #366]	; 0x16e
 8001b56:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001b5a:	f002 fe3f 	bl	80047dc <USB_ReadPMA>
 8001b5e:	e7cf      	b.n	8001b00 <HAL_PCD_IRQHandler+0x33a>
          if (ep->type == EP_TYPE_BULK)
 8001b60:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001b64:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001b68:	f893 316b 	ldrb.w	r3, [r3, #363]	; 0x16b
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d037      	beq.n	8001be0 <HAL_PCD_IRQHandler+0x41a>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001b70:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001b74:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001b78:	f892 0168 	ldrb.w	r0, [r2, #360]	; 0x168
 8001b7c:	6829      	ldr	r1, [r5, #0]
 8001b7e:	f831 3020 	ldrh.w	r3, [r1, r0, lsl #2]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b94:	f821 3020 	strh.w	r3, [r1, r0, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b98:	6828      	ldr	r0, [r5, #0]
 8001b9a:	f892 2168 	ldrb.w	r2, [r2, #360]	; 0x168
 8001b9e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ba2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001ba6:	f000 80b4 	beq.w	8001d12 <HAL_PCD_IRQHandler+0x54c>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001baa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	3302      	adds	r3, #2
 8001bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001bb6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001bba:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001bbe:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001bc2:	f1ba 0f00 	cmp.w	sl, #0
 8001bc6:	d09b      	beq.n	8001b00 <HAL_PCD_IRQHandler+0x33a>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bc8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001bcc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001bd0:	4653      	mov	r3, sl
 8001bd2:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001bd6:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001bda:	f002 fdff 	bl	80047dc <USB_ReadPMA>
 8001bde:	e78f      	b.n	8001b00 <HAL_PCD_IRQHandler+0x33a>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001be0:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001be4:	d04a      	beq.n	8001c7c <HAL_PCD_IRQHandler+0x4b6>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001be6:	682a      	ldr	r2, [r5, #0]
 8001be8:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8001bf2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001bf6:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001c00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001c04:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001c08:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001c0c:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8001c10:	4553      	cmp	r3, sl
 8001c12:	f0c0 83c5 	bcc.w	80023a0 <HAL_PCD_IRQHandler+0xbda>
      ep->xfer_len -= count;
 8001c16:	eba3 030a 	sub.w	r3, r3, sl
 8001c1a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8001c1e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001c22:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	f000 83c0 	beq.w	80023ac <HAL_PCD_IRQHandler+0xbe6>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001c2c:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001c30:	d013      	beq.n	8001c5a <HAL_PCD_IRQHandler+0x494>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001c32:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001c36:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001c3a:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001c3e:	682a      	ldr	r2, [r5, #0]
 8001c40:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c56:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8001c5a:	f1ba 0f00 	cmp.w	sl, #0
 8001c5e:	f43f af4f 	beq.w	8001b00 <HAL_PCD_IRQHandler+0x33a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c62:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001c66:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001c6a:	4653      	mov	r3, sl
 8001c6c:	f8b1 2170 	ldrh.w	r2, [r1, #368]	; 0x170
 8001c70:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001c74:	6828      	ldr	r0, [r5, #0]
 8001c76:	f002 fdb1 	bl	80047dc <USB_ReadPMA>
 8001c7a:	e741      	b.n	8001b00 <HAL_PCD_IRQHandler+0x33a>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c7c:	682a      	ldr	r2, [r5, #0]
 8001c7e:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8001c88:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001c8c:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
 8001c90:	3306      	adds	r3, #6
 8001c92:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001c96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001c9a:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001c9e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
    if (ep->xfer_len >= count)
 8001ca2:	f8d0 3180 	ldr.w	r3, [r0, #384]	; 0x180
 8001ca6:	4553      	cmp	r3, sl
 8001ca8:	f0c0 838d 	bcc.w	80023c6 <HAL_PCD_IRQHandler+0xc00>
      ep->xfer_len -= count;
 8001cac:	eba3 030a 	sub.w	r3, r3, sl
 8001cb0:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8001cb4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001cb8:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
    if (ep->xfer_len == 0U)
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8388 	beq.w	80023d2 <HAL_PCD_IRQHandler+0xc0c>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001cc2:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001cc6:	d113      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x52a>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001cc8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001ccc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001cd0:	f893 1168 	ldrb.w	r1, [r3, #360]	; 0x168
 8001cd4:	682a      	ldr	r2, [r5, #0]
 8001cd6:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cec:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    if (count != 0U)
 8001cf0:	f1ba 0f00 	cmp.w	sl, #0
 8001cf4:	f43f af04 	beq.w	8001b00 <HAL_PCD_IRQHandler+0x33a>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cf8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001cfc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001d00:	4653      	mov	r3, sl
 8001d02:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001d06:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001d0a:	6828      	ldr	r0, [r5, #0]
 8001d0c:	f002 fd66 	bl	80047dc <USB_ReadPMA>
 8001d10:	e6f6      	b.n	8001b00 <HAL_PCD_IRQHandler+0x33a>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d12:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3306      	adds	r3, #6
 8001d1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001d1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001d22:	f8b3 a400 	ldrh.w	sl, [r3, #1024]	; 0x400
 8001d26:	f3ca 0a09 	ubfx	sl, sl, #0, #10
              if (count != 0U)
 8001d2a:	f1ba 0f00 	cmp.w	sl, #0
 8001d2e:	f43f aee7 	beq.w	8001b00 <HAL_PCD_IRQHandler+0x33a>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d32:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001d36:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001d3a:	4653      	mov	r3, sl
 8001d3c:	f8b1 2172 	ldrh.w	r2, [r1, #370]	; 0x172
 8001d40:	f8d1 117c 	ldr.w	r1, [r1, #380]	; 0x17c
 8001d44:	f002 fd4a 	bl	80047dc <USB_ReadPMA>
 8001d48:	e6da      	b.n	8001b00 <HAL_PCD_IRQHandler+0x33a>
        ep = &hpcd->OUT_ep[epindex];
 8001d4a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001d4e:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d52:	f501 71b4 	add.w	r1, r1, #360	; 0x168
 8001d56:	6828      	ldr	r0, [r5, #0]
 8001d58:	f002 f9e5 	bl	8004126 <USB_EPStartXfer>
 8001d5c:	e655      	b.n	8001a0a <HAL_PCD_IRQHandler+0x244>
          ep->xfer_len = 0U;
 8001d5e:	f8ca 6040 	str.w	r6, [sl, #64]	; 0x40
          if (ep->doublebuffer != 0U)
 8001d62:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 8001d66:	b1d3      	cbz	r3, 8001d9e <HAL_PCD_IRQHandler+0x5d8>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d68:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001d6c:	d02b      	beq.n	8001dc6 <HAL_PCD_IRQHandler+0x600>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d6e:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 8001d72:	b9d3      	cbnz	r3, 8001daa <HAL_PCD_IRQHandler+0x5e4>
 8001d74:	682b      	ldr	r3, [r5, #0]
 8001d76:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001d7a:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001d7e:	0109      	lsls	r1, r1, #4
 8001d80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001d84:	fa13 f282 	uxtah	r2, r3, r2
 8001d88:	5a8b      	ldrh	r3, [r1, r2]
 8001d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d8e:	528b      	strh	r3, [r1, r2]
 8001d90:	5a8b      	ldrh	r3, [r1, r2]
 8001d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	528b      	strh	r3, [r1, r2]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d9e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001da2:	4628      	mov	r0, r5
 8001da4:	f003 fd2c 	bl	8005800 <HAL_PCD_DataInStageCallback>
 8001da8:	e59c      	b.n	80018e4 <HAL_PCD_IRQHandler+0x11e>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d1f7      	bne.n	8001d9e <HAL_PCD_IRQHandler+0x5d8>
 8001dae:	682b      	ldr	r3, [r5, #0]
 8001db0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001db4:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001db8:	0109      	lsls	r1, r1, #4
 8001dba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001dbe:	fa13 f382 	uxtah	r3, r3, r2
 8001dc2:	52ce      	strh	r6, [r1, r3]
 8001dc4:	e7eb      	b.n	8001d9e <HAL_PCD_IRQHandler+0x5d8>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dc6:	682b      	ldr	r3, [r5, #0]
 8001dc8:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001dcc:	b9a2      	cbnz	r2, 8001df8 <HAL_PCD_IRQHandler+0x632>
 8001dce:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001dd2:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001dd6:	0109      	lsls	r1, r1, #4
 8001dd8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ddc:	fa13 f282 	uxtah	r2, r3, r2
 8001de0:	5a8b      	ldrh	r3, [r1, r2]
 8001de2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de6:	528b      	strh	r3, [r1, r2]
 8001de8:	5a8b      	ldrh	r3, [r1, r2]
 8001dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	528b      	strh	r3, [r1, r2]
 8001df6:	e7d2      	b.n	8001d9e <HAL_PCD_IRQHandler+0x5d8>
 8001df8:	2a01      	cmp	r2, #1
 8001dfa:	d1d0      	bne.n	8001d9e <HAL_PCD_IRQHandler+0x5d8>
 8001dfc:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001e00:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001e04:	0109      	lsls	r1, r1, #4
 8001e06:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e0a:	fa13 f382 	uxtah	r3, r3, r2
 8001e0e:	52ce      	strh	r6, [r1, r3]
 8001e10:	e7c5      	b.n	8001d9e <HAL_PCD_IRQHandler+0x5d8>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001e12:	f019 0f40 	tst.w	r9, #64	; 0x40
 8001e16:	f000 80df 	beq.w	8001fd8 <HAL_PCD_IRQHandler+0x812>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e1a:	682a      	ldr	r2, [r5, #0]
 8001e1c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len > TxPctSize)
 8001e26:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8001e2a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001e2e:	6c00      	ldr	r0, [r0, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001e30:	3302      	adds	r3, #2
 8001e32:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001e36:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001e3a:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len > TxPctSize)
 8001e3e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8001e42:	4560      	cmp	r0, ip
 8001e44:	f240 8210 	bls.w	8002268 <HAL_PCD_IRQHandler+0xaa2>
      ep->xfer_len -= TxPctSize;
 8001e48:	eba0 000c 	sub.w	r0, r0, ip
 8001e4c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001e50:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001e54:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8001e56:	2800      	cmp	r0, #0
 8001e58:	f000 820b 	beq.w	8002272 <HAL_PCD_IRQHandler+0xaac>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001e5c:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8001e60:	d00a      	beq.n	8001e78 <HAL_PCD_IRQHandler+0x6b2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8001e62:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e70:	ea48 0303 	orr.w	r3, r8, r3
 8001e74:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8001e78:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001e7c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001e80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d029      	beq.n	8001edc <HAL_PCD_IRQHandler+0x716>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8001e88:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001e8c:	682a      	ldr	r2, [r5, #0]
 8001e8e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e9c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001ea0:	433b      	orrs	r3, r7
 8001ea2:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8001ea6:	e51d      	b.n	80018e4 <HAL_PCD_IRQHandler+0x11e>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	f040 8213 	bne.w	80022d4 <HAL_PCD_IRQHandler+0xb0e>
 8001eae:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001eb2:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001eb6:	fa12 f383 	uxtah	r3, r2, r3
 8001eba:	0109      	lsls	r1, r1, #4
 8001ebc:	525e      	strh	r6, [r3, r1]
 8001ebe:	e1ef      	b.n	80022a0 <HAL_PCD_IRQHandler+0xada>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001ec0:	2a01      	cmp	r2, #1
 8001ec2:	f040 8207 	bne.w	80022d4 <HAL_PCD_IRQHandler+0xb0e>
 8001ec6:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8001eca:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8001ece:	0109      	lsls	r1, r1, #4
 8001ed0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001ed4:	fa13 f382 	uxtah	r3, r3, r2
 8001ed8:	52ce      	strh	r6, [r1, r3]
 8001eda:	e1fb      	b.n	80022d4 <HAL_PCD_IRQHandler+0xb0e>
        ep->xfer_buff += TxPctSize;
 8001edc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001ee0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ee6:	4462      	add	r2, ip
 8001ee8:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8001eea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eec:	4462      	add	r2, ip
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8001ef0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d32b      	bcc.n	8001f50 <HAL_PCD_IRQHandler+0x78a>
          ep->xfer_len_db -= len;
 8001ef8:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8001efc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 8001f00:	1ad2      	subs	r2, r2, r3
 8001f02:	648a      	str	r2, [r1, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f04:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8001f08:	2a00      	cmp	r2, #0
 8001f0a:	d14a      	bne.n	8001fa2 <HAL_PCD_IRQHandler+0x7dc>
 8001f0c:	682a      	ldr	r2, [r5, #0]
 8001f0e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001f12:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001f16:	fa12 f181 	uxtah	r1, r2, r1
 8001f1a:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	5a88      	ldrh	r0, [r1, r2]
 8001f22:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8001f26:	5288      	strh	r0, [r1, r2]
 8001f28:	2b3e      	cmp	r3, #62	; 0x3e
 8001f2a:	d923      	bls.n	8001f74 <HAL_PCD_IRQHandler+0x7ae>
 8001f2c:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 8001f30:	f013 0f1f 	tst.w	r3, #31
 8001f34:	bf08      	it	eq
 8001f36:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 8001f3a:	5a88      	ldrh	r0, [r1, r2]
 8001f3c:	b280      	uxth	r0, r0
 8001f3e:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8001f42:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8001f46:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8001f4a:	b280      	uxth	r0, r0
 8001f4c:	5288      	strh	r0, [r1, r2]
 8001f4e:	e02a      	b.n	8001fa6 <HAL_PCD_IRQHandler+0x7e0>
        else if (ep->xfer_len_db == 0U)
 8001f50:	b93a      	cbnz	r2, 8001f62 <HAL_PCD_IRQHandler+0x79c>
          ep->xfer_fill_db = 0U;
 8001f52:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001f56:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001f5a:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxPctSize;
 8001f5e:	4663      	mov	r3, ip
 8001f60:	e7d0      	b.n	8001f04 <HAL_PCD_IRQHandler+0x73e>
          ep->xfer_fill_db = 0U;
 8001f62:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001f66:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001f6a:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          ep->xfer_len_db = 0U;
 8001f6e:	649e      	str	r6, [r3, #72]	; 0x48
          len = ep->xfer_len_db;
 8001f70:	4613      	mov	r3, r2
 8001f72:	e7c7      	b.n	8001f04 <HAL_PCD_IRQHandler+0x73e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001f74:	b93b      	cbnz	r3, 8001f86 <HAL_PCD_IRQHandler+0x7c0>
 8001f76:	5a88      	ldrh	r0, [r1, r2]
 8001f78:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 8001f7c:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8001f80:	b280      	uxth	r0, r0
 8001f82:	5288      	strh	r0, [r1, r2]
 8001f84:	e00f      	b.n	8001fa6 <HAL_PCD_IRQHandler+0x7e0>
 8001f86:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8001f8a:	f013 0f01 	tst.w	r3, #1
 8001f8e:	bf18      	it	ne
 8001f90:	f10c 0c01 	addne.w	ip, ip, #1
 8001f94:	5a88      	ldrh	r0, [r1, r2]
 8001f96:	b280      	uxth	r0, r0
 8001f98:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8001f9c:	b280      	uxth	r0, r0
 8001f9e:	5288      	strh	r0, [r1, r2]
 8001fa0:	e001      	b.n	8001fa6 <HAL_PCD_IRQHandler+0x7e0>
 8001fa2:	2a01      	cmp	r2, #1
 8001fa4:	d00b      	beq.n	8001fbe <HAL_PCD_IRQHandler+0x7f8>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001fa6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8001faa:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001fae:	4611      	mov	r1, r2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8001fb4:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001fb6:	6828      	ldr	r0, [r5, #0]
 8001fb8:	f002 f89e 	bl	80040f8 <USB_WritePMA>
 8001fbc:	e764      	b.n	8001e88 <HAL_PCD_IRQHandler+0x6c2>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001fbe:	682a      	ldr	r2, [r5, #0]
 8001fc0:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001fc4:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8001fc8:	fa12 f181 	uxtah	r1, r2, r1
 8001fcc:	f89a 2028 	ldrb.w	r2, [sl, #40]	; 0x28
 8001fd0:	0112      	lsls	r2, r2, #4
 8001fd2:	b298      	uxth	r0, r3
 8001fd4:	5288      	strh	r0, [r1, r2]
 8001fd6:	e7e6      	b.n	8001fa6 <HAL_PCD_IRQHandler+0x7e0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fd8:	682a      	ldr	r2, [r5, #0]
 8001fda:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
    if (ep->xfer_len >= TxPctSize)
 8001fe4:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8001fe8:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 8001fec:	6c00      	ldr	r0, [r0, #64]	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001fee:	3306      	adds	r3, #6
 8001ff0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001ff4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001ff8:	f8b3 c400 	ldrh.w	ip, [r3, #1024]	; 0x400
    if (ep->xfer_len >= TxPctSize)
 8001ffc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002000:	4560      	cmp	r0, ip
 8002002:	f0c0 817f 	bcc.w	8002304 <HAL_PCD_IRQHandler+0xb3e>
      ep->xfer_len -= TxPctSize;
 8002006:	eba0 000c 	sub.w	r0, r0, ip
 800200a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800200e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002012:	6418      	str	r0, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002014:	2800      	cmp	r0, #0
 8002016:	f000 817a 	beq.w	800230e <HAL_PCD_IRQHandler+0xb48>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800201a:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800201e:	d10a      	bne.n	8002036 <HAL_PCD_IRQHandler+0x870>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002020:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002024:	b29b      	uxth	r3, r3
 8002026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202e:	ea48 0303 	orr.w	r3, r8, r3
 8002032:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002036:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800203a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800203e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002042:	2b01      	cmp	r3, #1
 8002044:	f47f af20 	bne.w	8001e88 <HAL_PCD_IRQHandler+0x6c2>
        ep->xfer_buff += TxPctSize;
 8002048:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800204c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8002050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002052:	4462      	add	r2, ip
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxPctSize;
 8002056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002058:	4462      	add	r2, ip
 800205a:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800205c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	429a      	cmp	r2, r3
 8002062:	d345      	bcc.n	80020f0 <HAL_PCD_IRQHandler+0x92a>
          ep->xfer_len_db -= len;
 8002064:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8002068:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
 800206c:	1ad2      	subs	r2, r2, r3
 800206e:	648a      	str	r2, [r1, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002070:	682a      	ldr	r2, [r5, #0]
 8002072:	f89a 1029 	ldrb.w	r1, [sl, #41]	; 0x29
 8002076:	2900      	cmp	r1, #0
 8002078:	d163      	bne.n	8002142 <HAL_PCD_IRQHandler+0x97c>
 800207a:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 800207e:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002082:	0109      	lsls	r1, r1, #4
 8002084:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002088:	fa12 f280 	uxtah	r2, r2, r0
 800208c:	5a88      	ldrh	r0, [r1, r2]
 800208e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002092:	5288      	strh	r0, [r1, r2]
 8002094:	2b3e      	cmp	r3, #62	; 0x3e
 8002096:	d93d      	bls.n	8002114 <HAL_PCD_IRQHandler+0x94e>
 8002098:	ea4f 1c53 	mov.w	ip, r3, lsr #5
 800209c:	f013 0f1f 	tst.w	r3, #31
 80020a0:	bf08      	it	eq
 80020a2:	f10c 3cff 	addeq.w	ip, ip, #4294967295
 80020a6:	5a88      	ldrh	r0, [r1, r2]
 80020a8:	b280      	uxth	r0, r0
 80020aa:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80020ae:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80020b2:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80020b6:	b280      	uxth	r0, r0
 80020b8:	5288      	strh	r0, [r1, r2]
 80020ba:	e044      	b.n	8002146 <HAL_PCD_IRQHandler+0x980>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020bc:	2b01      	cmp	r3, #1
 80020be:	f040 8157 	bne.w	8002370 <HAL_PCD_IRQHandler+0xbaa>
 80020c2:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 80020c6:	f202 4204 	addw	r2, r2, #1028	; 0x404
 80020ca:	fa12 f383 	uxtah	r3, r2, r3
 80020ce:	0109      	lsls	r1, r1, #4
 80020d0:	525e      	strh	r6, [r3, r1]
 80020d2:	e133      	b.n	800233c <HAL_PCD_IRQHandler+0xb76>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020d4:	2a01      	cmp	r2, #1
 80020d6:	f040 814b 	bne.w	8002370 <HAL_PCD_IRQHandler+0xbaa>
 80020da:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80020de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020e2:	fa13 f282 	uxtah	r2, r3, r2
 80020e6:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
 80020ea:	011b      	lsls	r3, r3, #4
 80020ec:	52d6      	strh	r6, [r2, r3]
 80020ee:	e13f      	b.n	8002370 <HAL_PCD_IRQHandler+0xbaa>
        else if (ep->xfer_len_db == 0U)
 80020f0:	b93a      	cbnz	r2, 8002102 <HAL_PCD_IRQHandler+0x93c>
          ep->xfer_fill_db = 0U;
 80020f2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80020f6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80020fa:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = TxPctSize;
 80020fe:	4663      	mov	r3, ip
 8002100:	e7b6      	b.n	8002070 <HAL_PCD_IRQHandler+0x8aa>
          ep->xfer_len_db = 0U;
 8002102:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002106:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800210a:	649e      	str	r6, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800210c:	f883 604c 	strb.w	r6, [r3, #76]	; 0x4c
          len = ep->xfer_len_db;
 8002110:	4613      	mov	r3, r2
 8002112:	e7ad      	b.n	8002070 <HAL_PCD_IRQHandler+0x8aa>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002114:	b93b      	cbnz	r3, 8002126 <HAL_PCD_IRQHandler+0x960>
 8002116:	5a88      	ldrh	r0, [r1, r2]
 8002118:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800211c:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 8002120:	b280      	uxth	r0, r0
 8002122:	5288      	strh	r0, [r1, r2]
 8002124:	e00f      	b.n	8002146 <HAL_PCD_IRQHandler+0x980>
 8002126:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800212a:	f013 0f01 	tst.w	r3, #1
 800212e:	bf18      	it	ne
 8002130:	f10c 0c01 	addne.w	ip, ip, #1
 8002134:	5a88      	ldrh	r0, [r1, r2]
 8002136:	b280      	uxth	r0, r0
 8002138:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 800213c:	b280      	uxth	r0, r0
 800213e:	5288      	strh	r0, [r1, r2]
 8002140:	e001      	b.n	8002146 <HAL_PCD_IRQHandler+0x980>
 8002142:	2901      	cmp	r1, #1
 8002144:	d00b      	beq.n	800215e <HAL_PCD_IRQHandler+0x998>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002146:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800214a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800214e:	4611      	mov	r1, r2
 8002150:	b29b      	uxth	r3, r3
 8002152:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002154:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8002156:	6828      	ldr	r0, [r5, #0]
 8002158:	f001 ffce 	bl	80040f8 <USB_WritePMA>
 800215c:	e694      	b.n	8001e88 <HAL_PCD_IRQHandler+0x6c2>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800215e:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8002162:	f89a 0028 	ldrb.w	r0, [sl, #40]	; 0x28
 8002166:	0100      	lsls	r0, r0, #4
 8002168:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 800216c:	fa12 f281 	uxtah	r2, r2, r1
 8002170:	b299      	uxth	r1, r3
 8002172:	5281      	strh	r1, [r0, r2]
 8002174:	e7e7      	b.n	8002146 <HAL_PCD_IRQHandler+0x980>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002176:	682a      	ldr	r2, [r5, #0]
 8002178:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800217c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	0c1b      	lsrs	r3, r3, #16
 8002184:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002188:	4628      	mov	r0, r5
 800218a:	f003 fb4a 	bl	8005822 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800218e:	2100      	movs	r1, #0
 8002190:	4628      	mov	r0, r5
 8002192:	f7ff fb04 	bl	800179e <HAL_PCD_SetAddress>
    return;
 8002196:	e008      	b.n	80021aa <HAL_PCD_IRQHandler+0x9e4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002198:	682a      	ldr	r2, [r5, #0]
 800219a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800219e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021a2:	041b      	lsls	r3, r3, #16
 80021a4:	0c1b      	lsrs	r3, r3, #16
 80021a6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80021aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80021ae:	682a      	ldr	r2, [r5, #0]
 80021b0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80021b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021b8:	041b      	lsls	r3, r3, #16
 80021ba:	0c1b      	lsrs	r3, r3, #16
 80021bc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80021c0:	e7f3      	b.n	80021aa <HAL_PCD_IRQHandler+0x9e4>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80021c2:	682a      	ldr	r2, [r5, #0]
 80021c4:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80021c8:	f023 0304 	bic.w	r3, r3, #4
 80021cc:	041b      	lsls	r3, r3, #16
 80021ce:	0c1b      	lsrs	r3, r3, #16
 80021d0:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021d4:	682a      	ldr	r2, [r5, #0]
 80021d6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80021da:	f023 0308 	bic.w	r3, r3, #8
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80021e6:	4628      	mov	r0, r5
 80021e8:	f003 fb3e 	bl	8005868 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021ec:	682a      	ldr	r2, [r5, #0]
 80021ee:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80021f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    return;
 80021fe:	e7d4      	b.n	80021aa <HAL_PCD_IRQHandler+0x9e4>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002200:	682a      	ldr	r2, [r5, #0]
 8002202:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002206:	b29b      	uxth	r3, r3
 8002208:	f043 0308 	orr.w	r3, r3, #8
 800220c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002210:	682a      	ldr	r2, [r5, #0]
 8002212:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800221a:	041b      	lsls	r3, r3, #16
 800221c:	0c1b      	lsrs	r3, r3, #16
 800221e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002222:	682a      	ldr	r2, [r5, #0]
 8002224:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 8002228:	b29b      	uxth	r3, r3
 800222a:	f043 0304 	orr.w	r3, r3, #4
 800222e:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8002232:	4628      	mov	r0, r5
 8002234:	f003 fb08 	bl	8005848 <HAL_PCD_SuspendCallback>
    return;
 8002238:	e7b7      	b.n	80021aa <HAL_PCD_IRQHandler+0x9e4>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800223a:	682a      	ldr	r2, [r5, #0]
 800223c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8002240:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	0c1b      	lsrs	r3, r3, #16
 8002248:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800224c:	4628      	mov	r0, r5
 800224e:	f003 fae2 	bl	8005816 <HAL_PCD_SOFCallback>
    return;
 8002252:	e7aa      	b.n	80021aa <HAL_PCD_IRQHandler+0x9e4>
 8002254:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002258:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 800225c:	6426      	str	r6, [r4, #64]	; 0x40
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800225e:	4628      	mov	r0, r5
 8002260:	f003 face 	bl	8005800 <HAL_PCD_DataInStageCallback>
 8002264:	f7ff bb3e 	b.w	80018e4 <HAL_PCD_IRQHandler+0x11e>
 8002268:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800226c:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8002270:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002272:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 8002276:	2b00      	cmp	r3, #0
 8002278:	f47f ae16 	bne.w	8001ea8 <HAL_PCD_IRQHandler+0x6e2>
 800227c:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8002280:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8002284:	fa12 f283 	uxtah	r2, r2, r3
 8002288:	0109      	lsls	r1, r1, #4
 800228a:	5a53      	ldrh	r3, [r2, r1]
 800228c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002290:	5253      	strh	r3, [r2, r1]
 8002292:	5a53      	ldrh	r3, [r2, r1]
 8002294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800229c:	b29b      	uxth	r3, r3
 800229e:	5253      	strh	r3, [r2, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80022a0:	682b      	ldr	r3, [r5, #0]
 80022a2:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 80022a6:	2a00      	cmp	r2, #0
 80022a8:	f47f ae0a 	bne.w	8001ec0 <HAL_PCD_IRQHandler+0x6fa>
 80022ac:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80022b0:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80022b4:	0109      	lsls	r1, r1, #4
 80022b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022ba:	fa13 f282 	uxtah	r2, r3, r2
 80022be:	5a8b      	ldrh	r3, [r1, r2]
 80022c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c4:	528b      	strh	r3, [r1, r2]
 80022c6:	5a8b      	ldrh	r3, [r1, r2]
 80022c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022d4:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80022d8:	4628      	mov	r0, r5
 80022da:	f003 fa91 	bl	8005800 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022de:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80022e2:	f43f add1 	beq.w	8001e88 <HAL_PCD_IRQHandler+0x6c2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80022e6:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 80022ea:	682a      	ldr	r2, [r5, #0]
 80022ec:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fa:	ea48 0303 	orr.w	r3, r8, r3
 80022fe:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002302:	e5c1      	b.n	8001e88 <HAL_PCD_IRQHandler+0x6c2>
 8002304:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002308:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800230c:	641e      	str	r6, [r3, #64]	; 0x40
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800230e:	f89a 3029 	ldrb.w	r3, [sl, #41]	; 0x29
 8002312:	2b00      	cmp	r3, #0
 8002314:	f47f aed2 	bne.w	80020bc <HAL_PCD_IRQHandler+0x8f6>
 8002318:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800231c:	f202 4204 	addw	r2, r2, #1028	; 0x404
 8002320:	fa12 f283 	uxtah	r2, r2, r3
 8002324:	0109      	lsls	r1, r1, #4
 8002326:	5a53      	ldrh	r3, [r2, r1]
 8002328:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800232c:	5253      	strh	r3, [r2, r1]
 800232e:	5a53      	ldrh	r3, [r2, r1]
 8002330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002338:	b29b      	uxth	r3, r3
 800233a:	5253      	strh	r3, [r2, r1]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800233c:	682b      	ldr	r3, [r5, #0]
 800233e:	f89a 2029 	ldrb.w	r2, [sl, #41]	; 0x29
 8002342:	2a00      	cmp	r2, #0
 8002344:	f47f aec6 	bne.w	80020d4 <HAL_PCD_IRQHandler+0x90e>
 8002348:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800234c:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002350:	0109      	lsls	r1, r1, #4
 8002352:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002356:	fa13 f282 	uxtah	r2, r3, r2
 800235a:	5a8b      	ldrh	r3, [r1, r2]
 800235c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002360:	528b      	strh	r3, [r1, r2]
 8002362:	5a8b      	ldrh	r3, [r1, r2]
 8002364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236c:	b29b      	uxth	r3, r3
 800236e:	528b      	strh	r3, [r1, r2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002370:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002374:	4628      	mov	r0, r5
 8002376:	f003 fa43 	bl	8005800 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800237a:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 800237e:	f47f ad83 	bne.w	8001e88 <HAL_PCD_IRQHandler+0x6c2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002382:	f89a 1028 	ldrb.w	r1, [sl, #40]	; 0x28
 8002386:	682a      	ldr	r2, [r5, #0]
 8002388:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800238c:	b29b      	uxth	r3, r3
 800238e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	ea48 0303 	orr.w	r3, r8, r3
 800239a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800239e:	e573      	b.n	8001e88 <HAL_PCD_IRQHandler+0x6c2>
 80023a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80023a4:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80023a8:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023ac:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023be:	433b      	orrs	r3, r7
 80023c0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80023c4:	e432      	b.n	8001c2c <HAL_PCD_IRQHandler+0x466>
 80023c6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80023ca:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80023ce:	f8c3 6180 	str.w	r6, [r3, #384]	; 0x180
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023d2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023e4:	433b      	orrs	r3, r7
 80023e6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80023ea:	e46a      	b.n	8001cc2 <HAL_PCD_IRQHandler+0x4fc>

080023ec <HAL_PCD_EP_Open>:
{
 80023ec:	b510      	push	{r4, lr}
 80023ee:	4604      	mov	r4, r0
 80023f0:	4608      	mov	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80023f2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80023f6:	d123      	bne.n	8002440 <HAL_PCD_EP_Open+0x54>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023f8:	f001 0c07 	and.w	ip, r1, #7
 80023fc:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8002400:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8002404:	f50e 71b4 	add.w	r1, lr, #360	; 0x168
    ep->is_in = 0U;
 8002408:	46f4      	mov	ip, lr
 800240a:	f04f 0e00 	mov.w	lr, #0
 800240e:	f88c e169 	strb.w	lr, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002412:	f000 0007 	and.w	r0, r0, #7
 8002416:	7008      	strb	r0, [r1, #0]
  ep->maxpacket = ep_mps;
 8002418:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;
 800241a:	70cb      	strb	r3, [r1, #3]
  if (ep_type == EP_TYPE_BULK)
 800241c:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800241e:	bf04      	itt	eq
 8002420:	2300      	moveq	r3, #0
 8002422:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8002424:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002428:	2b01      	cmp	r3, #1
 800242a:	d016      	beq.n	800245a <HAL_PCD_EP_Open+0x6e>
 800242c:	2301      	movs	r3, #1
 800242e:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002432:	6820      	ldr	r0, [r4, #0]
 8002434:	f001 fb2d 	bl	8003a92 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002438:	2000      	movs	r0, #0
 800243a:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800243e:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002440:	f001 0c07 	and.w	ip, r1, #7
 8002444:	f10c 0c01 	add.w	ip, ip, #1
 8002448:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800244c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    ep->is_in = 1U;
 8002450:	f04f 0e01 	mov.w	lr, #1
 8002454:	f881 e001 	strb.w	lr, [r1, #1]
 8002458:	e7db      	b.n	8002412 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800245a:	2002      	movs	r0, #2
 800245c:	e7ef      	b.n	800243e <HAL_PCD_EP_Open+0x52>

0800245e <HAL_PCD_EP_Close>:
{
 800245e:	b510      	push	{r4, lr}
 8002460:	4604      	mov	r4, r0
 8002462:	460b      	mov	r3, r1
  if ((ep_addr & 0x80U) == 0x80U)
 8002464:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002468:	d11f      	bne.n	80024aa <HAL_PCD_EP_Close+0x4c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800246a:	f001 0207 	and.w	r2, r1, #7
 800246e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002472:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002476:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800247a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800247e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002482:	2000      	movs	r0, #0
 8002484:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800248e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002492:	2b01      	cmp	r3, #1
 8002494:	d013      	beq.n	80024be <HAL_PCD_EP_Close+0x60>
 8002496:	2301      	movs	r3, #1
 8002498:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800249c:	6820      	ldr	r0, [r4, #0]
 800249e:	f001 fcc0 	bl	8003e22 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024a2:	2000      	movs	r0, #0
 80024a4:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 80024a8:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024aa:	f001 0207 	and.w	r2, r1, #7
 80024ae:	3201      	adds	r2, #1
 80024b0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80024b4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80024b8:	2001      	movs	r0, #1
 80024ba:	7048      	strb	r0, [r1, #1]
 80024bc:	e7e4      	b.n	8002488 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80024be:	2002      	movs	r0, #2
 80024c0:	e7f2      	b.n	80024a8 <HAL_PCD_EP_Close+0x4a>

080024c2 <HAL_PCD_EP_Receive>:
{
 80024c2:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c4:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 80024c8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80024cc:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 80024d0:	f8cc 217c 	str.w	r2, [ip, #380]	; 0x17c
  ep->xfer_len = len;
 80024d4:	f8cc 3180 	str.w	r3, [ip, #384]	; 0x180
  ep->xfer_count = 0U;
 80024d8:	2400      	movs	r4, #0
 80024da:	f8cc 4184 	str.w	r4, [ip, #388]	; 0x184
  ep->is_in = 0U;
 80024de:	f88c 4169 	strb.w	r4, [ip, #361]	; 0x169
  ep->num = ep_addr & EP_ADDR_MSK;
 80024e2:	f88c 1168 	strb.w	r1, [ip, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80024e6:	f50c 71b4 	add.w	r1, ip, #360	; 0x168
 80024ea:	6800      	ldr	r0, [r0, #0]
 80024ec:	f001 fe1b 	bl	8004126 <USB_EPStartXfer>
}
 80024f0:	4620      	mov	r0, r4
 80024f2:	bd10      	pop	{r4, pc}

080024f4 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80024f4:	f001 0107 	and.w	r1, r1, #7
 80024f8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80024fc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
}
 8002500:	f8d0 0184 	ldr.w	r0, [r0, #388]	; 0x184
 8002504:	4770      	bx	lr

08002506 <HAL_PCD_EP_Transmit>:
{
 8002506:	b510      	push	{r4, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002508:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800250c:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8002510:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 8002514:	f8cc 203c 	str.w	r2, [ip, #60]	; 0x3c
  ep->xfer_len = len;
 8002518:	f8cc 3040 	str.w	r3, [ip, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 800251c:	2201      	movs	r2, #1
 800251e:	f88c 204c 	strb.w	r2, [ip, #76]	; 0x4c
  ep->xfer_len_db = len;
 8002522:	f8cc 3048 	str.w	r3, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 8002526:	2400      	movs	r4, #0
 8002528:	f8cc 4044 	str.w	r4, [ip, #68]	; 0x44
  ep->is_in = 1U;
 800252c:	f88c 2029 	strb.w	r2, [ip, #41]	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 8002530:	f88c 1028 	strb.w	r1, [ip, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002534:	4411      	add	r1, r2
 8002536:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800253a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800253e:	6800      	ldr	r0, [r0, #0]
 8002540:	f001 fdf1 	bl	8004126 <USB_EPStartXfer>
}
 8002544:	4620      	mov	r0, r4
 8002546:	bd10      	pop	{r4, pc}

08002548 <HAL_PCD_EP_SetStall>:
{
 8002548:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800254a:	f001 0207 	and.w	r2, r1, #7
 800254e:	6841      	ldr	r1, [r0, #4]
 8002550:	428a      	cmp	r2, r1
 8002552:	d82a      	bhi.n	80025aa <HAL_PCD_EP_SetStall+0x62>
{
 8002554:	b510      	push	{r4, lr}
 8002556:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8002558:	f013 0f80 	tst.w	r3, #128	; 0x80
 800255c:	d11d      	bne.n	800259a <HAL_PCD_EP_SetStall+0x52>
    ep = &hpcd->OUT_ep[ep_addr];
 800255e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8002562:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8002566:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 800256a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800256e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002572:	2000      	movs	r0, #0
 8002574:	f883 0169 	strb.w	r0, [r3, #361]	; 0x169
  ep->is_stall = 1U;
 8002578:	2301      	movs	r3, #1
 800257a:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800257c:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800257e:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 8002582:	2b01      	cmp	r3, #1
 8002584:	d013      	beq.n	80025ae <HAL_PCD_EP_SetStall+0x66>
 8002586:	2301      	movs	r3, #1
 8002588:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800258c:	6820      	ldr	r0, [r4, #0]
 800258e:	f001 fd31 	bl	8003ff4 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 8002592:	2000      	movs	r0, #0
 8002594:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 8002598:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800259a:	1c53      	adds	r3, r2, #1
 800259c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80025a0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 80025a4:	2001      	movs	r0, #1
 80025a6:	7048      	strb	r0, [r1, #1]
 80025a8:	e7e6      	b.n	8002578 <HAL_PCD_EP_SetStall+0x30>
    return HAL_ERROR;
 80025aa:	2001      	movs	r0, #1
}
 80025ac:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 80025ae:	2002      	movs	r0, #2
 80025b0:	e7f2      	b.n	8002598 <HAL_PCD_EP_SetStall+0x50>

080025b2 <HAL_PCD_EP_ClrStall>:
{
 80025b2:	460b      	mov	r3, r1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80025b4:	f001 010f 	and.w	r1, r1, #15
 80025b8:	6842      	ldr	r2, [r0, #4]
 80025ba:	4291      	cmp	r1, r2
 80025bc:	d830      	bhi.n	8002620 <HAL_PCD_EP_ClrStall+0x6e>
{
 80025be:	b510      	push	{r4, lr}
 80025c0:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 80025c2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80025c6:	d121      	bne.n	800260c <HAL_PCD_EP_ClrStall+0x5a>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025c8:	f003 0207 	and.w	r2, r3, #7
 80025cc:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80025d0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80025d4:	f501 71b4 	add.w	r1, r1, #360	; 0x168
    ep->is_in = 0U;
 80025d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80025dc:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80025e0:	2000      	movs	r0, #0
 80025e2:	f882 0169 	strb.w	r0, [r2, #361]	; 0x169
  ep->is_stall = 0U;
 80025e6:	2200      	movs	r2, #0
 80025e8:	708a      	strb	r2, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80025f0:	f894 32a8 	ldrb.w	r3, [r4, #680]	; 0x2a8
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d015      	beq.n	8002624 <HAL_PCD_EP_ClrStall+0x72>
 80025f8:	2301      	movs	r3, #1
 80025fa:	f884 32a8 	strb.w	r3, [r4, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80025fe:	6820      	ldr	r0, [r4, #0]
 8002600:	f001 fd1d 	bl	800403e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002604:	2000      	movs	r0, #0
 8002606:	f884 02a8 	strb.w	r0, [r4, #680]	; 0x2a8
}
 800260a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800260c:	f003 0207 	and.w	r2, r3, #7
 8002610:	3201      	adds	r2, #1
 8002612:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8002616:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    ep->is_in = 1U;
 800261a:	2001      	movs	r0, #1
 800261c:	7048      	strb	r0, [r1, #1]
 800261e:	e7e2      	b.n	80025e6 <HAL_PCD_EP_ClrStall+0x34>
    return HAL_ERROR;
 8002620:	2001      	movs	r0, #1
}
 8002622:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8002624:	2002      	movs	r0, #2
 8002626:	e7f0      	b.n	800260a <HAL_PCD_EP_ClrStall+0x58>

08002628 <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002628:	f011 0f80 	tst.w	r1, #128	; 0x80
 800262c:	d00b      	beq.n	8002646 <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800262e:	f001 0107 	and.w	r1, r1, #7
 8002632:	3101      	adds	r1, #1
 8002634:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002638:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800263c:	b952      	cbnz	r2, 8002654 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800263e:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002640:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8002642:	2000      	movs	r0, #0
 8002644:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 8002646:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800264a:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800264e:	f500 70b4 	add.w	r0, r0, #360	; 0x168
 8002652:	e7f3      	b.n	800263c <HAL_PCDEx_PMAConfig+0x14>
    ep->doublebuffer = 1U;
 8002654:	2201      	movs	r2, #1
 8002656:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002658:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800265a:	0c1b      	lsrs	r3, r3, #16
 800265c:	8143      	strh	r3, [r0, #10]
 800265e:	e7f0      	b.n	8002642 <HAL_PCDEx_PMAConfig+0x1a>

08002660 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002660:	2800      	cmp	r0, #0
 8002662:	f000 82d3 	beq.w	8002c0c <HAL_RCC_OscConfig+0x5ac>
{
 8002666:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800266a:	b083      	sub	sp, #12
 800266c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800266e:	6803      	ldr	r3, [r0, #0]
 8002670:	f013 0f01 	tst.w	r3, #1
 8002674:	d037      	beq.n	80026e6 <HAL_RCC_OscConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002676:	4bad      	ldr	r3, [pc, #692]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 030c 	and.w	r3, r3, #12
 800267e:	2b04      	cmp	r3, #4
 8002680:	d01e      	beq.n	80026c0 <HAL_RCC_OscConfig+0x60>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002682:	4baa      	ldr	r3, [pc, #680]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b08      	cmp	r3, #8
 800268c:	d013      	beq.n	80026b6 <HAL_RCC_OscConfig+0x56>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800268e:	6863      	ldr	r3, [r4, #4]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	d063      	beq.n	800275e <HAL_RCC_OscConfig+0xfe>
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 808a 	bne.w	80027b0 <HAL_RCC_OscConfig+0x150>
 800269c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026a0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e058      	b.n	8002768 <HAL_RCC_OscConfig+0x108>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80026b6:	4b9d      	ldr	r3, [pc, #628]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80026be:	d0e6      	beq.n	800268e <HAL_RCC_OscConfig+0x2e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026c4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	4a98      	ldr	r2, [pc, #608]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 80026ca:	6811      	ldr	r1, [r2, #0]
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	2201      	movs	r2, #1
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	420b      	tst	r3, r1
 80026dc:	d003      	beq.n	80026e6 <HAL_RCC_OscConfig+0x86>
 80026de:	6863      	ldr	r3, [r4, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8295 	beq.w	8002c10 <HAL_RCC_OscConfig+0x5b0>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	f013 0f02 	tst.w	r3, #2
 80026ec:	f000 80bb 	beq.w	8002866 <HAL_RCC_OscConfig+0x206>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026f0:	4b8e      	ldr	r3, [pc, #568]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f013 0f0c 	tst.w	r3, #12
 80026f8:	f000 8096 	beq.w	8002828 <HAL_RCC_OscConfig+0x1c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026fc:	4b8b      	ldr	r3, [pc, #556]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	f000 8089 	beq.w	800281c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800270a:	6923      	ldr	r3, [r4, #16]
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 80e7 	beq.w	80028e0 <HAL_RCC_OscConfig+0x280>
 8002712:	2201      	movs	r2, #1
 8002714:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002720:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7fe fb4a 	bl	8000dc0 <HAL_GetTick>
 800272c:	4606      	mov	r6, r0
 800272e:	2502      	movs	r5, #2
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002730:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 800292c <HAL_RCC_OscConfig+0x2cc>
 8002734:	2701      	movs	r7, #1
 8002736:	fa95 f3a5 	rbit	r3, r5
 800273a:	f8d8 2000 	ldr.w	r2, [r8]
 800273e:	fa95 f3a5 	rbit	r3, r5
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	fa07 f303 	lsl.w	r3, r7, r3
 800274a:	4213      	tst	r3, r2
 800274c:	f040 80ba 	bne.w	80028c4 <HAL_RCC_OscConfig+0x264>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe fb36 	bl	8000dc0 <HAL_GetTick>
 8002754:	1b80      	subs	r0, r0, r6
 8002756:	2802      	cmp	r0, #2
 8002758:	d9ed      	bls.n	8002736 <HAL_RCC_OscConfig+0xd6>
          {
            return HAL_TIMEOUT;
 800275a:	2003      	movs	r0, #3
 800275c:	e25d      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275e:	4a73      	ldr	r2, [pc, #460]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 8002760:	6813      	ldr	r3, [r2, #0]
 8002762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002768:	4a70      	ldr	r2, [pc, #448]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 800276a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800276c:	f023 030f 	bic.w	r3, r3, #15
 8002770:	68a1      	ldr	r1, [r4, #8]
 8002772:	430b      	orrs	r3, r1
 8002774:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	b3a3      	cbz	r3, 80027e4 <HAL_RCC_OscConfig+0x184>
        tickstart = HAL_GetTick();
 800277a:	f7fe fb21 	bl	8000dc0 <HAL_GetTick>
 800277e:	4606      	mov	r6, r0
 8002780:	f44f 3500 	mov.w	r5, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002784:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800292c <HAL_RCC_OscConfig+0x2cc>
 8002788:	2701      	movs	r7, #1
 800278a:	fa95 f3a5 	rbit	r3, r5
 800278e:	f8d8 2000 	ldr.w	r2, [r8]
 8002792:	fa95 f3a5 	rbit	r3, r5
 8002796:	fab3 f383 	clz	r3, r3
 800279a:	fa07 f303 	lsl.w	r3, r7, r3
 800279e:	4213      	tst	r3, r2
 80027a0:	d1a1      	bne.n	80026e6 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a2:	f7fe fb0d 	bl	8000dc0 <HAL_GetTick>
 80027a6:	1b80      	subs	r0, r0, r6
 80027a8:	2864      	cmp	r0, #100	; 0x64
 80027aa:	d9ee      	bls.n	800278a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 80027ac:	2003      	movs	r0, #3
 80027ae:	e234      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027b4:	d009      	beq.n	80027ca <HAL_RCC_OscConfig+0x16a>
 80027b6:	4b5d      	ldr	r3, [pc, #372]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e7ce      	b.n	8002768 <HAL_RCC_OscConfig+0x108>
 80027ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027ce:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e7c1      	b.n	8002768 <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 80027e4:	f7fe faec 	bl	8000dc0 <HAL_GetTick>
 80027e8:	4606      	mov	r6, r0
 80027ea:	f44f 3500 	mov.w	r5, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800292c <HAL_RCC_OscConfig+0x2cc>
 80027f2:	2701      	movs	r7, #1
 80027f4:	fa95 f3a5 	rbit	r3, r5
 80027f8:	f8d8 2000 	ldr.w	r2, [r8]
 80027fc:	fa95 f3a5 	rbit	r3, r5
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	fa07 f303 	lsl.w	r3, r7, r3
 8002808:	4213      	tst	r3, r2
 800280a:	f43f af6c 	beq.w	80026e6 <HAL_RCC_OscConfig+0x86>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280e:	f7fe fad7 	bl	8000dc0 <HAL_GetTick>
 8002812:	1b80      	subs	r0, r0, r6
 8002814:	2864      	cmp	r0, #100	; 0x64
 8002816:	d9ed      	bls.n	80027f4 <HAL_RCC_OscConfig+0x194>
            return HAL_TIMEOUT;
 8002818:	2003      	movs	r0, #3
 800281a:	e1fe      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800281c:	4b43      	ldr	r3, [pc, #268]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002824:	f47f af71 	bne.w	800270a <HAL_RCC_OscConfig+0xaa>
 8002828:	2302      	movs	r3, #2
 800282a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	4a3f      	ldr	r2, [pc, #252]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 8002830:	6811      	ldr	r1, [r2, #0]
 8002832:	fa93 f3a3 	rbit	r3, r3
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	2201      	movs	r2, #1
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	420b      	tst	r3, r1
 8002842:	d003      	beq.n	800284c <HAL_RCC_OscConfig+0x1ec>
 8002844:	6923      	ldr	r3, [r4, #16]
 8002846:	4293      	cmp	r3, r2
 8002848:	f040 81e4 	bne.w	8002c14 <HAL_RCC_OscConfig+0x5b4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284c:	4837      	ldr	r0, [pc, #220]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 800284e:	6801      	ldr	r1, [r0, #0]
 8002850:	22f8      	movs	r2, #248	; 0xf8
 8002852:	fa92 f2a2 	rbit	r2, r2
 8002856:	fab2 f282 	clz	r2, r2
 800285a:	6963      	ldr	r3, [r4, #20]
 800285c:	4093      	lsls	r3, r2
 800285e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8002862:	4313      	orrs	r3, r2
 8002864:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	f013 0f08 	tst.w	r3, #8
 800286c:	f000 808a 	beq.w	8002984 <HAL_RCC_OscConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002870:	69a3      	ldr	r3, [r4, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d05e      	beq.n	8002934 <HAL_RCC_OscConfig+0x2d4>
 8002876:	2101      	movs	r1, #1
 8002878:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287c:	fab2 f282 	clz	r2, r2
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <HAL_RCC_OscConfig+0x2d0>)
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002888:	f7fe fa9a 	bl	8000dc0 <HAL_GetTick>
 800288c:	4606      	mov	r6, r0
 800288e:	2502      	movs	r5, #2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002890:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800292c <HAL_RCC_OscConfig+0x2cc>
 8002894:	2701      	movs	r7, #1
 8002896:	fa95 f3a5 	rbit	r3, r5
 800289a:	fa95 f3a5 	rbit	r3, r5
 800289e:	fa95 f3a5 	rbit	r3, r5
 80028a2:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 80028a6:	fa95 f3a5 	rbit	r3, r5
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	fa07 f303 	lsl.w	r3, r7, r3
 80028b2:	4213      	tst	r3, r2
 80028b4:	d166      	bne.n	8002984 <HAL_RCC_OscConfig+0x324>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028b6:	f7fe fa83 	bl	8000dc0 <HAL_GetTick>
 80028ba:	1b80      	subs	r0, r0, r6
 80028bc:	2802      	cmp	r0, #2
 80028be:	d9ea      	bls.n	8002896 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80028c0:	2003      	movs	r0, #3
 80028c2:	e1aa      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c4:	4819      	ldr	r0, [pc, #100]	; (800292c <HAL_RCC_OscConfig+0x2cc>)
 80028c6:	6801      	ldr	r1, [r0, #0]
 80028c8:	22f8      	movs	r2, #248	; 0xf8
 80028ca:	fa92 f2a2 	rbit	r2, r2
 80028ce:	fab2 f282 	clz	r2, r2
 80028d2:	6963      	ldr	r3, [r4, #20]
 80028d4:	4093      	lsls	r3, r2
 80028d6:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80028da:	4313      	orrs	r3, r2
 80028dc:	6003      	str	r3, [r0, #0]
 80028de:	e7c2      	b.n	8002866 <HAL_RCC_OscConfig+0x206>
 80028e0:	2301      	movs	r3, #1
 80028e2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028f8:	f7fe fa62 	bl	8000dc0 <HAL_GetTick>
 80028fc:	4606      	mov	r6, r0
 80028fe:	2502      	movs	r5, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002900:	f8df 8028 	ldr.w	r8, [pc, #40]	; 800292c <HAL_RCC_OscConfig+0x2cc>
 8002904:	2701      	movs	r7, #1
 8002906:	fa95 f3a5 	rbit	r3, r5
 800290a:	f8d8 2000 	ldr.w	r2, [r8]
 800290e:	fa95 f3a5 	rbit	r3, r5
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	fa07 f303 	lsl.w	r3, r7, r3
 800291a:	4213      	tst	r3, r2
 800291c:	d0a3      	beq.n	8002866 <HAL_RCC_OscConfig+0x206>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291e:	f7fe fa4f 	bl	8000dc0 <HAL_GetTick>
 8002922:	1b80      	subs	r0, r0, r6
 8002924:	2802      	cmp	r0, #2
 8002926:	d9ee      	bls.n	8002906 <HAL_RCC_OscConfig+0x2a6>
            return HAL_TIMEOUT;
 8002928:	2003      	movs	r0, #3
 800292a:	e176      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
 800292c:	40021000 	.word	0x40021000
 8002930:	10908120 	.word	0x10908120
 8002934:	2201      	movs	r2, #1
 8002936:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293a:	fab2 f282 	clz	r2, r2
 800293e:	4bb8      	ldr	r3, [pc, #736]	; (8002c20 <HAL_RCC_OscConfig+0x5c0>)
 8002940:	4413      	add	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002948:	f7fe fa3a 	bl	8000dc0 <HAL_GetTick>
 800294c:	4606      	mov	r6, r0
 800294e:	2502      	movs	r5, #2
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002950:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8002c24 <HAL_RCC_OscConfig+0x5c4>
 8002954:	2701      	movs	r7, #1
 8002956:	fa95 f3a5 	rbit	r3, r5
 800295a:	fa95 f3a5 	rbit	r3, r5
 800295e:	fa95 f3a5 	rbit	r3, r5
 8002962:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8002966:	fa95 f3a5 	rbit	r3, r5
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	fa07 f303 	lsl.w	r3, r7, r3
 8002972:	4213      	tst	r3, r2
 8002974:	d006      	beq.n	8002984 <HAL_RCC_OscConfig+0x324>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002976:	f7fe fa23 	bl	8000dc0 <HAL_GetTick>
 800297a:	1b80      	subs	r0, r0, r6
 800297c:	2802      	cmp	r0, #2
 800297e:	d9ea      	bls.n	8002956 <HAL_RCC_OscConfig+0x2f6>
        {
          return HAL_TIMEOUT;
 8002980:	2003      	movs	r0, #3
 8002982:	e14a      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	f013 0f04 	tst.w	r3, #4
 800298a:	f000 809b 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x464>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298e:	4ba5      	ldr	r3, [pc, #660]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002996:	d122      	bne.n	80029de <HAL_RCC_OscConfig+0x37e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	4ba2      	ldr	r3, [pc, #648]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029a0:	61da      	str	r2, [r3, #28]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80029ac:	f04f 0901 	mov.w	r9, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	4b9d      	ldr	r3, [pc, #628]	; (8002c28 <HAL_RCC_OscConfig+0x5c8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029b8:	d014      	beq.n	80029e4 <HAL_RCC_OscConfig+0x384>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ba:	68e3      	ldr	r3, [r4, #12]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d025      	beq.n	8002a0c <HAL_RCC_OscConfig+0x3ac>
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d148      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3f6>
 80029c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029c8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80029cc:	6a1a      	ldr	r2, [r3, #32]
 80029ce:	f022 0201 	bic.w	r2, r2, #1
 80029d2:	621a      	str	r2, [r3, #32]
 80029d4:	6a1a      	ldr	r2, [r3, #32]
 80029d6:	f022 0204 	bic.w	r2, r2, #4
 80029da:	621a      	str	r2, [r3, #32]
 80029dc:	e01b      	b.n	8002a16 <HAL_RCC_OscConfig+0x3b6>
    FlagStatus       pwrclkchanged = RESET;
 80029de:	f04f 0900 	mov.w	r9, #0
 80029e2:	e7e5      	b.n	80029b0 <HAL_RCC_OscConfig+0x350>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029e4:	4a90      	ldr	r2, [pc, #576]	; (8002c28 <HAL_RCC_OscConfig+0x5c8>)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80029ee:	f7fe f9e7 	bl	8000dc0 <HAL_GetTick>
 80029f2:	4605      	mov	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4e8c      	ldr	r6, [pc, #560]	; (8002c28 <HAL_RCC_OscConfig+0x5c8>)
 80029f6:	6833      	ldr	r3, [r6, #0]
 80029f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80029fc:	d1dd      	bne.n	80029ba <HAL_RCC_OscConfig+0x35a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fe:	f7fe f9df 	bl	8000dc0 <HAL_GetTick>
 8002a02:	1b40      	subs	r0, r0, r5
 8002a04:	2864      	cmp	r0, #100	; 0x64
 8002a06:	d9f6      	bls.n	80029f6 <HAL_RCC_OscConfig+0x396>
          return HAL_TIMEOUT;
 8002a08:	2003      	movs	r0, #3
 8002a0a:	e106      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a0c:	4a85      	ldr	r2, [pc, #532]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 8002a0e:	6a13      	ldr	r3, [r2, #32]
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a16:	68e3      	ldr	r3, [r4, #12]
 8002a18:	b39b      	cbz	r3, 8002a82 <HAL_RCC_OscConfig+0x422>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe f9d1 	bl	8000dc0 <HAL_GetTick>
 8002a1e:	4606      	mov	r6, r0
 8002a20:	2502      	movs	r5, #2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a22:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8002c24 <HAL_RCC_OscConfig+0x5c4>
 8002a26:	2701      	movs	r7, #1
 8002a28:	fa95 f3a5 	rbit	r3, r5
 8002a2c:	fa95 f3a5 	rbit	r3, r5
 8002a30:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8002a34:	fa95 f3a5 	rbit	r3, r5
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	fa07 f303 	lsl.w	r3, r7, r3
 8002a40:	4213      	tst	r3, r2
 8002a42:	d13c      	bne.n	8002abe <HAL_RCC_OscConfig+0x45e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7fe f9bc 	bl	8000dc0 <HAL_GetTick>
 8002a48:	1b80      	subs	r0, r0, r6
 8002a4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a4e:	4298      	cmp	r0, r3
 8002a50:	d9ea      	bls.n	8002a28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a52:	2003      	movs	r0, #3
 8002a54:	e0e1      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_OscConfig+0x40e>
 8002a5a:	4b72      	ldr	r3, [pc, #456]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 8002a5c:	6a1a      	ldr	r2, [r3, #32]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	621a      	str	r2, [r3, #32]
 8002a64:	6a1a      	ldr	r2, [r3, #32]
 8002a66:	f022 0204 	bic.w	r2, r2, #4
 8002a6a:	621a      	str	r2, [r3, #32]
 8002a6c:	e7d3      	b.n	8002a16 <HAL_RCC_OscConfig+0x3b6>
 8002a6e:	4b6d      	ldr	r3, [pc, #436]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 8002a70:	6a1a      	ldr	r2, [r3, #32]
 8002a72:	f042 0204 	orr.w	r2, r2, #4
 8002a76:	621a      	str	r2, [r3, #32]
 8002a78:	6a1a      	ldr	r2, [r3, #32]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	621a      	str	r2, [r3, #32]
 8002a80:	e7c9      	b.n	8002a16 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a82:	f7fe f99d 	bl	8000dc0 <HAL_GetTick>
 8002a86:	4606      	mov	r6, r0
 8002a88:	2502      	movs	r5, #2
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8a:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8002c24 <HAL_RCC_OscConfig+0x5c4>
 8002a8e:	2701      	movs	r7, #1
 8002a90:	fa95 f3a5 	rbit	r3, r5
 8002a94:	fa95 f3a5 	rbit	r3, r5
 8002a98:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8002a9c:	fa95 f3a5 	rbit	r3, r5
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	fa07 f303 	lsl.w	r3, r7, r3
 8002aa8:	4213      	tst	r3, r2
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_OscConfig+0x45e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aac:	f7fe f988 	bl	8000dc0 <HAL_GetTick>
 8002ab0:	1b80      	subs	r0, r0, r6
 8002ab2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ab6:	4298      	cmp	r0, r3
 8002ab8:	d9ea      	bls.n	8002a90 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002aba:	2003      	movs	r0, #3
 8002abc:	e0ad      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002abe:	f1b9 0f00 	cmp.w	r9, #0
 8002ac2:	d132      	bne.n	8002b2a <HAL_RCC_OscConfig+0x4ca>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac4:	69e3      	ldr	r3, [r4, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80a6 	beq.w	8002c18 <HAL_RCC_OscConfig+0x5b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002acc:	4a55      	ldr	r2, [pc, #340]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 8002ace:	6852      	ldr	r2, [r2, #4]
 8002ad0:	f002 020c 	and.w	r2, r2, #12
 8002ad4:	2a08      	cmp	r2, #8
 8002ad6:	f000 8089 	beq.w	8002bec <HAL_RCC_OscConfig+0x58c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d02b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x4d6>
 8002ade:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ae2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002aee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fe f962 	bl	8000dc0 <HAL_GetTick>
 8002afc:	4605      	mov	r5, r0
 8002afe:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b02:	4f48      	ldr	r7, [pc, #288]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 8002b04:	2601      	movs	r6, #1
 8002b06:	fa94 f3a4 	rbit	r3, r4
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	fa94 f3a4 	rbit	r3, r4
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	fa06 f303 	lsl.w	r3, r6, r3
 8002b18:	4213      	tst	r3, r2
 8002b1a:	d065      	beq.n	8002be8 <HAL_RCC_OscConfig+0x588>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe f950 	bl	8000dc0 <HAL_GetTick>
 8002b20:	1b40      	subs	r0, r0, r5
 8002b22:	2802      	cmp	r0, #2
 8002b24:	d9ef      	bls.n	8002b06 <HAL_RCC_OscConfig+0x4a6>
          {
            return HAL_TIMEOUT;
 8002b26:	2003      	movs	r0, #3
 8002b28:	e077      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b2a:	4a3e      	ldr	r2, [pc, #248]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 8002b2c:	69d3      	ldr	r3, [r2, #28]
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b32:	61d3      	str	r3, [r2, #28]
 8002b34:	e7c6      	b.n	8002ac4 <HAL_RCC_OscConfig+0x464>
 8002b36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b3a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b46:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b50:	f7fe f936 	bl	8000dc0 <HAL_GetTick>
 8002b54:	4606      	mov	r6, r0
 8002b56:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b5a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8002c24 <HAL_RCC_OscConfig+0x5c4>
 8002b5e:	2701      	movs	r7, #1
 8002b60:	fa95 f3a5 	rbit	r3, r5
 8002b64:	f8d8 2000 	ldr.w	r2, [r8]
 8002b68:	fa95 f3a5 	rbit	r3, r5
 8002b6c:	fab3 f383 	clz	r3, r3
 8002b70:	fa07 f303 	lsl.w	r3, r7, r3
 8002b74:	4213      	tst	r3, r2
 8002b76:	d006      	beq.n	8002b86 <HAL_RCC_OscConfig+0x526>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b78:	f7fe f922 	bl	8000dc0 <HAL_GetTick>
 8002b7c:	1b80      	subs	r0, r0, r6
 8002b7e:	2802      	cmp	r0, #2
 8002b80:	d9ee      	bls.n	8002b60 <HAL_RCC_OscConfig+0x500>
            return HAL_TIMEOUT;
 8002b82:	2003      	movs	r0, #3
 8002b84:	e049      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b86:	4927      	ldr	r1, [pc, #156]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 8002b88:	684a      	ldr	r2, [r1, #4]
 8002b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b8c:	6a20      	ldr	r0, [r4, #32]
 8002b8e:	4303      	orrs	r3, r0
 8002b90:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002b94:	4313      	orrs	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
 8002b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b9c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ba8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bb2:	f7fe f905 	bl	8000dc0 <HAL_GetTick>
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bbc:	4f19      	ldr	r7, [pc, #100]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 8002bbe:	2601      	movs	r6, #1
 8002bc0:	fa94 f3a4 	rbit	r3, r4
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	fa94 f3a4 	rbit	r3, r4
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	fa06 f303 	lsl.w	r3, r6, r3
 8002bd2:	4213      	tst	r3, r2
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x584>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe f8f3 	bl	8000dc0 <HAL_GetTick>
 8002bda:	1b40      	subs	r0, r0, r5
 8002bdc:	2802      	cmp	r0, #2
 8002bde:	d9ef      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x560>
            return HAL_TIMEOUT;
 8002be0:	2003      	movs	r0, #3
 8002be2:	e01a      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
        }
      }
    }
  }

  return HAL_OK;
 8002be4:	2000      	movs	r0, #0
 8002be6:	e018      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
 8002be8:	2000      	movs	r0, #0
 8002bea:	e016      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d01d      	beq.n	8002c2c <HAL_RCC_OscConfig+0x5cc>
        pll_config = RCC->CFGR;
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_RCC_OscConfig+0x5c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002bf4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002bf8:	6a22      	ldr	r2, [r4, #32]
 8002bfa:	4291      	cmp	r1, r2
 8002bfc:	d118      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5d0>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002bfe:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c02:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 8002c04:	1a18      	subs	r0, r3, r0
 8002c06:	bf18      	it	ne
 8002c08:	2001      	movne	r0, #1
 8002c0a:	e006      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
 8002c0c:	2001      	movs	r0, #1
}
 8002c0e:	4770      	bx	lr
        return HAL_ERROR;
 8002c10:	2001      	movs	r0, #1
 8002c12:	e002      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
        return HAL_ERROR;
 8002c14:	2001      	movs	r0, #1
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
  return HAL_OK;
 8002c18:	2000      	movs	r0, #0
}
 8002c1a:	b003      	add	sp, #12
 8002c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c20:	10908120 	.word	0x10908120
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
        return HAL_ERROR;
 8002c2c:	2001      	movs	r0, #1
 8002c2e:	e7f4      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>
          return HAL_ERROR;
 8002c30:	2001      	movs	r0, #1
 8002c32:	e7f2      	b.n	8002c1a <HAL_RCC_OscConfig+0x5ba>

08002c34 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002c34:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002c36:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c38:	f003 020c 	and.w	r2, r3, #12
 8002c3c:	2a08      	cmp	r2, #8
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x10>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c40:	4814      	ldr	r0, [pc, #80]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002c42:	4770      	bx	lr
 8002c44:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c48:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c4c:	fab2 f282 	clz	r2, r2
 8002c50:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002c54:	fa21 f202 	lsr.w	r2, r1, r2
 8002c58:	490f      	ldr	r1, [pc, #60]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x64>)
 8002c5a:	5c88      	ldrb	r0, [r1, r2]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c5c:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002c5e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa92 f2a2 	rbit	r2, r2
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c66:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002c6a:	d00c      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x52>
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c6c:	fab2 f282 	clz	r2, r2
 8002c70:	f001 010f 	and.w	r1, r1, #15
 8002c74:	40d1      	lsrs	r1, r2
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x68>)
 8002c78:	5c5a      	ldrb	r2, [r3, r1]
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <HAL_RCC_GetSysClockFreq+0x60>)
 8002c7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c80:	fb03 f000 	mul.w	r0, r3, r0
 8002c84:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002c88:	fb03 f000 	mul.w	r0, r3, r0
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	007a1200 	.word	0x007a1200
 8002c98:	08005aa4 	.word	0x08005aa4
 8002c9c:	08005ab4 	.word	0x08005ab4
 8002ca0:	003d0900 	.word	0x003d0900

08002ca4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ca4:	2800      	cmp	r0, #0
 8002ca6:	f000 80b4 	beq.w	8002e12 <HAL_RCC_ClockConfig+0x16e>
{
 8002caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cae:	460d      	mov	r5, r1
 8002cb0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cb2:	4b5c      	ldr	r3, [pc, #368]	; (8002e24 <HAL_RCC_ClockConfig+0x180>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	428b      	cmp	r3, r1
 8002cbc:	d20b      	bcs.n	8002cd6 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cbe:	4a59      	ldr	r2, [pc, #356]	; (8002e24 <HAL_RCC_ClockConfig+0x180>)
 8002cc0:	6813      	ldr	r3, [r2, #0]
 8002cc2:	f023 0307 	bic.w	r3, r3, #7
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cca:	6813      	ldr	r3, [r2, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	428b      	cmp	r3, r1
 8002cd2:	f040 80a0 	bne.w	8002e16 <HAL_RCC_ClockConfig+0x172>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	f013 0f02 	tst.w	r3, #2
 8002cdc:	d006      	beq.n	8002cec <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cde:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_RCC_ClockConfig+0x184>)
 8002ce0:	6853      	ldr	r3, [r2, #4]
 8002ce2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce6:	68a1      	ldr	r1, [r4, #8]
 8002ce8:	430b      	orrs	r3, r1
 8002cea:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	f013 0f01 	tst.w	r3, #1
 8002cf2:	d04e      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xee>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf4:	6862      	ldr	r2, [r4, #4]
 8002cf6:	2a01      	cmp	r2, #1
 8002cf8:	d029      	beq.n	8002d4e <HAL_RCC_ClockConfig+0xaa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfa:	2a02      	cmp	r2, #2
 8002cfc:	d038      	beq.n	8002d70 <HAL_RCC_ClockConfig+0xcc>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d04:	4948      	ldr	r1, [pc, #288]	; (8002e28 <HAL_RCC_ClockConfig+0x184>)
 8002d06:	6808      	ldr	r0, [r1, #0]
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	2101      	movs	r1, #1
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	4203      	tst	r3, r0
 8002d18:	d07f      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x176>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d1a:	4943      	ldr	r1, [pc, #268]	; (8002e28 <HAL_RCC_ClockConfig+0x184>)
 8002d1c:	684b      	ldr	r3, [r1, #4]
 8002d1e:	f023 0303 	bic.w	r3, r3, #3
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002d26:	f7fe f84b 	bl	8000dc0 <HAL_GetTick>
 8002d2a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2c:	4f3e      	ldr	r7, [pc, #248]	; (8002e28 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	6862      	ldr	r2, [r4, #4]
 8002d3a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002d3e:	d028      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xee>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7fe f83e 	bl	8000dc0 <HAL_GetTick>
 8002d44:	1b80      	subs	r0, r0, r6
 8002d46:	4540      	cmp	r0, r8
 8002d48:	d9f3      	bls.n	8002d32 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002d4a:	2003      	movs	r0, #3
 8002d4c:	e05f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x16a>
 8002d4e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d52:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4934      	ldr	r1, [pc, #208]	; (8002e28 <HAL_RCC_ClockConfig+0x184>)
 8002d58:	6808      	ldr	r0, [r1, #0]
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	2101      	movs	r1, #1
 8002d64:	fa01 f303 	lsl.w	r3, r1, r3
 8002d68:	4203      	tst	r3, r0
 8002d6a:	d1d6      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	e04e      	b.n	8002e0e <HAL_RCC_ClockConfig+0x16a>
 8002d70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d74:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d78:	492b      	ldr	r1, [pc, #172]	; (8002e28 <HAL_RCC_ClockConfig+0x184>)
 8002d7a:	6808      	ldr	r0, [r1, #0]
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	fab3 f383 	clz	r3, r3
 8002d84:	2101      	movs	r1, #1
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	4203      	tst	r3, r0
 8002d8c:	d1c5      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x76>
        return HAL_ERROR;
 8002d8e:	2001      	movs	r0, #1
 8002d90:	e03d      	b.n	8002e0e <HAL_RCC_ClockConfig+0x16a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_ClockConfig+0x180>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	42ab      	cmp	r3, r5
 8002d9c:	d90a      	bls.n	8002db4 <HAL_RCC_ClockConfig+0x110>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4a21      	ldr	r2, [pc, #132]	; (8002e24 <HAL_RCC_ClockConfig+0x180>)
 8002da0:	6813      	ldr	r3, [r2, #0]
 8002da2:	f023 0307 	bic.w	r3, r3, #7
 8002da6:	432b      	orrs	r3, r5
 8002da8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	6813      	ldr	r3, [r2, #0]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	42ab      	cmp	r3, r5
 8002db2:	d134      	bne.n	8002e1e <HAL_RCC_ClockConfig+0x17a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	f013 0f04 	tst.w	r3, #4
 8002dba:	d006      	beq.n	8002dca <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	; (8002e28 <HAL_RCC_ClockConfig+0x184>)
 8002dbe:	6853      	ldr	r3, [r2, #4]
 8002dc0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dc4:	68e1      	ldr	r1, [r4, #12]
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	f013 0f08 	tst.w	r3, #8
 8002dd0:	d007      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x13e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd2:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <HAL_RCC_ClockConfig+0x184>)
 8002dd4:	6853      	ldr	r3, [r2, #4]
 8002dd6:	6921      	ldr	r1, [r4, #16]
 8002dd8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002ddc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002de0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002de2:	f7ff ff27 	bl	8002c34 <HAL_RCC_GetSysClockFreq>
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_RCC_ClockConfig+0x184>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	22f0      	movs	r2, #240	; 0xf0
 8002dec:	fa92 f2a2 	rbit	r2, r2
 8002df0:	fab2 f282 	clz	r2, r2
 8002df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df8:	40d3      	lsrs	r3, r2
 8002dfa:	4a0c      	ldr	r2, [pc, #48]	; (8002e2c <HAL_RCC_ClockConfig+0x188>)
 8002dfc:	5cd3      	ldrb	r3, [r2, r3]
 8002dfe:	40d8      	lsrs	r0, r3
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCC_ClockConfig+0x18c>)
 8002e02:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <HAL_RCC_ClockConfig+0x190>)
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	f7fd ff96 	bl	8000d38 <HAL_InitTick>
  return HAL_OK;
 8002e0c:	2000      	movs	r0, #0
}
 8002e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002e12:	2001      	movs	r0, #1
}
 8002e14:	4770      	bx	lr
      return HAL_ERROR;
 8002e16:	2001      	movs	r0, #1
 8002e18:	e7f9      	b.n	8002e0e <HAL_RCC_ClockConfig+0x16a>
        return HAL_ERROR;
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	e7f7      	b.n	8002e0e <HAL_RCC_ClockConfig+0x16a>
      return HAL_ERROR;
 8002e1e:	2001      	movs	r0, #1
 8002e20:	e7f5      	b.n	8002e0e <HAL_RCC_ClockConfig+0x16a>
 8002e22:	bf00      	nop
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	08005a94 	.word	0x08005a94
 8002e30:	20000050 	.word	0x20000050
 8002e34:	20000058 	.word	0x20000058

08002e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e3c:	b083      	sub	sp, #12
 8002e3e:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e40:	6803      	ldr	r3, [r0, #0]
 8002e42:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002e46:	d048      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xa2>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e48:	4b81      	ldr	r3, [pc, #516]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e50:	f040 80be 	bne.w	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	4b7e      	ldr	r3, [pc, #504]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e5c:	61da      	str	r2, [r3, #28]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e68:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6a:	4b7a      	ldr	r3, [pc, #488]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e72:	f000 80af 	beq.w	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e76:	4b76      	ldr	r3, [pc, #472]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002e78:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e7a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002e7e:	d022      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8002e80:	6862      	ldr	r2, [r4, #4]
 8002e82:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d01d      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e8a:	4871      	ldr	r0, [pc, #452]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002e8c:	6a01      	ldr	r1, [r0, #32]
 8002e8e:	f421 7540 	bic.w	r5, r1, #768	; 0x300
 8002e92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e96:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e9a:	fab2 f282 	clz	r2, r2
 8002e9e:	4f6e      	ldr	r7, [pc, #440]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8002ea0:	443a      	add	r2, r7
 8002ea2:	0092      	lsls	r2, r2, #2
 8002ea4:	f04f 0c01 	mov.w	ip, #1
 8002ea8:	f8c2 c000 	str.w	ip, [r2]
 8002eac:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eb0:	fab3 f383 	clz	r3, r3
 8002eb4:	443b      	add	r3, r7
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ebc:	6205      	str	r5, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ebe:	f011 0f01 	tst.w	r1, #1
 8002ec2:	f040 809c 	bne.w	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x1c6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ec6:	4a62      	ldr	r2, [pc, #392]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002ec8:	6a13      	ldr	r3, [r2, #32]
 8002eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ece:	6861      	ldr	r1, [r4, #4]
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ed4:	2e00      	cmp	r6, #0
 8002ed6:	f040 80b2 	bne.w	800303e <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eda:	6823      	ldr	r3, [r4, #0]
 8002edc:	f013 0f01 	tst.w	r3, #1
 8002ee0:	d006      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee2:	4a5b      	ldr	r2, [pc, #364]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002ee4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ee6:	f023 0303 	bic.w	r3, r3, #3
 8002eea:	68a1      	ldr	r1, [r4, #8]
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef0:	6823      	ldr	r3, [r4, #0]
 8002ef2:	f013 0f02 	tst.w	r3, #2
 8002ef6:	d006      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef8:	4a55      	ldr	r2, [pc, #340]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002efa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002efc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f00:	68e1      	ldr	r1, [r4, #12]
 8002f02:	430b      	orrs	r3, r1
 8002f04:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	f013 0f04 	tst.w	r3, #4
 8002f0c:	d006      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f0e:	4a50      	ldr	r2, [pc, #320]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002f10:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f12:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002f16:	6921      	ldr	r1, [r4, #16]
 8002f18:	430b      	orrs	r3, r1
 8002f1a:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	f013 0f20 	tst.w	r3, #32
 8002f22:	d006      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xfa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f24:	4a4a      	ldr	r2, [pc, #296]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002f26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f28:	f023 0310 	bic.w	r3, r3, #16
 8002f2c:	69e1      	ldr	r1, [r4, #28]
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f38:	d006      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f3a:	4a45      	ldr	r2, [pc, #276]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002f3c:	6853      	ldr	r3, [r2, #4]
 8002f3e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f42:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002f44:	430b      	orrs	r3, r1
 8002f46:	6053      	str	r3, [r2, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f48:	6823      	ldr	r3, [r4, #0]
 8002f4a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002f4e:	d006      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f50:	4a3f      	ldr	r2, [pc, #252]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002f52:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f54:	f023 0320 	bic.w	r3, r3, #32
 8002f58:	6a21      	ldr	r1, [r4, #32]
 8002f5a:	430b      	orrs	r3, r1
 8002f5c:	6313      	str	r3, [r2, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	f013 0f08 	tst.w	r3, #8
 8002f64:	d006      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f66:	4a3a      	ldr	r2, [pc, #232]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002f68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f6a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002f6e:	6961      	ldr	r1, [r4, #20]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f74:	6823      	ldr	r3, [r4, #0]
 8002f76:	f013 0f10 	tst.w	r3, #16
 8002f7a:	d006      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f7c:	4a34      	ldr	r2, [pc, #208]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002f7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002f80:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f84:	69a1      	ldr	r1, [r4, #24]
 8002f86:	430b      	orrs	r3, r1
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f90:	d006      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f92:	4a2f      	ldr	r2, [pc, #188]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002f94:	6853      	ldr	r3, [r2, #4]
 8002f96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f9c:	430b      	orrs	r3, r1
 8002f9e:	6053      	str	r3, [r2, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002fa6:	d006      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fa8:	4a29      	ldr	r2, [pc, #164]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002faa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002fac:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002fb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002fbc:	d044      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fbe:	4a24      	ldr	r2, [pc, #144]	; (8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8002fc0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002fc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fc6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fcc:	2000      	movs	r0, #0
 8002fce:	e03c      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x212>
  FlagStatus       pwrclkchanged = RESET;
 8002fd0:	2600      	movs	r6, #0
 8002fd2:	e74a      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x32>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd4:	4a1f      	ldr	r2, [pc, #124]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002fd6:	6813      	ldr	r3, [r2, #0]
 8002fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fdc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002fde:	f7fd feef 	bl	8000dc0 <HAL_GetTick>
 8002fe2:	4605      	mov	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe4:	4f1b      	ldr	r7, [pc, #108]	; (8003054 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002fec:	f47f af43 	bne.w	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x3e>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff0:	f7fd fee6 	bl	8000dc0 <HAL_GetTick>
 8002ff4:	1b40      	subs	r0, r0, r5
 8002ff6:	2864      	cmp	r0, #100	; 0x64
 8002ff8:	d9f5      	bls.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
          return HAL_TIMEOUT;
 8002ffa:	2003      	movs	r0, #3
 8002ffc:	e025      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x212>
        tickstart = HAL_GetTick();
 8002ffe:	f7fd fedf 	bl	8000dc0 <HAL_GetTick>
 8003002:	4607      	mov	r7, r0
 8003004:	2502      	movs	r5, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003050 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800300a:	f04f 0801 	mov.w	r8, #1
 800300e:	fa95 f3a5 	rbit	r3, r5
 8003012:	fa95 f3a5 	rbit	r3, r5
 8003016:	f8d9 2020 	ldr.w	r2, [r9, #32]
 800301a:	fa95 f3a5 	rbit	r3, r5
 800301e:	fab3 f383 	clz	r3, r3
 8003022:	fa08 f303 	lsl.w	r3, r8, r3
 8003026:	4213      	tst	r3, r2
 8003028:	f47f af4d 	bne.w	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302c:	f7fd fec8 	bl	8000dc0 <HAL_GetTick>
 8003030:	1bc0      	subs	r0, r0, r7
 8003032:	f241 3388 	movw	r3, #5000	; 0x1388
 8003036:	4298      	cmp	r0, r3
 8003038:	d9e9      	bls.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
            return HAL_TIMEOUT;
 800303a:	2003      	movs	r0, #3
 800303c:	e005      	b.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x212>
      __HAL_RCC_PWR_CLK_DISABLE();
 800303e:	69d3      	ldr	r3, [r2, #28]
 8003040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003044:	61d3      	str	r3, [r2, #28]
 8003046:	e748      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xa2>
  return HAL_OK;
 8003048:	2000      	movs	r0, #0
}
 800304a:	b003      	add	sp, #12
 800304c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003050:	40021000 	.word	0x40021000
 8003054:	40007000 	.word	0x40007000
 8003058:	10908100 	.word	0x10908100

0800305c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800305c:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800305e:	6a03      	ldr	r3, [r0, #32]
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003068:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800306a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800306c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003070:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003074:	680d      	ldr	r5, [r1, #0]
 8003076:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003078:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800307c:	688d      	ldr	r5, [r1, #8]
 800307e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003080:	4d1c      	ldr	r5, [pc, #112]	; (80030f4 <TIM_OC1_SetConfig+0x98>)
 8003082:	42a8      	cmp	r0, r5
 8003084:	d012      	beq.n	80030ac <TIM_OC1_SetConfig+0x50>
 8003086:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800308a:	42a8      	cmp	r0, r5
 800308c:	d023      	beq.n	80030d6 <TIM_OC1_SetConfig+0x7a>
 800308e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003092:	42a8      	cmp	r0, r5
 8003094:	d026      	beq.n	80030e4 <TIM_OC1_SetConfig+0x88>
 8003096:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800309a:	42a8      	cmp	r0, r5
 800309c:	d114      	bne.n	80030c8 <TIM_OC1_SetConfig+0x6c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800309e:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030a2:	68cd      	ldr	r5, [r1, #12]
 80030a4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030a6:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030aa:	e005      	b.n	80030b8 <TIM_OC1_SetConfig+0x5c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80030ac:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80030b0:	68cd      	ldr	r5, [r1, #12]
 80030b2:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80030b4:	f023 0304 	bic.w	r3, r3, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030b8:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030bc:	698d      	ldr	r5, [r1, #24]
 80030be:	694e      	ldr	r6, [r1, #20]
 80030c0:	ea46 0c05 	orr.w	ip, r6, r5
 80030c4:	ea4c 0404 	orr.w	r4, ip, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ca:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030cc:	684a      	ldr	r2, [r1, #4]
 80030ce:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d0:	6203      	str	r3, [r0, #32]
}
 80030d2:	bc70      	pop	{r4, r5, r6}
 80030d4:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 80030d6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80030da:	68cd      	ldr	r5, [r1, #12]
 80030dc:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80030de:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e2:	e7e9      	b.n	80030b8 <TIM_OC1_SetConfig+0x5c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80030e4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80030e8:	68cd      	ldr	r5, [r1, #12]
 80030ea:	432b      	orrs	r3, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ec:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f0:	e7e2      	b.n	80030b8 <TIM_OC1_SetConfig+0x5c>
 80030f2:	bf00      	nop
 80030f4:	40012c00 	.word	0x40012c00

080030f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f8:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030fa:	6a03      	ldr	r3, [r0, #32]
 80030fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003100:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003104:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003106:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003108:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800310c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003110:	680d      	ldr	r5, [r1, #0]
 8003112:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003118:	688d      	ldr	r5, [r1, #8]
 800311a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800311e:	4d12      	ldr	r5, [pc, #72]	; (8003168 <TIM_OC3_SetConfig+0x70>)
 8003120:	42a8      	cmp	r0, r5
 8003122:	d00a      	beq.n	800313a <TIM_OC3_SetConfig+0x42>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003124:	4d11      	ldr	r5, [pc, #68]	; (800316c <TIM_OC3_SetConfig+0x74>)
 8003126:	42a8      	cmp	r0, r5
 8003128:	d00e      	beq.n	8003148 <TIM_OC3_SetConfig+0x50>
 800312a:	4d11      	ldr	r5, [pc, #68]	; (8003170 <TIM_OC3_SetConfig+0x78>)
 800312c:	42a8      	cmp	r0, r5
 800312e:	d00b      	beq.n	8003148 <TIM_OC3_SetConfig+0x50>
 8003130:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003134:	42a8      	cmp	r0, r5
 8003136:	d10f      	bne.n	8003158 <TIM_OC3_SetConfig+0x60>
 8003138:	e006      	b.n	8003148 <TIM_OC3_SetConfig+0x50>
    tmpccer &= ~TIM_CCER_CC3NP;
 800313a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800313e:	68cd      	ldr	r5, [r1, #12]
 8003140:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8003144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003148:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800314c:	698d      	ldr	r5, [r1, #24]
 800314e:	694e      	ldr	r6, [r1, #20]
 8003150:	ea46 0c05 	orr.w	ip, r6, r5
 8003154:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003158:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800315a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800315c:	684a      	ldr	r2, [r1, #4]
 800315e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003160:	6203      	str	r3, [r0, #32]
}
 8003162:	bc70      	pop	{r4, r5, r6}
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40012c00 	.word	0x40012c00
 800316c:	40014000 	.word	0x40014000
 8003170:	40014400 	.word	0x40014400

08003174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003176:	6a03      	ldr	r3, [r0, #32]
 8003178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800317c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800317e:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003180:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003182:	69c3      	ldr	r3, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003188:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800318c:	680d      	ldr	r5, [r1, #0]
 800318e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003196:	688d      	ldr	r5, [r1, #8]
 8003198:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800319c:	4d0d      	ldr	r5, [pc, #52]	; (80031d4 <TIM_OC4_SetConfig+0x60>)
 800319e:	42a8      	cmp	r0, r5
 80031a0:	d00b      	beq.n	80031ba <TIM_OC4_SetConfig+0x46>
 80031a2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80031a6:	42a8      	cmp	r0, r5
 80031a8:	d007      	beq.n	80031ba <TIM_OC4_SetConfig+0x46>
 80031aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031ae:	42a8      	cmp	r0, r5
 80031b0:	d003      	beq.n	80031ba <TIM_OC4_SetConfig+0x46>
 80031b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80031b6:	42a8      	cmp	r0, r5
 80031b8:	d104      	bne.n	80031c4 <TIM_OC4_SetConfig+0x50>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031ba:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031be:	694d      	ldr	r5, [r1, #20]
 80031c0:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031c6:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031c8:	684b      	ldr	r3, [r1, #4]
 80031ca:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031cc:	6202      	str	r2, [r0, #32]
}
 80031ce:	bc30      	pop	{r4, r5}
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	40012c00 	.word	0x40012c00

080031d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80031d8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80031da:	6a03      	ldr	r3, [r0, #32]
 80031dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031e2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031e4:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031e6:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80031e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f0:	680d      	ldr	r5, [r1, #0]
 80031f2:	432b      	orrs	r3, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80031f4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80031f8:	688d      	ldr	r5, [r1, #8]
 80031fa:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031fe:	4d0d      	ldr	r5, [pc, #52]	; (8003234 <TIM_OC5_SetConfig+0x5c>)
 8003200:	42a8      	cmp	r0, r5
 8003202:	d00b      	beq.n	800321c <TIM_OC5_SetConfig+0x44>
 8003204:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8003208:	42a8      	cmp	r0, r5
 800320a:	d007      	beq.n	800321c <TIM_OC5_SetConfig+0x44>
 800320c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003210:	42a8      	cmp	r0, r5
 8003212:	d003      	beq.n	800321c <TIM_OC5_SetConfig+0x44>
 8003214:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003218:	42a8      	cmp	r0, r5
 800321a:	d104      	bne.n	8003226 <TIM_OC5_SetConfig+0x4e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800321c:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003220:	694d      	ldr	r5, [r1, #20]
 8003222:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003226:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003228:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800322a:	684b      	ldr	r3, [r1, #4]
 800322c:	6583      	str	r3, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322e:	6202      	str	r2, [r0, #32]
}
 8003230:	bc30      	pop	{r4, r5}
 8003232:	4770      	bx	lr
 8003234:	40012c00 	.word	0x40012c00

08003238 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003238:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800323a:	6a03      	ldr	r3, [r0, #32]
 800323c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003240:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003242:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003244:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003246:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800324c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003250:	680d      	ldr	r5, [r1, #0]
 8003252:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003256:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800325a:	688d      	ldr	r5, [r1, #8]
 800325c:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003260:	4d0d      	ldr	r5, [pc, #52]	; (8003298 <TIM_OC6_SetConfig+0x60>)
 8003262:	42a8      	cmp	r0, r5
 8003264:	d00b      	beq.n	800327e <TIM_OC6_SetConfig+0x46>
 8003266:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 800326a:	42a8      	cmp	r0, r5
 800326c:	d007      	beq.n	800327e <TIM_OC6_SetConfig+0x46>
 800326e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003272:	42a8      	cmp	r0, r5
 8003274:	d003      	beq.n	800327e <TIM_OC6_SetConfig+0x46>
 8003276:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800327a:	42a8      	cmp	r0, r5
 800327c:	d104      	bne.n	8003288 <TIM_OC6_SetConfig+0x50>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800327e:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003282:	694d      	ldr	r5, [r1, #20]
 8003284:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003288:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800328a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800328c:	684b      	ldr	r3, [r1, #4]
 800328e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003290:	6202      	str	r2, [r0, #32]
}
 8003292:	bc30      	pop	{r4, r5}
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40012c00 	.word	0x40012c00

0800329c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800329c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d12e      	bne.n	8003304 <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 80032a6:	2302      	movs	r3, #2
 80032a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032ac:	6802      	ldr	r2, [r0, #0]
 80032ae:	68d3      	ldr	r3, [r2, #12]
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b6:	6803      	ldr	r3, [r0, #0]
 80032b8:	4a15      	ldr	r2, [pc, #84]	; (8003310 <HAL_TIM_Base_Start_IT+0x74>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d014      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x4c>
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c2:	d011      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x4c>
 80032c4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00d      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x4c>
 80032cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d009      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x4c>
 80032d4:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80032d8:	4293      	cmp	r3, r2
 80032da:	d005      	beq.n	80032e8 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80032e4:	2000      	movs	r0, #0
 80032e6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <HAL_TIM_Base_Start_IT+0x78>)
 80032ec:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ee:	2a06      	cmp	r2, #6
 80032f0:	d00a      	beq.n	8003308 <HAL_TIM_Base_Start_IT+0x6c>
 80032f2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80032f6:	d009      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x70>
      __HAL_TIM_ENABLE(htim);
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003300:	2000      	movs	r0, #0
 8003302:	4770      	bx	lr
    return HAL_ERROR;
 8003304:	2001      	movs	r0, #1
 8003306:	4770      	bx	lr
  return HAL_OK;
 8003308:	2000      	movs	r0, #0
 800330a:	4770      	bx	lr
 800330c:	2000      	movs	r0, #0
}
 800330e:	4770      	bx	lr
 8003310:	40012c00 	.word	0x40012c00
 8003314:	00010007 	.word	0x00010007

08003318 <HAL_TIM_PWM_MspInit>:
}
 8003318:	4770      	bx	lr

0800331a <HAL_TIM_PeriodElapsedCallback>:
}
 800331a:	4770      	bx	lr

0800331c <HAL_TIM_OC_DelayElapsedCallback>:
}
 800331c:	4770      	bx	lr

0800331e <HAL_TIM_IC_CaptureCallback>:
}
 800331e:	4770      	bx	lr

08003320 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003320:	4770      	bx	lr

08003322 <HAL_TIM_TriggerCallback>:
}
 8003322:	4770      	bx	lr

08003324 <HAL_TIM_IRQHandler>:
{
 8003324:	b510      	push	{r4, lr}
 8003326:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003328:	6803      	ldr	r3, [r0, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	f012 0f02 	tst.w	r2, #2
 8003330:	d011      	beq.n	8003356 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	f012 0f02 	tst.w	r2, #2
 8003338:	d00d      	beq.n	8003356 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800333a:	f06f 0202 	mvn.w	r2, #2
 800333e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003340:	2301      	movs	r3, #1
 8003342:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003344:	6803      	ldr	r3, [r0, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	f013 0f03 	tst.w	r3, #3
 800334c:	d079      	beq.n	8003442 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 800334e:	f7ff ffe6 	bl	800331e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	2300      	movs	r3, #0
 8003354:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	f012 0f04 	tst.w	r2, #4
 800335e:	d012      	beq.n	8003386 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003360:	68da      	ldr	r2, [r3, #12]
 8003362:	f012 0f04 	tst.w	r2, #4
 8003366:	d00e      	beq.n	8003386 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003368:	f06f 0204 	mvn.w	r2, #4
 800336c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336e:	2302      	movs	r3, #2
 8003370:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003372:	6823      	ldr	r3, [r4, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f413 7f40 	tst.w	r3, #768	; 0x300
 800337a:	d068      	beq.n	800344e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800337c:	4620      	mov	r0, r4
 800337e:	f7ff ffce 	bl	800331e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003382:	2300      	movs	r3, #0
 8003384:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	691a      	ldr	r2, [r3, #16]
 800338a:	f012 0f08 	tst.w	r2, #8
 800338e:	d012      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	f012 0f08 	tst.w	r2, #8
 8003396:	d00e      	beq.n	80033b6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003398:	f06f 0208 	mvn.w	r2, #8
 800339c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800339e:	2304      	movs	r3, #4
 80033a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033a2:	6823      	ldr	r3, [r4, #0]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f013 0f03 	tst.w	r3, #3
 80033aa:	d057      	beq.n	800345c <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 80033ac:	4620      	mov	r0, r4
 80033ae:	f7ff ffb6 	bl	800331e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	2300      	movs	r3, #0
 80033b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	f012 0f10 	tst.w	r2, #16
 80033be:	d012      	beq.n	80033e6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	f012 0f10 	tst.w	r2, #16
 80033c6:	d00e      	beq.n	80033e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033c8:	f06f 0210 	mvn.w	r2, #16
 80033cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ce:	2308      	movs	r3, #8
 80033d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80033da:	d046      	beq.n	800346a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80033dc:	4620      	mov	r0, r4
 80033de:	f7ff ff9e 	bl	800331e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	2300      	movs	r3, #0
 80033e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	f012 0f01 	tst.w	r2, #1
 80033ee:	d003      	beq.n	80033f8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	f012 0f01 	tst.w	r2, #1
 80033f6:	d13f      	bne.n	8003478 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003408:	d13d      	bne.n	8003486 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800340a:	6823      	ldr	r3, [r4, #0]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003412:	d003      	beq.n	800341c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	f012 0f80 	tst.w	r2, #128	; 0x80
 800341a:	d13b      	bne.n	8003494 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003424:	d003      	beq.n	800342e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	f012 0f40 	tst.w	r2, #64	; 0x40
 800342c:	d139      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800342e:	6823      	ldr	r3, [r4, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	f012 0f20 	tst.w	r2, #32
 8003436:	d003      	beq.n	8003440 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	f012 0f20 	tst.w	r2, #32
 800343e:	d137      	bne.n	80034b0 <HAL_TIM_IRQHandler+0x18c>
}
 8003440:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	f7ff ff6b 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003446:	4620      	mov	r0, r4
 8003448:	f7ff ff6a 	bl	8003320 <HAL_TIM_PWM_PulseFinishedCallback>
 800344c:	e781      	b.n	8003352 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff ff64 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	4620      	mov	r0, r4
 8003456:	f7ff ff63 	bl	8003320 <HAL_TIM_PWM_PulseFinishedCallback>
 800345a:	e792      	b.n	8003382 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345c:	4620      	mov	r0, r4
 800345e:	f7ff ff5d 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003462:	4620      	mov	r0, r4
 8003464:	f7ff ff5c 	bl	8003320 <HAL_TIM_PWM_PulseFinishedCallback>
 8003468:	e7a3      	b.n	80033b2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346a:	4620      	mov	r0, r4
 800346c:	f7ff ff56 	bl	800331c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003470:	4620      	mov	r0, r4
 8003472:	f7ff ff55 	bl	8003320 <HAL_TIM_PWM_PulseFinishedCallback>
 8003476:	e7b4      	b.n	80033e2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003478:	f06f 0201 	mvn.w	r2, #1
 800347c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800347e:	4620      	mov	r0, r4
 8003480:	f7ff ff4b 	bl	800331a <HAL_TIM_PeriodElapsedCallback>
 8003484:	e7b8      	b.n	80033f8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003486:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800348a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800348c:	4620      	mov	r0, r4
 800348e:	f000 fada 	bl	8003a46 <HAL_TIMEx_BreakCallback>
 8003492:	e7ba      	b.n	800340a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003494:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003498:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800349a:	4620      	mov	r0, r4
 800349c:	f000 fad4 	bl	8003a48 <HAL_TIMEx_Break2Callback>
 80034a0:	e7bc      	b.n	800341c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034a6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80034a8:	4620      	mov	r0, r4
 80034aa:	f7ff ff3a 	bl	8003322 <HAL_TIM_TriggerCallback>
 80034ae:	e7be      	b.n	800342e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034b0:	f06f 0220 	mvn.w	r2, #32
 80034b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80034b6:	4620      	mov	r0, r4
 80034b8:	f000 fac4 	bl	8003a44 <HAL_TIMEx_CommutCallback>
}
 80034bc:	e7c0      	b.n	8003440 <HAL_TIM_IRQHandler+0x11c>
	...

080034c0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80034c0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034c2:	4a40      	ldr	r2, [pc, #256]	; (80035c4 <TIM_Base_SetConfig+0x104>)
 80034c4:	4290      	cmp	r0, r2
 80034c6:	d04a      	beq.n	800355e <TIM_Base_SetConfig+0x9e>
 80034c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80034cc:	d05d      	beq.n	800358a <TIM_Base_SetConfig+0xca>
 80034ce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80034d2:	4290      	cmp	r0, r2
 80034d4:	d070      	beq.n	80035b8 <TIM_Base_SetConfig+0xf8>
 80034d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034da:	4290      	cmp	r0, r2
 80034dc:	d067      	beq.n	80035ae <TIM_Base_SetConfig+0xee>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034de:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80034e2:	4290      	cmp	r0, r2
 80034e4:	d02d      	beq.n	8003542 <TIM_Base_SetConfig+0x82>
 80034e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034ea:	4290      	cmp	r0, r2
 80034ec:	d00d      	beq.n	800350a <TIM_Base_SetConfig+0x4a>
 80034ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034f2:	4290      	cmp	r0, r2
 80034f4:	d017      	beq.n	8003526 <TIM_Base_SetConfig+0x66>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034fa:	694a      	ldr	r2, [r1, #20]
 80034fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80034fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003500:	688b      	ldr	r3, [r1, #8]
 8003502:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003504:	680b      	ldr	r3, [r1, #0]
 8003506:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003508:	e03c      	b.n	8003584 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~TIM_CR1_CKD;
 800350a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800350e:	68ca      	ldr	r2, [r1, #12]
 8003510:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003516:	694a      	ldr	r2, [r1, #20]
 8003518:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800351a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800351c:	688b      	ldr	r3, [r1, #8]
 800351e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003520:	680b      	ldr	r3, [r1, #0]
 8003522:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003524:	e02c      	b.n	8003580 <TIM_Base_SetConfig+0xc0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352a:	68ca      	ldr	r2, [r1, #12]
 800352c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800352e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003532:	694a      	ldr	r2, [r1, #20]
 8003534:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003536:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003538:	688b      	ldr	r3, [r1, #8]
 800353a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800353c:	680b      	ldr	r3, [r1, #0]
 800353e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003540:	e01e      	b.n	8003580 <TIM_Base_SetConfig+0xc0>
    tmpcr1 &= ~TIM_CR1_CKD;
 8003542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003546:	68ca      	ldr	r2, [r1, #12]
 8003548:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800354a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800354e:	694a      	ldr	r2, [r1, #20]
 8003550:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003552:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003554:	688b      	ldr	r3, [r1, #8]
 8003556:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003558:	680b      	ldr	r3, [r1, #0]
 800355a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800355c:	e010      	b.n	8003580 <TIM_Base_SetConfig+0xc0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003562:	684a      	ldr	r2, [r1, #4]
 8003564:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800356a:	68ca      	ldr	r2, [r1, #12]
 800356c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800356e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003572:	694a      	ldr	r2, [r1, #20]
 8003574:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003576:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003578:	688b      	ldr	r3, [r1, #8]
 800357a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800357c:	680b      	ldr	r3, [r1, #0]
 800357e:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003580:	690b      	ldr	r3, [r1, #16]
 8003582:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003584:	2301      	movs	r3, #1
 8003586:	6143      	str	r3, [r0, #20]
}
 8003588:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800358a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800358e:	684a      	ldr	r2, [r1, #4]
 8003590:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8003592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	68ca      	ldr	r2, [r1, #12]
 8003598:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800359a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800359e:	694a      	ldr	r2, [r1, #20]
 80035a0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80035a2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a4:	688b      	ldr	r3, [r1, #8]
 80035a6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035a8:	680b      	ldr	r3, [r1, #0]
 80035aa:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ac:	e7ea      	b.n	8003584 <TIM_Base_SetConfig+0xc4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80035b2:	684a      	ldr	r2, [r1, #4]
 80035b4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	e7ec      	b.n	8003592 <TIM_Base_SetConfig+0xd2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80035bc:	684a      	ldr	r2, [r1, #4]
 80035be:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c0:	e7e7      	b.n	8003592 <TIM_Base_SetConfig+0xd2>
 80035c2:	bf00      	nop
 80035c4:	40012c00 	.word	0x40012c00

080035c8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80035c8:	b360      	cbz	r0, 8003624 <HAL_TIM_Base_Init+0x5c>
{
 80035ca:	b510      	push	{r4, lr}
 80035cc:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80035ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035d2:	b313      	cbz	r3, 800361a <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80035d4:	2302      	movs	r3, #2
 80035d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035da:	4621      	mov	r1, r4
 80035dc:	f851 0b04 	ldr.w	r0, [r1], #4
 80035e0:	f7ff ff6e 	bl	80034c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80035ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80035f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80035f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80035fa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003602:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003606:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800360a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800360e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003612:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003616:	2000      	movs	r0, #0
}
 8003618:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800361a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800361e:	f7fd f9d9 	bl	80009d4 <HAL_TIM_Base_MspInit>
 8003622:	e7d7      	b.n	80035d4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003624:	2001      	movs	r0, #1
}
 8003626:	4770      	bx	lr

08003628 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003628:	b360      	cbz	r0, 8003684 <HAL_TIM_PWM_Init+0x5c>
{
 800362a:	b510      	push	{r4, lr}
 800362c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800362e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003632:	b313      	cbz	r3, 800367a <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	2302      	movs	r3, #2
 8003636:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800363a:	4621      	mov	r1, r4
 800363c:	f851 0b04 	ldr.w	r0, [r1], #4
 8003640:	f7ff ff3e 	bl	80034c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003644:	2301      	movs	r3, #1
 8003646:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800364e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003652:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003656:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800365a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800365e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003662:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800366a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800366e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003672:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003676:	2000      	movs	r0, #0
}
 8003678:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800367a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800367e:	f7ff fe4b 	bl	8003318 <HAL_TIM_PWM_MspInit>
 8003682:	e7d7      	b.n	8003634 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8003684:	2001      	movs	r0, #1
}
 8003686:	4770      	bx	lr

08003688 <TIM_OC2_SetConfig>:
{
 8003688:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800368a:	6a03      	ldr	r3, [r0, #32]
 800368c:	f023 0310 	bic.w	r3, r3, #16
 8003690:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003692:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003694:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003696:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003698:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800369c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	680d      	ldr	r5, [r1, #0]
 80036a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80036a6:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036aa:	688d      	ldr	r5, [r1, #8]
 80036ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036b0:	4d11      	ldr	r5, [pc, #68]	; (80036f8 <TIM_OC2_SetConfig+0x70>)
 80036b2:	42a8      	cmp	r0, r5
 80036b4:	d00a      	beq.n	80036cc <TIM_OC2_SetConfig+0x44>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b6:	4d11      	ldr	r5, [pc, #68]	; (80036fc <TIM_OC2_SetConfig+0x74>)
 80036b8:	42a8      	cmp	r0, r5
 80036ba:	d00e      	beq.n	80036da <TIM_OC2_SetConfig+0x52>
 80036bc:	4d10      	ldr	r5, [pc, #64]	; (8003700 <TIM_OC2_SetConfig+0x78>)
 80036be:	42a8      	cmp	r0, r5
 80036c0:	d00b      	beq.n	80036da <TIM_OC2_SetConfig+0x52>
 80036c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80036c6:	42a8      	cmp	r0, r5
 80036c8:	d10f      	bne.n	80036ea <TIM_OC2_SetConfig+0x62>
 80036ca:	e006      	b.n	80036da <TIM_OC2_SetConfig+0x52>
    tmpccer &= ~TIM_CCER_CC2NP;
 80036cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d0:	68cd      	ldr	r5, [r1, #12]
 80036d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80036d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036da:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036de:	698d      	ldr	r5, [r1, #24]
 80036e0:	694e      	ldr	r6, [r1, #20]
 80036e2:	ea46 0c05 	orr.w	ip, r6, r5
 80036e6:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CR2 = tmpcr2;
 80036ea:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80036ec:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80036ee:	684a      	ldr	r2, [r1, #4]
 80036f0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80036f2:	6203      	str	r3, [r0, #32]
}
 80036f4:	bc70      	pop	{r4, r5, r6}
 80036f6:	4770      	bx	lr
 80036f8:	40012c00 	.word	0x40012c00
 80036fc:	40014000 	.word	0x40014000
 8003700:	40014400 	.word	0x40014400

08003704 <HAL_TIM_PWM_ConfigChannel>:
{
 8003704:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8003706:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	f000 8095 	beq.w	800383a <HAL_TIM_PWM_ConfigChannel+0x136>
 8003710:	4604      	mov	r4, r0
 8003712:	460d      	mov	r5, r1
 8003714:	2301      	movs	r3, #1
 8003716:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800371a:	2a14      	cmp	r2, #20
 800371c:	f200 8088 	bhi.w	8003830 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8003720:	e8df f002 	tbb	[pc, r2]
 8003724:	8686860b 	.word	0x8686860b
 8003728:	8686861f 	.word	0x8686861f
 800372c:	86868634 	.word	0x86868634
 8003730:	86868648 	.word	0x86868648
 8003734:	8686865d 	.word	0x8686865d
 8003738:	71          	.byte	0x71
 8003739:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800373a:	6800      	ldr	r0, [r0, #0]
 800373c:	f7ff fc8e 	bl	800305c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003740:	6822      	ldr	r2, [r4, #0]
 8003742:	6993      	ldr	r3, [r2, #24]
 8003744:	f043 0308 	orr.w	r3, r3, #8
 8003748:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800374a:	6822      	ldr	r2, [r4, #0]
 800374c:	6993      	ldr	r3, [r2, #24]
 800374e:	f023 0304 	bic.w	r3, r3, #4
 8003752:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003754:	6822      	ldr	r2, [r4, #0]
 8003756:	6993      	ldr	r3, [r2, #24]
 8003758:	6929      	ldr	r1, [r5, #16]
 800375a:	430b      	orrs	r3, r1
 800375c:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800375e:	2000      	movs	r0, #0
      break;
 8003760:	e067      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003762:	6800      	ldr	r0, [r0, #0]
 8003764:	f7ff ff90 	bl	8003688 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003768:	6822      	ldr	r2, [r4, #0]
 800376a:	6993      	ldr	r3, [r2, #24]
 800376c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003770:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003772:	6822      	ldr	r2, [r4, #0]
 8003774:	6993      	ldr	r3, [r2, #24]
 8003776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800377a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800377c:	6822      	ldr	r2, [r4, #0]
 800377e:	6993      	ldr	r3, [r2, #24]
 8003780:	6929      	ldr	r1, [r5, #16]
 8003782:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003786:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8003788:	2000      	movs	r0, #0
      break;
 800378a:	e052      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800378c:	6800      	ldr	r0, [r0, #0]
 800378e:	f7ff fcb3 	bl	80030f8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003792:	6822      	ldr	r2, [r4, #0]
 8003794:	69d3      	ldr	r3, [r2, #28]
 8003796:	f043 0308 	orr.w	r3, r3, #8
 800379a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800379c:	6822      	ldr	r2, [r4, #0]
 800379e:	69d3      	ldr	r3, [r2, #28]
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	69d3      	ldr	r3, [r2, #28]
 80037aa:	6929      	ldr	r1, [r5, #16]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2000      	movs	r0, #0
      break;
 80037b2:	e03e      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037b4:	6800      	ldr	r0, [r0, #0]
 80037b6:	f7ff fcdd 	bl	8003174 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ba:	6822      	ldr	r2, [r4, #0]
 80037bc:	69d3      	ldr	r3, [r2, #28]
 80037be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037c2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037c4:	6822      	ldr	r2, [r4, #0]
 80037c6:	69d3      	ldr	r3, [r2, #28]
 80037c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037cc:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	69d3      	ldr	r3, [r2, #28]
 80037d2:	6929      	ldr	r1, [r5, #16]
 80037d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037d8:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2000      	movs	r0, #0
      break;
 80037dc:	e029      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037de:	6800      	ldr	r0, [r0, #0]
 80037e0:	f7ff fcfa 	bl	80031d8 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037e4:	6822      	ldr	r2, [r4, #0]
 80037e6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80037e8:	f043 0308 	orr.w	r3, r3, #8
 80037ec:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037ee:	6822      	ldr	r2, [r4, #0]
 80037f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80037f2:	f023 0304 	bic.w	r3, r3, #4
 80037f6:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80037f8:	6822      	ldr	r2, [r4, #0]
 80037fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80037fc:	6929      	ldr	r1, [r5, #16]
 80037fe:	430b      	orrs	r3, r1
 8003800:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8003802:	2000      	movs	r0, #0
      break;
 8003804:	e015      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003806:	6800      	ldr	r0, [r0, #0]
 8003808:	f7ff fd16 	bl	8003238 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800380c:	6822      	ldr	r2, [r4, #0]
 800380e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003814:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003816:	6822      	ldr	r2, [r4, #0]
 8003818:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800381a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800381e:	6553      	str	r3, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003824:	6929      	ldr	r1, [r5, #16]
 8003826:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800382a:	6553      	str	r3, [r2, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 800382c:	2000      	movs	r0, #0
      break;
 800382e:	e000      	b.n	8003832 <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8003830:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8003832:	2300      	movs	r3, #0
 8003834:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003838:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800383a:	2002      	movs	r0, #2
 800383c:	e7fc      	b.n	8003838 <HAL_TIM_PWM_ConfigChannel+0x134>

0800383e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800383e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003840:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003842:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003846:	430a      	orrs	r2, r1
 8003848:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 800384c:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003850:	6082      	str	r2, [r0, #8]
}
 8003852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_TIM_ConfigClockSource>:
{
 8003858:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800385a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800385e:	2b01      	cmp	r3, #1
 8003860:	f000 80ab 	beq.w	80039ba <HAL_TIM_ConfigClockSource+0x162>
 8003864:	4604      	mov	r4, r0
 8003866:	2301      	movs	r3, #1
 8003868:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800386c:	2302      	movs	r3, #2
 800386e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8003872:	6802      	ldr	r2, [r0, #0]
 8003874:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003876:	4b52      	ldr	r3, [pc, #328]	; (80039c0 <HAL_TIM_ConfigClockSource+0x168>)
 8003878:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 800387a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800387c:	680b      	ldr	r3, [r1, #0]
 800387e:	2b60      	cmp	r3, #96	; 0x60
 8003880:	d060      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0xec>
 8003882:	d83d      	bhi.n	8003900 <HAL_TIM_ConfigClockSource+0xa8>
 8003884:	2b40      	cmp	r3, #64	; 0x40
 8003886:	d079      	beq.n	800397c <HAL_TIM_ConfigClockSource+0x124>
 8003888:	d91c      	bls.n	80038c4 <HAL_TIM_ConfigClockSource+0x6c>
 800388a:	2b50      	cmp	r3, #80	; 0x50
 800388c:	d136      	bne.n	80038fc <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800388e:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8003890:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003892:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003894:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003896:	6a1a      	ldr	r2, [r3, #32]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80038ac:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80038ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b0:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b2:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80038b4:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ba:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80038be:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80038c0:	2000      	movs	r0, #0
}
 80038c2:	e012      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d002      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x76>
 80038c8:	d90b      	bls.n	80038e2 <HAL_TIM_ConfigClockSource+0x8a>
 80038ca:	2b30      	cmp	r3, #48	; 0x30
 80038cc:	d114      	bne.n	80038f8 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ce:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80038d0:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80038d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80038dc:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80038de:	2000      	movs	r0, #0
}
 80038e0:	e003      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80038e2:	f033 0210 	bics.w	r2, r3, #16
 80038e6:	d0f2      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x76>
 80038e8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80038f0:	2300      	movs	r3, #0
 80038f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80038f8:	2001      	movs	r0, #1
 80038fa:	e7f6      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
 80038fc:	2001      	movs	r0, #1
 80038fe:	e7f4      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003904:	d055      	beq.n	80039b2 <HAL_TIM_ConfigClockSource+0x15a>
 8003906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390a:	d10c      	bne.n	8003926 <HAL_TIM_ConfigClockSource+0xce>
      TIM_ETR_SetConfig(htim->Instance,
 800390c:	68cb      	ldr	r3, [r1, #12]
 800390e:	684a      	ldr	r2, [r1, #4]
 8003910:	6889      	ldr	r1, [r1, #8]
 8003912:	6820      	ldr	r0, [r4, #0]
 8003914:	f7ff ff93 	bl	800383e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003918:	6822      	ldr	r2, [r4, #0]
 800391a:	6893      	ldr	r3, [r2, #8]
 800391c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003920:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003922:	2000      	movs	r0, #0
      break;
 8003924:	e7e1      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8003926:	2b70      	cmp	r3, #112	; 0x70
 8003928:	d145      	bne.n	80039b6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800392a:	68cb      	ldr	r3, [r1, #12]
 800392c:	684a      	ldr	r2, [r1, #4]
 800392e:	6889      	ldr	r1, [r1, #8]
 8003930:	6820      	ldr	r0, [r4, #0]
 8003932:	f7ff ff84 	bl	800383e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800393a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800393e:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003940:	2000      	movs	r0, #0
      break;
 8003942:	e7d2      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003944:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8003946:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003948:	68cd      	ldr	r5, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800394a:	6a1a      	ldr	r2, [r3, #32]
 800394c:	f022 0210 	bic.w	r2, r2, #16
 8003950:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003952:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003954:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003956:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800395a:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800395e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003962:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003966:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003968:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800396a:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800396c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800396e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003972:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003976:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003978:	2000      	movs	r0, #0
}
 800397a:	e7b6      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800397c:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 800397e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003980:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8003982:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800398c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800398e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003992:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003996:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800399a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800399c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800399e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039a0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80039a2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039a8:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80039ac:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039ae:	2000      	movs	r0, #0
}
 80039b0:	e79b      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
  HAL_StatusTypeDef status = HAL_OK;
 80039b2:	2000      	movs	r0, #0
 80039b4:	e799      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80039b6:	2001      	movs	r0, #1
 80039b8:	e797      	b.n	80038ea <HAL_TIM_ConfigClockSource+0x92>
  __HAL_LOCK(htim);
 80039ba:	2002      	movs	r0, #2
 80039bc:	e79b      	b.n	80038f6 <HAL_TIM_ConfigClockSource+0x9e>
 80039be:	bf00      	nop
 80039c0:	fffe0088 	.word	0xfffe0088

080039c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039c4:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80039c8:	2a01      	cmp	r2, #1
 80039ca:	d037      	beq.n	8003a3c <HAL_TIMEx_MasterConfigSynchronization+0x78>
{
 80039cc:	b430      	push	{r4, r5}
 80039ce:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80039d0:	2201      	movs	r2, #1
 80039d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d6:	2202      	movs	r2, #2
 80039d8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039dc:	6804      	ldr	r4, [r0, #0]
 80039de:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e0:	68a0      	ldr	r0, [r4, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039e2:	4d17      	ldr	r5, [pc, #92]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80039e4:	42ac      	cmp	r4, r5
 80039e6:	d024      	beq.n	8003a32 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ec:	680d      	ldr	r5, [r1, #0]
 80039ee:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f0:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4c12      	ldr	r4, [pc, #72]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0x7c>)
 80039f6:	42a2      	cmp	r2, r4
 80039f8:	d00e      	beq.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80039fa:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80039fe:	d00b      	beq.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003a00:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003a04:	42a2      	cmp	r2, r4
 8003a06:	d007      	beq.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003a08:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003a0c:	42a2      	cmp	r2, r4
 8003a0e:	d003      	beq.n	8003a18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8003a10:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 8003a14:	42a2      	cmp	r2, r4
 8003a16:	d104      	bne.n	8003a22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a18:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a1c:	6889      	ldr	r1, [r1, #8]
 8003a1e:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a20:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a28:	2000      	movs	r0, #0
 8003a2a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8003a2e:	bc30      	pop	{r4, r5}
 8003a30:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a36:	684d      	ldr	r5, [r1, #4]
 8003a38:	432a      	orrs	r2, r5
 8003a3a:	e7d5      	b.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 8003a3c:	2002      	movs	r0, #2
}
 8003a3e:	4770      	bx	lr
 8003a40:	40012c00 	.word	0x40012c00

08003a44 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a44:	4770      	bx	lr

08003a46 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a48:	4770      	bx	lr

08003a4a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003a4a:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003a52:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8003a56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
}
 8003a5a:	4770      	bx	lr

08003a5c <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a5c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8003a60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003a64:	045b      	lsls	r3, r3, #17
 8003a66:	0c5b      	lsrs	r3, r3, #17
 8003a68:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	4770      	bx	lr

08003a70 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a70:	b084      	sub	sp, #16
 8003a72:	4684      	mov	ip, r0
 8003a74:	a801      	add	r0, sp, #4
 8003a76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f8ac 3040 	strh.w	r3, [ip, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a80:	2000      	movs	r0, #0
 8003a82:	f8ac 0040 	strh.w	r0, [ip, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a86:	f8ac 0044 	strh.w	r0, [ip, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a8a:	f8ac 0050 	strh.w	r0, [ip, #80]	; 0x50

  return HAL_OK;
}
 8003a8e:	b004      	add	sp, #16
 8003a90:	4770      	bx	lr

08003a92 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a92:	b530      	push	{r4, r5, lr}
 8003a94:	4603      	mov	r3, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a96:	f891 e000 	ldrb.w	lr, [r1]
 8003a9a:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8003aa4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003aa8:	b292      	uxth	r2, r2

  /* initialize Endpoint */
  switch (ep->type)
 8003aaa:	78c8      	ldrb	r0, [r1, #3]
 8003aac:	2803      	cmp	r0, #3
 8003aae:	d863      	bhi.n	8003b78 <USB_ActivateEndpoint+0xe6>
 8003ab0:	e8df f000 	tbb	[pc, r0]
 8003ab4:	5a025e57 	.word	0x5a025e57
 8003ab8:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003aba:	f248 0c80 	movw	ip, #32896	; 0x8080
 8003abe:	ea42 020c 	orr.w	r2, r2, ip
 8003ac2:	f823 202e 	strh.w	r2, [r3, lr, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003ac6:	f891 e000 	ldrb.w	lr, [r1]
 8003aca:	f833 202e 	ldrh.w	r2, [r3, lr, lsl #2]
 8003ace:	b292      	uxth	r2, r2
 8003ad0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003ad4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003ad8:	ea42 020e 	orr.w	r2, r2, lr
 8003adc:	ea4c 0c02 	orr.w	ip, ip, r2
 8003ae0:	f823 c02e 	strh.w	ip, [r3, lr, lsl #2]

  if (ep->doublebuffer == 0U)
 8003ae4:	7b0a      	ldrb	r2, [r1, #12]
 8003ae6:	2a00      	cmp	r2, #0
 8003ae8:	f040 80cb 	bne.w	8003c82 <USB_ActivateEndpoint+0x1f0>
  {
    if (ep->is_in != 0U)
 8003aec:	784a      	ldrb	r2, [r1, #1]
 8003aee:	2a00      	cmp	r2, #0
 8003af0:	d044      	beq.n	8003b7c <USB_ActivateEndpoint+0xea>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003af2:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8003af6:	fa1f fe8e 	uxth.w	lr, lr
 8003afa:	780a      	ldrb	r2, [r1, #0]
 8003afc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003b00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003b04:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8003b08:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003b0c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003b10:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b14:	780c      	ldrb	r4, [r1, #0]
 8003b16:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b1a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003b1e:	d00c      	beq.n	8003b3a <USB_ActivateEndpoint+0xa8>
 8003b20:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003b24:	b292      	uxth	r2, r2
 8003b26:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003b2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003b2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b32:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003b36:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003b3a:	78ca      	ldrb	r2, [r1, #3]
 8003b3c:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003b3e:	7809      	ldrb	r1, [r1, #0]
 8003b40:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003b44:	b292      	uxth	r2, r2
 8003b46:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b4e:	bf18      	it	ne
 8003b50:	f082 0220 	eorne.w	r2, r2, #32
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003b5c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8003b60:	bd30      	pop	{r4, r5, pc}
      wEpRegVal |= USB_EP_CONTROL;
 8003b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 8003b66:	e7a8      	b.n	8003aba <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_INTERRUPT;
 8003b68:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 8003b6c:	2000      	movs	r0, #0
      break;
 8003b6e:	e7a4      	b.n	8003aba <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  HAL_StatusTypeDef ret = HAL_OK;
 8003b74:	2000      	movs	r0, #0
      break;
 8003b76:	e7a0      	b.n	8003aba <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8003b78:	2001      	movs	r0, #1
 8003b7a:	e79e      	b.n	8003aba <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b7c:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8003b80:	fa1f fe8e 	uxth.w	lr, lr
 8003b84:	780a      	ldrb	r2, [r1, #0]
 8003b86:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003b8a:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8003b8e:	f8b1 c006 	ldrh.w	ip, [r1, #6]
 8003b92:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003b96:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003b9a:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b9e:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8003ba2:	fa1f fe8e 	uxth.w	lr, lr
 8003ba6:	780a      	ldrb	r2, [r1, #0]
 8003ba8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003bac:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8003bb0:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8003bb4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003bb8:	f822 c00e 	strh.w	ip, [r2, lr]
 8003bbc:	690c      	ldr	r4, [r1, #16]
 8003bbe:	2c3e      	cmp	r4, #62	; 0x3e
 8003bc0:	d936      	bls.n	8003c30 <USB_ActivateEndpoint+0x19e>
 8003bc2:	0965      	lsrs	r5, r4, #5
 8003bc4:	f014 0f1f 	tst.w	r4, #31
 8003bc8:	bf08      	it	eq
 8003bca:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8003bce:	f832 c00e 	ldrh.w	ip, [r2, lr]
 8003bd2:	fa1f fc8c 	uxth.w	ip, ip
 8003bd6:	ea4c 2c85 	orr.w	ip, ip, r5, lsl #10
 8003bda:	ea6f 4c4c 	mvn.w	ip, ip, lsl #17
 8003bde:	ea6f 4c5c 	mvn.w	ip, ip, lsr #17
 8003be2:	fa1f fc8c 	uxth.w	ip, ip
 8003be6:	f822 c00e 	strh.w	ip, [r2, lr]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003bea:	780c      	ldrb	r4, [r1, #0]
 8003bec:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003bf0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003bf4:	d00c      	beq.n	8003c10 <USB_ActivateEndpoint+0x17e>
 8003bf6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003bfa:	b292      	uxth	r2, r2
 8003bfc:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003c00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c04:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003c08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c0c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->num == 0U)
 8003c10:	7809      	ldrb	r1, [r1, #0]
 8003c12:	bb31      	cbnz	r1, 8003c62 <USB_ActivateEndpoint+0x1d0>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c14:	881a      	ldrh	r2, [r3, #0]
 8003c16:	b292      	uxth	r2, r2
 8003c18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c20:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003c24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c2c:	801a      	strh	r2, [r3, #0]
 8003c2e:	e797      	b.n	8003b60 <USB_ActivateEndpoint+0xce>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003c30:	b94c      	cbnz	r4, 8003c46 <USB_ActivateEndpoint+0x1b4>
 8003c32:	f832 400e 	ldrh.w	r4, [r2, lr]
 8003c36:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8003c3a:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8003c3e:	b2a4      	uxth	r4, r4
 8003c40:	f822 400e 	strh.w	r4, [r2, lr]
 8003c44:	e7d1      	b.n	8003bea <USB_ActivateEndpoint+0x158>
 8003c46:	0865      	lsrs	r5, r4, #1
 8003c48:	f014 0f01 	tst.w	r4, #1
 8003c4c:	bf18      	it	ne
 8003c4e:	3501      	addne	r5, #1
 8003c50:	f832 400e 	ldrh.w	r4, [r2, lr]
 8003c54:	b2a4      	uxth	r4, r4
 8003c56:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8003c5a:	b2a4      	uxth	r4, r4
 8003c5c:	f822 400e 	strh.w	r4, [r2, lr]
 8003c60:	e7c3      	b.n	8003bea <USB_ActivateEndpoint+0x158>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003c62:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003c66:	b292      	uxth	r2, r2
 8003c68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c6c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c70:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8003c74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c7c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003c80:	e76e      	b.n	8003b60 <USB_ActivateEndpoint+0xce>
    if (ep->type == EP_TYPE_BULK)
 8003c82:	78ca      	ldrb	r2, [r1, #3]
 8003c84:	2a02      	cmp	r2, #2
 8003c86:	d075      	beq.n	8003d74 <USB_ActivateEndpoint+0x2e2>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003c88:	780c      	ldrb	r4, [r1, #0]
 8003c8a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 8003c94:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003c98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ca0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003ca4:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8003ca8:	fa1f fe8e 	uxth.w	lr, lr
 8003cac:	780a      	ldrb	r2, [r1, #0]
 8003cae:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003cb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003cb6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8003cba:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003cbe:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003cc2:	f822 c00e 	strh.w	ip, [r2, lr]
 8003cc6:	f8b3 e050 	ldrh.w	lr, [r3, #80]	; 0x50
 8003cca:	fa1f fe8e 	uxth.w	lr, lr
 8003cce:	780a      	ldrb	r2, [r1, #0]
 8003cd0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003cd4:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8003cd8:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
 8003cdc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8003ce0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8003ce4:	f822 c00e 	strh.w	ip, [r2, lr]
    if (ep->is_in == 0U)
 8003ce8:	784a      	ldrb	r2, [r1, #1]
 8003cea:	2a00      	cmp	r2, #0
 8003cec:	d151      	bne.n	8003d92 <USB_ActivateEndpoint+0x300>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cee:	780c      	ldrb	r4, [r1, #0]
 8003cf0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003cf4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003cf8:	d00c      	beq.n	8003d14 <USB_ActivateEndpoint+0x282>
 8003cfa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003cfe:	b292      	uxth	r2, r2
 8003d00:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d04:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d08:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003d0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d10:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d14:	780c      	ldrb	r4, [r1, #0]
 8003d16:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d1a:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003d1e:	d00c      	beq.n	8003d3a <USB_ActivateEndpoint+0x2a8>
 8003d20:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d24:	b292      	uxth	r2, r2
 8003d26:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d32:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003d36:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d3a:	780c      	ldrb	r4, [r1, #0]
 8003d3c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d40:	b292      	uxth	r2, r2
 8003d42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d46:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d4a:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003d4e:	f248 0c80 	movw	ip, #32896	; 0x8080
 8003d52:	ea4c 0202 	orr.w	r2, ip, r2
 8003d56:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d5a:	7809      	ldrb	r1, [r1, #0]
 8003d5c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003d60:	b292      	uxth	r2, r2
 8003d62:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d6a:	ea4c 0c02 	orr.w	ip, ip, r2
 8003d6e:	f823 c021 	strh.w	ip, [r3, r1, lsl #2]
 8003d72:	e6f5      	b.n	8003b60 <USB_ActivateEndpoint+0xce>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003d74:	780c      	ldrb	r4, [r1, #0]
 8003d76:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d7a:	b292      	uxth	r2, r2
 8003d7c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003d80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d84:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8003d88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d8c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
 8003d90:	e788      	b.n	8003ca4 <USB_ActivateEndpoint+0x212>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d92:	780c      	ldrb	r4, [r1, #0]
 8003d94:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003d98:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8003d9c:	d00c      	beq.n	8003db8 <USB_ActivateEndpoint+0x326>
 8003d9e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003da2:	b292      	uxth	r2, r2
 8003da4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003da8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003dac:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003db4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003db8:	780c      	ldrb	r4, [r1, #0]
 8003dba:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003dbe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003dc2:	d00c      	beq.n	8003dde <USB_ActivateEndpoint+0x34c>
 8003dc4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003dc8:	b292      	uxth	r2, r2
 8003dca:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003dce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003dd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dd6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003dda:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003dde:	78ca      	ldrb	r2, [r1, #3]
 8003de0:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003de2:	780c      	ldrb	r4, [r1, #0]
 8003de4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003de8:	b292      	uxth	r2, r2
 8003dea:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003df2:	bf18      	it	ne
 8003df4:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003df8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e00:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e04:	7809      	ldrb	r1, [r1, #0]
 8003e06:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003e14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e1c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
 8003e20:	e69e      	b.n	8003b60 <USB_ActivateEndpoint+0xce>

08003e22 <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003e22:	7b0b      	ldrb	r3, [r1, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d146      	bne.n	8003eb6 <USB_DeactivateEndpoint+0x94>
  {
    if (ep->is_in != 0U)
 8003e28:	784b      	ldrb	r3, [r1, #1]
 8003e2a:	b313      	cbz	r3, 8003e72 <USB_DeactivateEndpoint+0x50>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e2c:	780a      	ldrb	r2, [r1, #0]
 8003e2e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e32:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003e36:	d00c      	beq.n	8003e52 <USB_DeactivateEndpoint+0x30>
 8003e38:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e4e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e52:	780a      	ldrb	r2, [r1, #0]
 8003e54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003e6e:	2000      	movs	r0, #0
 8003e70:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e72:	780a      	ldrb	r2, [r1, #0]
 8003e74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e78:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003e7c:	d00c      	beq.n	8003e98 <USB_DeactivateEndpoint+0x76>
 8003e7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e94:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e98:	780a      	ldrb	r2, [r1, #0]
 8003e9a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eb0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8003eb4:	e7db      	b.n	8003e6e <USB_DeactivateEndpoint+0x4c>
    if (ep->is_in == 0U)
 8003eb6:	784b      	ldrb	r3, [r1, #1]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d14d      	bne.n	8003f58 <USB_DeactivateEndpoint+0x136>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ebc:	780a      	ldrb	r2, [r1, #0]
 8003ebe:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ec2:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003ec6:	d00c      	beq.n	8003ee2 <USB_DeactivateEndpoint+0xc0>
 8003ec8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ede:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ee2:	780a      	ldrb	r2, [r1, #0]
 8003ee4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ee8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003eec:	d00c      	beq.n	8003f08 <USB_DeactivateEndpoint+0xe6>
 8003eee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f04:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8003f08:	780a      	ldrb	r2, [r1, #0]
 8003f0a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f20:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f24:	f891 c000 	ldrb.w	ip, [r1]
 8003f28:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	f248 0280 	movw	r2, #32896	; 0x8080
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f40:	7809      	ldrb	r1, [r1, #0]
 8003f42:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f50:	431a      	orrs	r2, r3
 8003f52:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8003f56:	e78a      	b.n	8003e6e <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f58:	780a      	ldrb	r2, [r1, #0]
 8003f5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f5e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003f62:	d00c      	beq.n	8003f7e <USB_DeactivateEndpoint+0x15c>
 8003f64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f7a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f7e:	780a      	ldrb	r2, [r1, #0]
 8003f80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f88:	d00c      	beq.n	8003fa4 <USB_DeactivateEndpoint+0x182>
 8003f8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fa0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8003fa4:	780a      	ldrb	r2, [r1, #0]
 8003fa6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fc0:	f891 c000 	ldrb.w	ip, [r1]
 8003fc4:	f830 302c 	ldrh.w	r3, [r0, ip, lsl #2]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fd2:	f248 0280 	movw	r2, #32896	; 0x8080
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f820 302c 	strh.w	r3, [r0, ip, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003fdc:	7809      	ldrb	r1, [r1, #0]
 8003fde:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fec:	431a      	orrs	r2, r3
 8003fee:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
 8003ff2:	e73c      	b.n	8003e6e <USB_DeactivateEndpoint+0x4c>

08003ff4 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003ff4:	784b      	ldrb	r3, [r1, #1]
 8003ff6:	b18b      	cbz	r3, 800401c <USB_EPSetStall+0x28>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003ff8:	780a      	ldrb	r2, [r1, #0]
 8003ffa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004008:	f083 0310 	eor.w	r3, r3, #16
 800400c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004014:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 8004018:	2000      	movs	r0, #0
 800401a:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800401c:	780a      	ldrb	r2, [r1, #0]
 800401e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004038:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 800403c:	e7ec      	b.n	8004018 <USB_EPSetStall+0x24>

0800403e <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800403e:	7b0b      	ldrb	r3, [r1, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d14b      	bne.n	80040dc <USB_EPClearStall+0x9e>
  {
    if (ep->is_in != 0U)
 8004044:	784b      	ldrb	r3, [r1, #1]
 8004046:	b333      	cbz	r3, 8004096 <USB_EPClearStall+0x58>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004048:	780a      	ldrb	r2, [r1, #0]
 800404a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800404e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004052:	d00c      	beq.n	800406e <USB_EPClearStall+0x30>
 8004054:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004066:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800406a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 800406e:	78cb      	ldrb	r3, [r1, #3]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d033      	beq.n	80040dc <USB_EPClearStall+0x9e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004074:	780a      	ldrb	r2, [r1, #0]
 8004076:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800407a:	b29b      	uxth	r3, r3
 800407c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004084:	f083 0320 	eor.w	r3, r3, #32
 8004088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800408c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004090:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004094:	e022      	b.n	80040dc <USB_EPClearStall+0x9e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004096:	780a      	ldrb	r2, [r1, #0]
 8004098:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800409c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80040a0:	d00c      	beq.n	80040bc <USB_EPClearStall+0x7e>
 80040a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80040bc:	780a      	ldrb	r2, [r1, #0]
 80040be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040cc:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80040d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040d8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80040dc:	2000      	movs	r0, #0
 80040de:	4770      	bx	lr

080040e0 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80040e0:	b911      	cbnz	r1, 80040e8 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80040e8:	2000      	movs	r0, #0
 80040ea:	4770      	bx	lr

080040ec <USB_DevConnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80040ec:	2000      	movs	r0, #0
 80040ee:	4770      	bx	lr

080040f0 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80040f0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 80040f4:	b280      	uxth	r0, r0
 80040f6:	4770      	bx	lr

080040f8 <USB_WritePMA>:
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80040f8:	3301      	adds	r3, #1
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80040fa:	eb00 0c42 	add.w	ip, r0, r2, lsl #1
 80040fe:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
 8004102:	4662      	mov	r2, ip

  for (count = n; count != 0U; count--)
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	d00d      	beq.n	8004124 <USB_WritePMA+0x2c>
 8004108:	3102      	adds	r1, #2
 800410a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
  {
    WrVal = pBuf[0];
    WrVal |= (uint16_t)pBuf[1] << 8;
 800410e:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8004112:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8004116:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    *pdwVal = (WrVal & 0xFFFFU);
 800411a:	f822 3b04 	strh.w	r3, [r2], #4
  for (count = n; count != 0U; count--)
 800411e:	3102      	adds	r1, #2
 8004120:	4594      	cmp	ip, r2
 8004122:	d1f4      	bne.n	800410e <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8004124:	4770      	bx	lr

08004126 <USB_EPStartXfer>:
{
 8004126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004128:	4605      	mov	r5, r0
 800412a:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800412c:	784b      	ldrb	r3, [r1, #1]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d03c      	beq.n	80041ac <USB_EPStartXfer+0x86>
    if (ep->doublebuffer == 0U)
 8004132:	7b0a      	ldrb	r2, [r1, #12]
 8004134:	2a00      	cmp	r2, #0
 8004136:	f040 8215 	bne.w	8004564 <USB_EPStartXfer+0x43e>
      if (ep->xfer_len > ep->maxpacket)
 800413a:	698b      	ldr	r3, [r1, #24]
 800413c:	690a      	ldr	r2, [r1, #16]
 800413e:	4293      	cmp	r3, r2
        ep->xfer_len -= len;
 8004140:	bf86      	itte	hi
 8004142:	1a99      	subhi	r1, r3, r2
        len = ep->maxpacket;
 8004144:	4613      	movhi	r3, r2
        ep->xfer_len = 0U;
 8004146:	2100      	movls	r1, #0
 8004148:	61a1      	str	r1, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800414a:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 800414e:	7820      	ldrb	r0, [r4, #0]
 8004150:	0100      	lsls	r0, r0, #4
 8004152:	f205 420c 	addw	r2, r5, #1036	; 0x40c
 8004156:	fa12 f181 	uxtah	r1, r2, r1
 800415a:	5a42      	ldrh	r2, [r0, r1]
 800415c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004160:	5242      	strh	r2, [r0, r1]
 8004162:	2b3e      	cmp	r3, #62	; 0x3e
 8004164:	f240 81e9 	bls.w	800453a <USB_EPStartXfer+0x414>
 8004168:	095a      	lsrs	r2, r3, #5
 800416a:	f013 0f1f 	tst.w	r3, #31
 800416e:	bf08      	it	eq
 8004170:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8004174:	5a43      	ldrh	r3, [r0, r1]
 8004176:	b29b      	uxth	r3, r3
 8004178:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800417c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004184:	b29b      	uxth	r3, r3
 8004186:	5243      	strh	r3, [r0, r1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004188:	7822      	ldrb	r2, [r4, #0]
 800418a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004198:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800419c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a4:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 80041a8:	2000      	movs	r0, #0
}
 80041aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ep->xfer_len > ep->maxpacket)
 80041ac:	690a      	ldr	r2, [r1, #16]
 80041ae:	698e      	ldr	r6, [r1, #24]
 80041b0:	4296      	cmp	r6, r2
 80041b2:	bf28      	it	cs
 80041b4:	4616      	movcs	r6, r2
    if (ep->doublebuffer == 0U)
 80041b6:	7b0b      	ldrb	r3, [r1, #12]
 80041b8:	b1d3      	cbz	r3, 80041f0 <USB_EPStartXfer+0xca>
      if (ep->type == EP_TYPE_BULK)
 80041ba:	78cb      	ldrb	r3, [r1, #3]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d038      	beq.n	8004232 <USB_EPStartXfer+0x10c>
        ep->xfer_len_db -= len;
 80041c0:	6a0b      	ldr	r3, [r1, #32]
 80041c2:	1b9b      	subs	r3, r3, r6
 80041c4:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80041c6:	780b      	ldrb	r3, [r1, #0]
 80041c8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80041cc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80041d0:	f000 81a5 	beq.w	800451e <USB_EPStartXfer+0x3f8>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80041d4:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 80041d8:	f200 420c 	addw	r2, r0, #1036	; 0x40c
 80041dc:	fa12 f181 	uxtah	r1, r2, r1
 80041e0:	011a      	lsls	r2, r3, #4
 80041e2:	b2b3      	uxth	r3, r6
 80041e4:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80041e6:	8962      	ldrh	r2, [r4, #10]
 80041e8:	6961      	ldr	r1, [r4, #20]
 80041ea:	f7ff ff85 	bl	80040f8 <USB_WritePMA>
 80041ee:	e00e      	b.n	800420e <USB_EPStartXfer+0xe8>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80041f0:	b2b6      	uxth	r6, r6
 80041f2:	4633      	mov	r3, r6
 80041f4:	88ca      	ldrh	r2, [r1, #6]
 80041f6:	6949      	ldr	r1, [r1, #20]
 80041f8:	f7ff ff7e 	bl	80040f8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041fc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004200:	7822      	ldrb	r2, [r4, #0]
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	f205 4104 	addw	r1, r5, #1028	; 0x404
 8004208:	fa11 f383 	uxtah	r3, r1, r3
 800420c:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800420e:	7822      	ldrb	r2, [r4, #0]
 8004210:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800421a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800421e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8004222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422a:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
  return HAL_OK;
 800422e:	2000      	movs	r0, #0
 8004230:	e7bb      	b.n	80041aa <USB_EPStartXfer+0x84>
        if (ep->xfer_len_db > ep->maxpacket)
 8004232:	6a0b      	ldr	r3, [r1, #32]
 8004234:	429a      	cmp	r2, r3
 8004236:	f080 8154 	bcs.w	80044e2 <USB_EPStartXfer+0x3bc>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800423a:	780a      	ldrb	r2, [r1, #0]
 800423c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
          ep->xfer_len_db -= len;
 8004256:	6a0b      	ldr	r3, [r1, #32]
 8004258:	1b9b      	subs	r3, r3, r6
 800425a:	620b      	str	r3, [r1, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800425c:	780b      	ldrb	r3, [r1, #0]
 800425e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004262:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004266:	f000 809e 	beq.w	80043a6 <USB_EPStartXfer+0x280>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800426a:	784a      	ldrb	r2, [r1, #1]
 800426c:	2a00      	cmp	r2, #0
 800426e:	d132      	bne.n	80042d6 <USB_EPStartXfer+0x1b0>
 8004270:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004274:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8004278:	fa11 f282 	uxtah	r2, r1, r2
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	5ad1      	ldrh	r1, [r2, r3]
 8004280:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004284:	52d1      	strh	r1, [r2, r3]
 8004286:	2e3e      	cmp	r6, #62	; 0x3e
 8004288:	d910      	bls.n	80042ac <USB_EPStartXfer+0x186>
 800428a:	0970      	lsrs	r0, r6, #5
 800428c:	f016 0f1f 	tst.w	r6, #31
 8004290:	bf08      	it	eq
 8004292:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004296:	5ad1      	ldrh	r1, [r2, r3]
 8004298:	b289      	uxth	r1, r1
 800429a:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800429e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80042a2:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80042a6:	b289      	uxth	r1, r1
 80042a8:	52d1      	strh	r1, [r2, r3]
 80042aa:	e016      	b.n	80042da <USB_EPStartXfer+0x1b4>
 80042ac:	b93e      	cbnz	r6, 80042be <USB_EPStartXfer+0x198>
 80042ae:	5ad1      	ldrh	r1, [r2, r3]
 80042b0:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80042b4:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80042b8:	b289      	uxth	r1, r1
 80042ba:	52d1      	strh	r1, [r2, r3]
 80042bc:	e00d      	b.n	80042da <USB_EPStartXfer+0x1b4>
 80042be:	0870      	lsrs	r0, r6, #1
 80042c0:	f016 0f01 	tst.w	r6, #1
 80042c4:	bf18      	it	ne
 80042c6:	3001      	addne	r0, #1
 80042c8:	5ad1      	ldrh	r1, [r2, r3]
 80042ca:	b289      	uxth	r1, r1
 80042cc:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80042d0:	b289      	uxth	r1, r1
 80042d2:	52d1      	strh	r1, [r2, r3]
 80042d4:	e001      	b.n	80042da <USB_EPStartXfer+0x1b4>
 80042d6:	2a01      	cmp	r2, #1
 80042d8:	d032      	beq.n	8004340 <USB_EPStartXfer+0x21a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80042da:	b2b3      	uxth	r3, r6
 80042dc:	8962      	ldrh	r2, [r4, #10]
 80042de:	6961      	ldr	r1, [r4, #20]
 80042e0:	4628      	mov	r0, r5
 80042e2:	f7ff ff09 	bl	80040f8 <USB_WritePMA>
            ep->xfer_buff += len;
 80042e6:	6963      	ldr	r3, [r4, #20]
 80042e8:	4433      	add	r3, r6
 80042ea:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 80042ec:	6a23      	ldr	r3, [r4, #32]
 80042ee:	6922      	ldr	r2, [r4, #16]
 80042f0:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 80042f2:	bf86      	itte	hi
 80042f4:	1b9a      	subhi	r2, r3, r6
 80042f6:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 80042f8:	2200      	movls	r2, #0
 80042fa:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80042fc:	7862      	ldrb	r2, [r4, #1]
 80042fe:	2a00      	cmp	r2, #0
 8004300:	d13d      	bne.n	800437e <USB_EPStartXfer+0x258>
 8004302:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004306:	7820      	ldrb	r0, [r4, #0]
 8004308:	0100      	lsls	r0, r0, #4
 800430a:	f205 4104 	addw	r1, r5, #1028	; 0x404
 800430e:	fa11 f282 	uxtah	r2, r1, r2
 8004312:	5a81      	ldrh	r1, [r0, r2]
 8004314:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004318:	5281      	strh	r1, [r0, r2]
 800431a:	2b3e      	cmp	r3, #62	; 0x3e
 800431c:	d91a      	bls.n	8004354 <USB_EPStartXfer+0x22e>
 800431e:	095e      	lsrs	r6, r3, #5
 8004320:	f013 0f1f 	tst.w	r3, #31
 8004324:	bf08      	it	eq
 8004326:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800432a:	5a81      	ldrh	r1, [r0, r2]
 800432c:	b289      	uxth	r1, r1
 800432e:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004332:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004336:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800433a:	b289      	uxth	r1, r1
 800433c:	5281      	strh	r1, [r0, r2]
 800433e:	e020      	b.n	8004382 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004340:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004344:	f200 410c 	addw	r1, r0, #1036	; 0x40c
 8004348:	fa11 f282 	uxtah	r2, r1, r2
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	b2b1      	uxth	r1, r6
 8004350:	52d1      	strh	r1, [r2, r3]
 8004352:	e7c2      	b.n	80042da <USB_EPStartXfer+0x1b4>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004354:	b93b      	cbnz	r3, 8004366 <USB_EPStartXfer+0x240>
 8004356:	5a81      	ldrh	r1, [r0, r2]
 8004358:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800435c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004360:	b289      	uxth	r1, r1
 8004362:	5281      	strh	r1, [r0, r2]
 8004364:	e00d      	b.n	8004382 <USB_EPStartXfer+0x25c>
 8004366:	085e      	lsrs	r6, r3, #1
 8004368:	f013 0f01 	tst.w	r3, #1
 800436c:	bf18      	it	ne
 800436e:	3601      	addne	r6, #1
 8004370:	5a81      	ldrh	r1, [r0, r2]
 8004372:	b289      	uxth	r1, r1
 8004374:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004378:	b289      	uxth	r1, r1
 800437a:	5281      	strh	r1, [r0, r2]
 800437c:	e001      	b.n	8004382 <USB_EPStartXfer+0x25c>
 800437e:	2a01      	cmp	r2, #1
 8004380:	d006      	beq.n	8004390 <USB_EPStartXfer+0x26a>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004382:	b29b      	uxth	r3, r3
 8004384:	8922      	ldrh	r2, [r4, #8]
 8004386:	6961      	ldr	r1, [r4, #20]
 8004388:	4628      	mov	r0, r5
 800438a:	f7ff feb5 	bl	80040f8 <USB_WritePMA>
 800438e:	e73e      	b.n	800420e <USB_EPStartXfer+0xe8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004390:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004394:	7821      	ldrb	r1, [r4, #0]
 8004396:	0109      	lsls	r1, r1, #4
 8004398:	f205 4004 	addw	r0, r5, #1028	; 0x404
 800439c:	fa10 f282 	uxtah	r2, r0, r2
 80043a0:	b298      	uxth	r0, r3
 80043a2:	5288      	strh	r0, [r1, r2]
 80043a4:	e7ed      	b.n	8004382 <USB_EPStartXfer+0x25c>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043a6:	784a      	ldrb	r2, [r1, #1]
 80043a8:	2a00      	cmp	r2, #0
 80043aa:	d132      	bne.n	8004412 <USB_EPStartXfer+0x2ec>
 80043ac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80043b0:	f200 4104 	addw	r1, r0, #1028	; 0x404
 80043b4:	fa11 f282 	uxtah	r2, r1, r2
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	5ad1      	ldrh	r1, [r2, r3]
 80043bc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80043c0:	52d1      	strh	r1, [r2, r3]
 80043c2:	2e3e      	cmp	r6, #62	; 0x3e
 80043c4:	d910      	bls.n	80043e8 <USB_EPStartXfer+0x2c2>
 80043c6:	0970      	lsrs	r0, r6, #5
 80043c8:	f016 0f1f 	tst.w	r6, #31
 80043cc:	bf08      	it	eq
 80043ce:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80043d2:	5ad1      	ldrh	r1, [r2, r3]
 80043d4:	b289      	uxth	r1, r1
 80043d6:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80043da:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80043de:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80043e2:	b289      	uxth	r1, r1
 80043e4:	52d1      	strh	r1, [r2, r3]
 80043e6:	e016      	b.n	8004416 <USB_EPStartXfer+0x2f0>
 80043e8:	b93e      	cbnz	r6, 80043fa <USB_EPStartXfer+0x2d4>
 80043ea:	5ad1      	ldrh	r1, [r2, r3]
 80043ec:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80043f0:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80043f4:	b289      	uxth	r1, r1
 80043f6:	52d1      	strh	r1, [r2, r3]
 80043f8:	e00d      	b.n	8004416 <USB_EPStartXfer+0x2f0>
 80043fa:	0870      	lsrs	r0, r6, #1
 80043fc:	f016 0f01 	tst.w	r6, #1
 8004400:	bf18      	it	ne
 8004402:	3001      	addne	r0, #1
 8004404:	5ad1      	ldrh	r1, [r2, r3]
 8004406:	b289      	uxth	r1, r1
 8004408:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800440c:	b289      	uxth	r1, r1
 800440e:	52d1      	strh	r1, [r2, r3]
 8004410:	e001      	b.n	8004416 <USB_EPStartXfer+0x2f0>
 8004412:	2a01      	cmp	r2, #1
 8004414:	d032      	beq.n	800447c <USB_EPStartXfer+0x356>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004416:	b2b3      	uxth	r3, r6
 8004418:	8922      	ldrh	r2, [r4, #8]
 800441a:	6961      	ldr	r1, [r4, #20]
 800441c:	4628      	mov	r0, r5
 800441e:	f7ff fe6b 	bl	80040f8 <USB_WritePMA>
            ep->xfer_buff += len;
 8004422:	6963      	ldr	r3, [r4, #20]
 8004424:	4433      	add	r3, r6
 8004426:	6163      	str	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004428:	6a23      	ldr	r3, [r4, #32]
 800442a:	6922      	ldr	r2, [r4, #16]
 800442c:	4293      	cmp	r3, r2
              ep->xfer_len_db -= len;
 800442e:	bf86      	itte	hi
 8004430:	1b9a      	subhi	r2, r3, r6
 8004432:	4633      	movhi	r3, r6
              ep->xfer_len_db = 0U;
 8004434:	2200      	movls	r2, #0
 8004436:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004438:	7862      	ldrb	r2, [r4, #1]
 800443a:	2a00      	cmp	r2, #0
 800443c:	d13d      	bne.n	80044ba <USB_EPStartXfer+0x394>
 800443e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004442:	7820      	ldrb	r0, [r4, #0]
 8004444:	0100      	lsls	r0, r0, #4
 8004446:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 800444a:	fa11 f282 	uxtah	r2, r1, r2
 800444e:	5a81      	ldrh	r1, [r0, r2]
 8004450:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004454:	5281      	strh	r1, [r0, r2]
 8004456:	2b3e      	cmp	r3, #62	; 0x3e
 8004458:	d91a      	bls.n	8004490 <USB_EPStartXfer+0x36a>
 800445a:	095e      	lsrs	r6, r3, #5
 800445c:	f013 0f1f 	tst.w	r3, #31
 8004460:	bf08      	it	eq
 8004462:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004466:	5a81      	ldrh	r1, [r0, r2]
 8004468:	b289      	uxth	r1, r1
 800446a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800446e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004472:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004476:	b289      	uxth	r1, r1
 8004478:	5281      	strh	r1, [r0, r2]
 800447a:	e020      	b.n	80044be <USB_EPStartXfer+0x398>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800447c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004480:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8004484:	fa11 f282 	uxtah	r2, r1, r2
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	b2b1      	uxth	r1, r6
 800448c:	52d1      	strh	r1, [r2, r3]
 800448e:	e7c2      	b.n	8004416 <USB_EPStartXfer+0x2f0>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004490:	b93b      	cbnz	r3, 80044a2 <USB_EPStartXfer+0x37c>
 8004492:	5a81      	ldrh	r1, [r0, r2]
 8004494:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004498:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800449c:	b289      	uxth	r1, r1
 800449e:	5281      	strh	r1, [r0, r2]
 80044a0:	e00d      	b.n	80044be <USB_EPStartXfer+0x398>
 80044a2:	085e      	lsrs	r6, r3, #1
 80044a4:	f013 0f01 	tst.w	r3, #1
 80044a8:	bf18      	it	ne
 80044aa:	3601      	addne	r6, #1
 80044ac:	5a81      	ldrh	r1, [r0, r2]
 80044ae:	b289      	uxth	r1, r1
 80044b0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80044b4:	b289      	uxth	r1, r1
 80044b6:	5281      	strh	r1, [r0, r2]
 80044b8:	e001      	b.n	80044be <USB_EPStartXfer+0x398>
 80044ba:	2a01      	cmp	r2, #1
 80044bc:	d006      	beq.n	80044cc <USB_EPStartXfer+0x3a6>
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044be:	b29b      	uxth	r3, r3
 80044c0:	8962      	ldrh	r2, [r4, #10]
 80044c2:	6961      	ldr	r1, [r4, #20]
 80044c4:	4628      	mov	r0, r5
 80044c6:	f7ff fe17 	bl	80040f8 <USB_WritePMA>
 80044ca:	e6a0      	b.n	800420e <USB_EPStartXfer+0xe8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80044cc:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80044d0:	7821      	ldrb	r1, [r4, #0]
 80044d2:	0109      	lsls	r1, r1, #4
 80044d4:	f205 400c 	addw	r0, r5, #1036	; 0x40c
 80044d8:	fa10 f282 	uxtah	r2, r0, r2
 80044dc:	b298      	uxth	r0, r3
 80044de:	5288      	strh	r0, [r1, r2]
 80044e0:	e7ed      	b.n	80044be <USB_EPStartXfer+0x398>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80044e2:	7809      	ldrb	r1, [r1, #0]
 80044e4:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 80044e8:	b292      	uxth	r2, r2
 80044ea:	f422 42e2 	bic.w	r2, r2, #28928	; 0x7100
 80044ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80044f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044fa:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80044fe:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8004502:	7821      	ldrb	r1, [r4, #0]
 8004504:	0109      	lsls	r1, r1, #4
 8004506:	f200 4004 	addw	r0, r0, #1028	; 0x404
 800450a:	fa10 f282 	uxtah	r2, r0, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004512:	8922      	ldrh	r2, [r4, #8]
 8004514:	6961      	ldr	r1, [r4, #20]
 8004516:	4628      	mov	r0, r5
 8004518:	f7ff fdee 	bl	80040f8 <USB_WritePMA>
 800451c:	e677      	b.n	800420e <USB_EPStartXfer+0xe8>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800451e:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
 8004522:	f200 4204 	addw	r2, r0, #1028	; 0x404
 8004526:	fa12 f181 	uxtah	r1, r2, r1
 800452a:	011a      	lsls	r2, r3, #4
 800452c:	b2b3      	uxth	r3, r6
 800452e:	528b      	strh	r3, [r1, r2]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004530:	8922      	ldrh	r2, [r4, #8]
 8004532:	6961      	ldr	r1, [r4, #20]
 8004534:	f7ff fde0 	bl	80040f8 <USB_WritePMA>
 8004538:	e669      	b.n	800420e <USB_EPStartXfer+0xe8>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800453a:	b93b      	cbnz	r3, 800454c <USB_EPStartXfer+0x426>
 800453c:	5a43      	ldrh	r3, [r0, r1]
 800453e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004546:	b29b      	uxth	r3, r3
 8004548:	5243      	strh	r3, [r0, r1]
 800454a:	e61d      	b.n	8004188 <USB_EPStartXfer+0x62>
 800454c:	085a      	lsrs	r2, r3, #1
 800454e:	f013 0f01 	tst.w	r3, #1
 8004552:	bf18      	it	ne
 8004554:	3201      	addne	r2, #1
 8004556:	5a43      	ldrh	r3, [r0, r1]
 8004558:	b29b      	uxth	r3, r3
 800455a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 800455e:	b29b      	uxth	r3, r3
 8004560:	5243      	strh	r3, [r0, r1]
 8004562:	e611      	b.n	8004188 <USB_EPStartXfer+0x62>
      if (ep->type == EP_TYPE_BULK)
 8004564:	78ca      	ldrb	r2, [r1, #3]
 8004566:	2a02      	cmp	r2, #2
 8004568:	d04b      	beq.n	8004602 <USB_EPStartXfer+0x4dc>
      else if (ep->type == EP_TYPE_ISOC)
 800456a:	2a01      	cmp	r2, #1
 800456c:	f040 8134 	bne.w	80047d8 <USB_EPStartXfer+0x6b2>
        if (ep->xfer_len > ep->maxpacket)
 8004570:	698a      	ldr	r2, [r1, #24]
 8004572:	6909      	ldr	r1, [r1, #16]
 8004574:	428a      	cmp	r2, r1
          ep->xfer_len -= len;
 8004576:	bf86      	itte	hi
 8004578:	1a50      	subhi	r0, r2, r1
          len = ep->maxpacket;
 800457a:	460a      	movhi	r2, r1
          ep->xfer_len = 0U;
 800457c:	2000      	movls	r0, #0
 800457e:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004580:	2b00      	cmp	r3, #0
 8004582:	f47f ae01 	bne.w	8004188 <USB_EPStartXfer+0x62>
 8004586:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800458a:	7821      	ldrb	r1, [r4, #0]
 800458c:	0109      	lsls	r1, r1, #4
 800458e:	f205 4004 	addw	r0, r5, #1028	; 0x404
 8004592:	fa10 f383 	uxtah	r3, r0, r3
 8004596:	5ac8      	ldrh	r0, [r1, r3]
 8004598:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800459c:	52c8      	strh	r0, [r1, r3]
 800459e:	2a3e      	cmp	r2, #62	; 0x3e
 80045a0:	f240 80c7 	bls.w	8004732 <USB_EPStartXfer+0x60c>
 80045a4:	0956      	lsrs	r6, r2, #5
 80045a6:	f012 071f 	ands.w	r7, r2, #31
 80045aa:	bf0c      	ite	eq
 80045ac:	f106 3cff 	addeq.w	ip, r6, #4294967295
 80045b0:	46b4      	movne	ip, r6
 80045b2:	5ac8      	ldrh	r0, [r1, r3]
 80045b4:	b280      	uxth	r0, r0
 80045b6:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 80045ba:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 80045be:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 80045c2:	b280      	uxth	r0, r0
 80045c4:	52c8      	strh	r0, [r1, r3]
 80045c6:	7863      	ldrb	r3, [r4, #1]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 80f7 	bne.w	80047bc <USB_EPStartXfer+0x696>
 80045ce:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 80045d2:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 80045d6:	fa13 f282 	uxtah	r2, r3, r2
 80045da:	7821      	ldrb	r1, [r4, #0]
 80045dc:	0109      	lsls	r1, r1, #4
 80045de:	5a53      	ldrh	r3, [r2, r1]
 80045e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e4:	5253      	strh	r3, [r2, r1]
 80045e6:	2f00      	cmp	r7, #0
 80045e8:	f000 80e6 	beq.w	80047b8 <USB_EPStartXfer+0x692>
 80045ec:	5a53      	ldrh	r3, [r2, r1]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80045f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	5253      	strh	r3, [r2, r1]
 8004600:	e5c2      	b.n	8004188 <USB_EPStartXfer+0x62>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004602:	2b00      	cmp	r3, #0
 8004604:	d140      	bne.n	8004688 <USB_EPStartXfer+0x562>
 8004606:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800460a:	780a      	ldrb	r2, [r1, #0]
 800460c:	0112      	lsls	r2, r2, #4
 800460e:	f200 4104 	addw	r1, r0, #1028	; 0x404
 8004612:	fa11 f383 	uxtah	r3, r1, r3
 8004616:	5ad1      	ldrh	r1, [r2, r3]
 8004618:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800461c:	52d1      	strh	r1, [r2, r3]
 800461e:	6921      	ldr	r1, [r4, #16]
 8004620:	293e      	cmp	r1, #62	; 0x3e
 8004622:	d94f      	bls.n	80046c4 <USB_EPStartXfer+0x59e>
 8004624:	0948      	lsrs	r0, r1, #5
 8004626:	f011 0f1f 	tst.w	r1, #31
 800462a:	bf08      	it	eq
 800462c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004630:	5ad1      	ldrh	r1, [r2, r3]
 8004632:	b289      	uxth	r1, r1
 8004634:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004638:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 800463c:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004640:	b289      	uxth	r1, r1
 8004642:	52d1      	strh	r1, [r2, r3]
 8004644:	7863      	ldrb	r3, [r4, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d166      	bne.n	8004718 <USB_EPStartXfer+0x5f2>
 800464a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 800464e:	7822      	ldrb	r2, [r4, #0]
 8004650:	0112      	lsls	r2, r2, #4
 8004652:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8004656:	fa11 f383 	uxtah	r3, r1, r3
 800465a:	5ad1      	ldrh	r1, [r2, r3]
 800465c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004660:	52d1      	strh	r1, [r2, r3]
 8004662:	6921      	ldr	r1, [r4, #16]
 8004664:	293e      	cmp	r1, #62	; 0x3e
 8004666:	d942      	bls.n	80046ee <USB_EPStartXfer+0x5c8>
 8004668:	0948      	lsrs	r0, r1, #5
 800466a:	f011 0f1f 	tst.w	r1, #31
 800466e:	bf08      	it	eq
 8004670:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004674:	5ad1      	ldrh	r1, [r2, r3]
 8004676:	b289      	uxth	r1, r1
 8004678:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 800467c:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004680:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004684:	b289      	uxth	r1, r1
 8004686:	52d1      	strh	r1, [r2, r3]
        if (ep->xfer_count != 0U)
 8004688:	69e3      	ldr	r3, [r4, #28]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f43f ad7c 	beq.w	8004188 <USB_EPStartXfer+0x62>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004690:	7822      	ldrb	r2, [r4, #0]
 8004692:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004696:	f244 0340 	movw	r3, #16448	; 0x4040
 800469a:	ea03 0001 	and.w	r0, r3, r1
 800469e:	438b      	bics	r3, r1
 80046a0:	d002      	beq.n	80046a8 <USB_EPStartXfer+0x582>
 80046a2:	2800      	cmp	r0, #0
 80046a4:	f47f ad70 	bne.w	8004188 <USB_EPStartXfer+0x62>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80046a8:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046be:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 80046c2:	e561      	b.n	8004188 <USB_EPStartXfer+0x62>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80046c4:	b939      	cbnz	r1, 80046d6 <USB_EPStartXfer+0x5b0>
 80046c6:	5ad1      	ldrh	r1, [r2, r3]
 80046c8:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80046cc:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80046d0:	b289      	uxth	r1, r1
 80046d2:	52d1      	strh	r1, [r2, r3]
 80046d4:	e7b6      	b.n	8004644 <USB_EPStartXfer+0x51e>
 80046d6:	0848      	lsrs	r0, r1, #1
 80046d8:	f011 0f01 	tst.w	r1, #1
 80046dc:	bf18      	it	ne
 80046de:	3001      	addne	r0, #1
 80046e0:	5ad1      	ldrh	r1, [r2, r3]
 80046e2:	b289      	uxth	r1, r1
 80046e4:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 80046e8:	b289      	uxth	r1, r1
 80046ea:	52d1      	strh	r1, [r2, r3]
 80046ec:	e7aa      	b.n	8004644 <USB_EPStartXfer+0x51e>
 80046ee:	b939      	cbnz	r1, 8004700 <USB_EPStartXfer+0x5da>
 80046f0:	5ad1      	ldrh	r1, [r2, r3]
 80046f2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80046f6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80046fa:	b289      	uxth	r1, r1
 80046fc:	52d1      	strh	r1, [r2, r3]
 80046fe:	e7c3      	b.n	8004688 <USB_EPStartXfer+0x562>
 8004700:	0848      	lsrs	r0, r1, #1
 8004702:	f011 0f01 	tst.w	r1, #1
 8004706:	bf18      	it	ne
 8004708:	3001      	addne	r0, #1
 800470a:	5ad1      	ldrh	r1, [r2, r3]
 800470c:	b289      	uxth	r1, r1
 800470e:	ea41 2180 	orr.w	r1, r1, r0, lsl #10
 8004712:	b289      	uxth	r1, r1
 8004714:	52d1      	strh	r1, [r2, r3]
 8004716:	e7b7      	b.n	8004688 <USB_EPStartXfer+0x562>
 8004718:	2b01      	cmp	r3, #1
 800471a:	d1b5      	bne.n	8004688 <USB_EPStartXfer+0x562>
 800471c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8004720:	7822      	ldrb	r2, [r4, #0]
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	f205 410c 	addw	r1, r5, #1036	; 0x40c
 8004728:	fa11 f383 	uxtah	r3, r1, r3
 800472c:	8a21      	ldrh	r1, [r4, #16]
 800472e:	52d1      	strh	r1, [r2, r3]
 8004730:	e7aa      	b.n	8004688 <USB_EPStartXfer+0x562>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004732:	b9ea      	cbnz	r2, 8004770 <USB_EPStartXfer+0x64a>
 8004734:	5ac8      	ldrh	r0, [r1, r3]
 8004736:	ea6f 4040 	mvn.w	r0, r0, lsl #17
 800473a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
 800473e:	b280      	uxth	r0, r0
 8004740:	52c8      	strh	r0, [r1, r3]
 8004742:	7863      	ldrb	r3, [r4, #1]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d139      	bne.n	80047bc <USB_EPStartXfer+0x696>
 8004748:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 800474c:	7821      	ldrb	r1, [r4, #0]
 800474e:	0109      	lsls	r1, r1, #4
 8004750:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8004754:	fa13 f282 	uxtah	r2, r3, r2
 8004758:	5a8b      	ldrh	r3, [r1, r2]
 800475a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800475e:	528b      	strh	r3, [r1, r2]
 8004760:	5a8b      	ldrh	r3, [r1, r2]
 8004762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800476a:	b29b      	uxth	r3, r3
 800476c:	528b      	strh	r3, [r1, r2]
 800476e:	e50b      	b.n	8004188 <USB_EPStartXfer+0x62>
 8004770:	0856      	lsrs	r6, r2, #1
 8004772:	f012 0701 	ands.w	r7, r2, #1
 8004776:	bf14      	ite	ne
 8004778:	f106 0c01 	addne.w	ip, r6, #1
 800477c:	46b4      	moveq	ip, r6
 800477e:	5ac8      	ldrh	r0, [r1, r3]
 8004780:	b280      	uxth	r0, r0
 8004782:	ea40 208c 	orr.w	r0, r0, ip, lsl #10
 8004786:	b280      	uxth	r0, r0
 8004788:	52c8      	strh	r0, [r1, r3]
 800478a:	7863      	ldrb	r3, [r4, #1]
 800478c:	b9b3      	cbnz	r3, 80047bc <USB_EPStartXfer+0x696>
 800478e:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8004792:	f205 430c 	addw	r3, r5, #1036	; 0x40c
 8004796:	fa13 f282 	uxtah	r2, r3, r2
 800479a:	7821      	ldrb	r1, [r4, #0]
 800479c:	0109      	lsls	r1, r1, #4
 800479e:	5a53      	ldrh	r3, [r2, r1]
 80047a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047a4:	5253      	strh	r3, [r2, r1]
 80047a6:	b107      	cbz	r7, 80047aa <USB_EPStartXfer+0x684>
 80047a8:	3601      	adds	r6, #1
 80047aa:	5a53      	ldrh	r3, [r2, r1]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	5253      	strh	r3, [r2, r1]
 80047b6:	e4e7      	b.n	8004188 <USB_EPStartXfer+0x62>
 80047b8:	3e01      	subs	r6, #1
 80047ba:	e717      	b.n	80045ec <USB_EPStartXfer+0x4c6>
 80047bc:	2b01      	cmp	r3, #1
 80047be:	f47f ace3 	bne.w	8004188 <USB_EPStartXfer+0x62>
 80047c2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	7821      	ldrb	r1, [r4, #0]
 80047ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047ce:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80047d2:	b292      	uxth	r2, r2
 80047d4:	52ea      	strh	r2, [r5, r3]
 80047d6:	e4d7      	b.n	8004188 <USB_EPStartXfer+0x62>
        return HAL_ERROR;
 80047d8:	2001      	movs	r0, #1
 80047da:	e4e6      	b.n	80041aa <USB_EPStartXfer+0x84>

080047dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80047dc:	b530      	push	{r4, r5, lr}
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80047de:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80047e2:	f500 6480 	add.w	r4, r0, #1024	; 0x400

  for (count = n; count != 0U; count--)
 80047e6:	085d      	lsrs	r5, r3, #1
 80047e8:	d014      	beq.n	8004814 <USB_ReadPMA+0x38>
 80047ea:	f101 0c02 	add.w	ip, r1, #2
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80047ee:	4620      	mov	r0, r4
  for (count = n; count != 0U; count--)
 80047f0:	46ae      	mov	lr, r5
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80047f2:	f830 2b04 	ldrh.w	r2, [r0], #4
 80047f6:	b292      	uxth	r2, r2
    pdwVal++;
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80047f8:	f80c 2c02 	strb.w	r2, [ip, #-2]
    pBuf++;
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80047fc:	0a12      	lsrs	r2, r2, #8
 80047fe:	f80c 2c01 	strb.w	r2, [ip, #-1]
  for (count = n; count != 0U; count--)
 8004802:	f10c 0c02 	add.w	ip, ip, #2
 8004806:	f1be 0e01 	subs.w	lr, lr, #1
 800480a:	d1f2      	bne.n	80047f2 <USB_ReadPMA+0x16>
    pBuf++;
 800480c:	eb01 0145 	add.w	r1, r1, r5, lsl #1

#if PMA_ACCESS > 1U
    pdwVal++;
 8004810:	eb04 0485 	add.w	r4, r4, r5, lsl #2
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004814:	f013 0f01 	tst.w	r3, #1
  {
    RdVal = *pdwVal;
 8004818:	bf1c      	itt	ne
 800481a:	8823      	ldrhne	r3, [r4, #0]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800481c:	700b      	strbne	r3, [r1, #0]
  }
}
 800481e:	bd30      	pop	{r4, r5, pc}

08004820 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004820:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8004824:	b183      	cbz	r3, 8004848 <USBD_CDC_EP0_RxReady+0x28>
{
 8004826:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004828:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800482c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8004830:	28ff      	cmp	r0, #255	; 0xff
 8004832:	d007      	beq.n	8004844 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 800483a:	4621      	mov	r1, r4
 800483c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800483e:	23ff      	movs	r3, #255	; 0xff
 8004840:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8004844:	2000      	movs	r0, #0
 8004846:	bd10      	pop	{r4, pc}
 8004848:	2000      	movs	r0, #0
 800484a:	4770      	bx	lr

0800484c <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800484c:	2343      	movs	r3, #67	; 0x43
 800484e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004850:	4800      	ldr	r0, [pc, #0]	; (8004854 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004852:	4770      	bx	lr
 8004854:	20000094 	.word	0x20000094

08004858 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004858:	2343      	movs	r3, #67	; 0x43
 800485a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 800485c:	4800      	ldr	r0, [pc, #0]	; (8004860 <USBD_CDC_GetHSCfgDesc+0x8>)
 800485e:	4770      	bx	lr
 8004860:	200000d8 	.word	0x200000d8

08004864 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004864:	2343      	movs	r3, #67	; 0x43
 8004866:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004868:	4800      	ldr	r0, [pc, #0]	; (800486c <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 800486a:	4770      	bx	lr
 800486c:	20000128 	.word	0x20000128

08004870 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004870:	230a      	movs	r3, #10
 8004872:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004874:	4800      	ldr	r0, [pc, #0]	; (8004878 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004876:	4770      	bx	lr
 8004878:	2000011c 	.word	0x2000011c

0800487c <USBD_CDC_DataOut>:
{
 800487c:	b538      	push	{r3, r4, r5, lr}
 800487e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004880:	f8d0 52b8 	ldr.w	r5, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004884:	f001 f892 	bl	80059ac <USBD_LL_GetRxDataSize>
 8004888:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 800488c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004890:	b14b      	cbz	r3, 80048a6 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004892:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 800489c:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80048a0:	4798      	blx	r3
    return USBD_OK;
 80048a2:	2000      	movs	r0, #0
}
 80048a4:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80048a6:	2002      	movs	r0, #2
 80048a8:	e7fc      	b.n	80048a4 <USBD_CDC_DataOut+0x28>

080048aa <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048aa:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80048ae:	b312      	cbz	r2, 80048f6 <USBD_CDC_DataIn+0x4c>
{
 80048b0:	b510      	push	{r4, lr}
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80048b2:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80048b6:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80048ba:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	b14b      	cbz	r3, 80048d6 <USBD_CDC_DataIn+0x2c>
 80048c2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80048c6:	eb04 04cc 	add.w	r4, r4, ip, lsl #3
 80048ca:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80048cc:	fbb3 fcf4 	udiv	ip, r3, r4
 80048d0:	fb04 331c 	mls	r3, r4, ip, r3
 80048d4:	b11b      	cbz	r3, 80048de <USBD_CDC_DataIn+0x34>
      hcdc->TxState = 0U;
 80048d6:	2000      	movs	r0, #0
 80048d8:	f8c2 0214 	str.w	r0, [r2, #532]	; 0x214
}
 80048dc:	bd10      	pop	{r4, pc}
      pdev->ep_in[epnum].total_length = 0U;
 80048de:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80048e2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80048e6:	2400      	movs	r4, #0
 80048e8:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80048ea:	4623      	mov	r3, r4
 80048ec:	4622      	mov	r2, r4
 80048ee:	f001 f84d 	bl	800598c <USBD_LL_Transmit>
    return USBD_OK;
 80048f2:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80048f4:	e7f2      	b.n	80048dc <USBD_CDC_DataIn+0x32>
    return USBD_FAIL;
 80048f6:	2002      	movs	r0, #2
}
 80048f8:	4770      	bx	lr

080048fa <USBD_CDC_Setup>:
{
 80048fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048fc:	b083      	sub	sp, #12
 80048fe:	4606      	mov	r6, r0
 8004900:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004902:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	f88d 3007 	strb.w	r3, [sp, #7]
  uint16_t status_info = 0U;
 800490c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004910:	780b      	ldrb	r3, [r1, #0]
 8004912:	f013 0560 	ands.w	r5, r3, #96	; 0x60
 8004916:	d027      	beq.n	8004968 <USBD_CDC_Setup+0x6e>
 8004918:	2d20      	cmp	r5, #32
 800491a:	d153      	bne.n	80049c4 <USBD_CDC_Setup+0xca>
      if (req->wLength)
 800491c:	88ca      	ldrh	r2, [r1, #6]
 800491e:	b1da      	cbz	r2, 8004958 <USBD_CDC_Setup+0x5e>
        if (req->bmRequest & 0x80U)
 8004920:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004924:	d00c      	beq.n	8004940 <USBD_CDC_Setup+0x46>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004926:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	4639      	mov	r1, r7
 800492e:	7860      	ldrb	r0, [r4, #1]
 8004930:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004932:	88e2      	ldrh	r2, [r4, #6]
 8004934:	4639      	mov	r1, r7
 8004936:	4630      	mov	r0, r6
 8004938:	f000 fd5d 	bl	80053f6 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800493c:	2500      	movs	r5, #0
 800493e:	e044      	b.n	80049ca <USBD_CDC_Setup+0xd0>
          hcdc->CmdOpCode = req->bRequest;
 8004940:	784b      	ldrb	r3, [r1, #1]
 8004942:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004946:	88cb      	ldrh	r3, [r1, #6]
 8004948:	f887 3201 	strb.w	r3, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800494c:	88ca      	ldrh	r2, [r1, #6]
 800494e:	4639      	mov	r1, r7
 8004950:	f000 fd66 	bl	8005420 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8004954:	2500      	movs	r5, #0
 8004956:	e038      	b.n	80049ca <USBD_CDC_Setup+0xd0>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004958:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	7848      	ldrb	r0, [r1, #1]
 8004962:	4798      	blx	r3
  uint8_t ret = USBD_OK;
 8004964:	2500      	movs	r5, #0
 8004966:	e030      	b.n	80049ca <USBD_CDC_Setup+0xd0>
      switch (req->bRequest)
 8004968:	784f      	ldrb	r7, [r1, #1]
 800496a:	2f0a      	cmp	r7, #10
 800496c:	d014      	beq.n	8004998 <USBD_CDC_Setup+0x9e>
 800496e:	2f0b      	cmp	r7, #11
 8004970:	d020      	beq.n	80049b4 <USBD_CDC_Setup+0xba>
 8004972:	b11f      	cbz	r7, 800497c <USBD_CDC_Setup+0x82>
          USBD_CtlError(pdev, req);
 8004974:	f000 fa55 	bl	8004e22 <USBD_CtlError>
          ret = USBD_FAIL;
 8004978:	2502      	movs	r5, #2
          break;
 800497a:	e026      	b.n	80049ca <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800497c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004980:	2b03      	cmp	r3, #3
 8004982:	d003      	beq.n	800498c <USBD_CDC_Setup+0x92>
            USBD_CtlError(pdev, req);
 8004984:	f000 fa4d 	bl	8004e22 <USBD_CtlError>
            ret = USBD_FAIL;
 8004988:	2502      	movs	r5, #2
 800498a:	e01e      	b.n	80049ca <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800498c:	2202      	movs	r2, #2
 800498e:	a901      	add	r1, sp, #4
 8004990:	f000 fd31 	bl	80053f6 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 8004994:	463d      	mov	r5, r7
 8004996:	e018      	b.n	80049ca <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004998:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800499c:	2b03      	cmp	r3, #3
 800499e:	d003      	beq.n	80049a8 <USBD_CDC_Setup+0xae>
            USBD_CtlError(pdev, req);
 80049a0:	f000 fa3f 	bl	8004e22 <USBD_CtlError>
            ret = USBD_FAIL;
 80049a4:	2502      	movs	r5, #2
 80049a6:	e010      	b.n	80049ca <USBD_CDC_Setup+0xd0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80049a8:	2201      	movs	r2, #1
 80049aa:	f10d 0107 	add.w	r1, sp, #7
 80049ae:	f000 fd22 	bl	80053f6 <USBD_CtlSendData>
 80049b2:	e00a      	b.n	80049ca <USBD_CDC_Setup+0xd0>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80049b4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d006      	beq.n	80049ca <USBD_CDC_Setup+0xd0>
            USBD_CtlError(pdev, req);
 80049bc:	f000 fa31 	bl	8004e22 <USBD_CtlError>
            ret = USBD_FAIL;
 80049c0:	2502      	movs	r5, #2
 80049c2:	e002      	b.n	80049ca <USBD_CDC_Setup+0xd0>
      USBD_CtlError(pdev, req);
 80049c4:	f000 fa2d 	bl	8004e22 <USBD_CtlError>
      ret = USBD_FAIL;
 80049c8:	2502      	movs	r5, #2
}
 80049ca:	4628      	mov	r0, r5
 80049cc:	b003      	add	sp, #12
 80049ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049d0 <USBD_CDC_DeInit>:
{
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80049d4:	2181      	movs	r1, #129	; 0x81
 80049d6:	f000 ffa2 	bl	800591e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80049da:	2500      	movs	r5, #0
 80049dc:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80049de:	2101      	movs	r1, #1
 80049e0:	4620      	mov	r0, r4
 80049e2:	f000 ff9c 	bl	800591e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80049e6:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80049ea:	2182      	movs	r1, #130	; 0x82
 80049ec:	4620      	mov	r0, r4
 80049ee:	f000 ff96 	bl	800591e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80049f2:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80049f4:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80049f8:	b14b      	cbz	r3, 8004a0e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80049fa:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004a02:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8004a06:	f000 ffdb 	bl	80059c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004a0a:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 8004a0e:	2000      	movs	r0, #0
 8004a10:	bd38      	pop	{r3, r4, r5, pc}

08004a12 <USBD_CDC_Init>:
{
 8004a12:	b570      	push	{r4, r5, r6, lr}
 8004a14:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a16:	7c03      	ldrb	r3, [r0, #16]
 8004a18:	bba3      	cbnz	r3, 8004a84 <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a1e:	2202      	movs	r2, #2
 8004a20:	2181      	movs	r1, #129	; 0x81
 8004a22:	f000 ff71 	bl	8005908 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a26:	2101      	movs	r1, #1
 8004a28:	62e1      	str	r1, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a2e:	2202      	movs	r2, #2
 8004a30:	4620      	mov	r0, r4
 8004a32:	f000 ff69 	bl	8005908 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a36:	2501      	movs	r5, #1
 8004a38:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004a3c:	2308      	movs	r3, #8
 8004a3e:	2203      	movs	r2, #3
 8004a40:	2182      	movs	r1, #130	; 0x82
 8004a42:	4620      	mov	r0, r4
 8004a44:	f000 ff60 	bl	8005908 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004a48:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004a4a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004a4e:	f000 ffb3 	bl	80059b8 <USBD_static_malloc>
 8004a52:	4605      	mov	r5, r0
 8004a54:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 8004a58:	b350      	cbz	r0, 8004ab0 <USBD_CDC_Init+0x9e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004a5a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4798      	blx	r3
    hcdc->TxState = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
    hcdc->RxState = 0U;
 8004a68:	f8c5 3218 	str.w	r3, [r5, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a6c:	7c26      	ldrb	r6, [r4, #16]
 8004a6e:	b9b6      	cbnz	r6, 8004a9e <USBD_CDC_Init+0x8c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a74:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004a78:	2101      	movs	r1, #1
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f000 ff8e 	bl	800599c <USBD_LL_PrepareReceive>
}
 8004a80:	4630      	mov	r0, r6
 8004a82:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004a84:	2340      	movs	r3, #64	; 0x40
 8004a86:	2202      	movs	r2, #2
 8004a88:	2181      	movs	r1, #129	; 0x81
 8004a8a:	f000 ff3d 	bl	8005908 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004a8e:	2101      	movs	r1, #1
 8004a90:	62e1      	str	r1, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004a92:	2340      	movs	r3, #64	; 0x40
 8004a94:	2202      	movs	r2, #2
 8004a96:	4620      	mov	r0, r4
 8004a98:	f000 ff36 	bl	8005908 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004a9c:	e7cb      	b.n	8004a36 <USBD_CDC_Init+0x24>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a9e:	2340      	movs	r3, #64	; 0x40
 8004aa0:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f000 ff78 	bl	800599c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004aac:	2600      	movs	r6, #0
 8004aae:	e7e7      	b.n	8004a80 <USBD_CDC_Init+0x6e>
    ret = 1U;
 8004ab0:	2601      	movs	r6, #1
 8004ab2:	e7e5      	b.n	8004a80 <USBD_CDC_Init+0x6e>

08004ab4 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004ab4:	b119      	cbz	r1, 8004abe <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8004ab6:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 8004aba:	2000      	movs	r0, #0
 8004abc:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004abe:	2002      	movs	r0, #2
  }

  return ret;
}
 8004ac0:	4770      	bx	lr

08004ac2 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ac2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
 8004ac6:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004aca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
}
 8004ace:	2000      	movs	r0, #0
 8004ad0:	4770      	bx	lr

08004ad2 <USBD_CDC_SetRxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ad2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->RxBuffer = pbuff;
 8004ad6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204

  return USBD_OK;
}
 8004ada:	2000      	movs	r0, #0
 8004adc:	4770      	bx	lr

08004ade <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ade:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  if (pdev->pClassData != NULL)
 8004ae2:	b1a2      	cbz	r2, 8004b0e <USBD_CDC_TransmitPacket+0x30>
{
 8004ae4:	b508      	push	{r3, lr}
  {
    if (hcdc->TxState == 0U)
 8004ae6:	f8d2 3214 	ldr.w	r3, [r2, #532]	; 0x214
 8004aea:	b10b      	cbz	r3, 8004af0 <USBD_CDC_TransmitPacket+0x12>

      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004aec:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004aee:	bd08      	pop	{r3, pc}
      hcdc->TxState = 1U;
 8004af0:	2301      	movs	r3, #1
 8004af2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004af6:	f8d2 3210 	ldr.w	r3, [r2, #528]	; 0x210
 8004afa:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004afc:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 8004b00:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8004b04:	2181      	movs	r1, #129	; 0x81
 8004b06:	f000 ff41 	bl	800598c <USBD_LL_Transmit>
      return USBD_OK;
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	e7ef      	b.n	8004aee <USBD_CDC_TransmitPacket+0x10>
    return USBD_FAIL;
 8004b0e:	2002      	movs	r0, #2
}
 8004b10:	4770      	bx	lr

08004b12 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004b12:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b14:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004b18:	b192      	cbz	r2, 8004b40 <USBD_CDC_ReceivePacket+0x2e>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b1a:	7c04      	ldrb	r4, [r0, #16]
 8004b1c:	b944      	cbnz	r4, 8004b30 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b22:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004b26:	2101      	movs	r1, #1
 8004b28:	f000 ff38 	bl	800599c <USBD_LL_PrepareReceive>
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8004b30:	2340      	movs	r3, #64	; 0x40
 8004b32:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8004b36:	2101      	movs	r1, #1
 8004b38:	f000 ff30 	bl	800599c <USBD_LL_PrepareReceive>
    return USBD_OK;
 8004b3c:	2400      	movs	r4, #0
 8004b3e:	e7f5      	b.n	8004b2c <USBD_CDC_ReceivePacket+0x1a>
    return USBD_FAIL;
 8004b40:	2402      	movs	r4, #2
 8004b42:	e7f3      	b.n	8004b2c <USBD_CDC_ReceivePacket+0x1a>

08004b44 <USBD_Init>:
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004b44:	b198      	cbz	r0, 8004b6e <USBD_Init+0x2a>
{
 8004b46:	b508      	push	{r3, lr}
 8004b48:	4603      	mov	r3, r0
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004b4a:	f8d0 02b4 	ldr.w	r0, [r0, #692]	; 0x2b4
 8004b4e:	b110      	cbz	r0, 8004b56 <USBD_Init+0x12>
  {
    pdev->pClass = NULL;
 8004b50:	2000      	movs	r0, #0
 8004b52:	f8c3 02b4 	str.w	r0, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004b56:	b109      	cbz	r1, 8004b5c <USBD_Init+0x18>
  {
    pdev->pDesc = pdesc;
 8004b58:	f8c3 12b0 	str.w	r1, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b5c:	2101      	movs	r1, #1
 8004b5e:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->id = id;
 8004b62:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fe85 	bl	8005874 <USBD_LL_Init>

  return USBD_OK;
 8004b6a:	2000      	movs	r0, #0
}
 8004b6c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004b6e:	2002      	movs	r0, #2
}
 8004b70:	4770      	bx	lr

08004b72 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004b72:	b119      	cbz	r1, 8004b7c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004b74:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8004b78:	2000      	movs	r0, #0
 8004b7a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004b7c:	2002      	movs	r0, #2
  }

  return status;
}
 8004b7e:	4770      	bx	lr

08004b80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004b80:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004b82:	f000 feb9 	bl	80058f8 <USBD_LL_Start>

  return USBD_OK;
}
 8004b86:	2000      	movs	r0, #0
 8004b88:	bd08      	pop	{r3, pc}

08004b8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004b8a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004b8c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004b90:	b133      	cbz	r3, 8004ba0 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4798      	blx	r3
 8004b96:	3800      	subs	r0, #0
 8004b98:	bf18      	it	ne
 8004b9a:	2001      	movne	r0, #1
 8004b9c:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004b9e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004ba0:	2002      	movs	r0, #2
 8004ba2:	e7fc      	b.n	8004b9e <USBD_SetClassConfig+0x14>

08004ba4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004ba4:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004ba6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4798      	blx	r3

  return USBD_OK;
}
 8004bae:	2000      	movs	r0, #0
 8004bb0:	bd08      	pop	{r3, pc}

08004bb2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004bb2:	b538      	push	{r3, r4, r5, lr}
 8004bb4:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004bb6:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 f91d 	bl	8004dfa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004bc6:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8004bca:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004bce:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
 8004bd2:	f001 031f 	and.w	r3, r1, #31
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d00e      	beq.n	8004bf8 <USBD_LL_SetupStage+0x46>
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d011      	beq.n	8004c02 <USBD_LL_SetupStage+0x50>
 8004bde:	b12b      	cbz	r3, 8004bec <USBD_LL_SetupStage+0x3a>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004be0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004be4:	4620      	mov	r0, r4
 8004be6:	f000 fea2 	bl	800592e <USBD_LL_StallEP>
      break;
 8004bea:	e003      	b.n	8004bf4 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8004bec:	4629      	mov	r1, r5
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 f922 	bl	8004e38 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 fad4 	bl	80051a8 <USBD_StdItfReq>
      break;
 8004c00:	e7f8      	b.n	8004bf4 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8004c02:	4629      	mov	r1, r5
 8004c04:	4620      	mov	r0, r4
 8004c06:	f000 faff 	bl	8005208 <USBD_StdEPReq>
      break;
 8004c0a:	e7f3      	b.n	8004bf4 <USBD_LL_SetupStage+0x42>

08004c0c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004c10:	460d      	mov	r5, r1
 8004c12:	bb81      	cbnz	r1, 8004c76 <USBD_LL_DataOutStage+0x6a>
 8004c14:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c16:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004c1a:	2a03      	cmp	r2, #3
 8004c1c:	d003      	beq.n	8004c26 <USBD_LL_DataOutStage+0x1a>
        USBD_CtlSendStatus(pdev);
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004c1e:	2a05      	cmp	r2, #5
 8004c20:	d022      	beq.n	8004c68 <USBD_LL_DataOutStage+0x5c>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004c22:	4608      	mov	r0, r1
 8004c24:	e031      	b.n	8004c8a <USBD_LL_DataOutStage+0x7e>
      if (pep->rem_length > pep->maxpacket)
 8004c26:	f8d0 1160 	ldr.w	r1, [r0, #352]	; 0x160
 8004c2a:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8004c2e:	4291      	cmp	r1, r2
 8004c30:	d90b      	bls.n	8004c4a <USBD_LL_DataOutStage+0x3e>
        pep->rem_length -= pep->maxpacket;
 8004c32:	1a89      	subs	r1, r1, r2
 8004c34:	f8c0 1160 	str.w	r1, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004c38:	428a      	cmp	r2, r1
 8004c3a:	bf8c      	ite	hi
 8004c3c:	b28a      	uxthhi	r2, r1
 8004c3e:	b292      	uxthls	r2, r2
 8004c40:	4619      	mov	r1, r3
 8004c42:	f000 fbfc 	bl	800543e <USBD_CtlContinueRx>
  return USBD_OK;
 8004c46:	4628      	mov	r0, r5
 8004c48:	e01f      	b.n	8004c8a <USBD_LL_DataOutStage+0x7e>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004c4a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	b11b      	cbz	r3, 8004c5a <USBD_LL_DataOutStage+0x4e>
 8004c52:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004c56:	2a03      	cmp	r2, #3
 8004c58:	d004      	beq.n	8004c64 <USBD_LL_DataOutStage+0x58>
        USBD_CtlSendStatus(pdev);
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	f000 fbf7 	bl	800544e <USBD_CtlSendStatus>
  return USBD_OK;
 8004c60:	4628      	mov	r0, r5
 8004c62:	e012      	b.n	8004c8a <USBD_LL_DataOutStage+0x7e>
          pdev->pClass->EP0_RxReady(pdev);
 8004c64:	4798      	blx	r3
 8004c66:	e7f8      	b.n	8004c5a <USBD_LL_DataOutStage+0x4e>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004c68:	2100      	movs	r1, #0
 8004c6a:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004c6e:	f000 fe5e 	bl	800592e <USBD_LL_StallEP>
  return USBD_OK;
 8004c72:	4628      	mov	r0, r5
 8004c74:	e009      	b.n	8004c8a <USBD_LL_DataOutStage+0x7e>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004c76:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	b133      	cbz	r3, 8004c8c <USBD_LL_DataOutStage+0x80>
 8004c7e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004c82:	2a03      	cmp	r2, #3
 8004c84:	d104      	bne.n	8004c90 <USBD_LL_DataOutStage+0x84>
    pdev->pClass->DataOut(pdev, epnum);
 8004c86:	4798      	blx	r3
  return USBD_OK;
 8004c88:	2000      	movs	r0, #0
}
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004c8c:	2002      	movs	r0, #2
 8004c8e:	e7fc      	b.n	8004c8a <USBD_LL_DataOutStage+0x7e>
 8004c90:	2002      	movs	r0, #2
 8004c92:	e7fa      	b.n	8004c8a <USBD_LL_DataOutStage+0x7e>

08004c94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004c98:	460d      	mov	r5, r1
 8004c9a:	2900      	cmp	r1, #0
 8004c9c:	d152      	bne.n	8004d44 <USBD_LL_DataInStage+0xb0>
 8004c9e:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ca0:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8004ca4:	2a02      	cmp	r2, #2
 8004ca6:	d00b      	beq.n	8004cc0 <USBD_LL_DataInStage+0x2c>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004ca8:	f032 0304 	bics.w	r3, r2, #4
 8004cac:	d102      	bne.n	8004cb4 <USBD_LL_DataInStage+0x20>
          (pdev->ep0_state == USBD_EP0_IDLE))
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004cae:	2180      	movs	r1, #128	; 0x80
 8004cb0:	f000 fe3d 	bl	800592e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004cb4:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d03e      	beq.n	8004d3a <USBD_LL_DataInStage+0xa6>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004cbc:	4628      	mov	r0, r5
}
 8004cbe:	bd38      	pop	{r3, r4, r5, pc}
      if (pep->rem_length > pep->maxpacket)
 8004cc0:	6a02      	ldr	r2, [r0, #32]
 8004cc2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8004cc4:	428a      	cmp	r2, r1
 8004cc6:	d81b      	bhi.n	8004d00 <USBD_LL_DataInStage+0x6c>
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004cc8:	69c2      	ldr	r2, [r0, #28]
 8004cca:	fbb2 f3f1 	udiv	r3, r2, r1
 8004cce:	fb01 2313 	mls	r3, r1, r3, r2
 8004cd2:	b92b      	cbnz	r3, 8004ce0 <USBD_LL_DataInStage+0x4c>
 8004cd4:	4291      	cmp	r1, r2
 8004cd6:	d803      	bhi.n	8004ce0 <USBD_LL_DataInStage+0x4c>
            (pep->total_length >= pep->maxpacket) &&
 8004cd8:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d31c      	bcc.n	8004d1a <USBD_LL_DataInStage+0x86>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004ce0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	b11b      	cbz	r3, 8004cf0 <USBD_LL_DataInStage+0x5c>
 8004ce8:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8004cec:	2a03      	cmp	r2, #3
 8004cee:	d021      	beq.n	8004d34 <USBD_LL_DataInStage+0xa0>
          USBD_LL_StallEP(pdev, 0x80U);
 8004cf0:	2180      	movs	r1, #128	; 0x80
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f000 fe1b 	bl	800592e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f000 fbb3 	bl	8005464 <USBD_CtlReceiveStatus>
 8004cfe:	e7d9      	b.n	8004cb4 <USBD_LL_DataInStage+0x20>
        pep->rem_length -= pep->maxpacket;
 8004d00:	1a52      	subs	r2, r2, r1
 8004d02:	6202      	str	r2, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004d04:	b292      	uxth	r2, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	f000 fb82 	bl	8005410 <USBD_CtlContinueSendData>
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4619      	mov	r1, r3
 8004d12:	4620      	mov	r0, r4
 8004d14:	f000 fe42 	bl	800599c <USBD_LL_PrepareReceive>
 8004d18:	e7cc      	b.n	8004cb4 <USBD_LL_DataInStage+0x20>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	f000 fb77 	bl	8005410 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004d22:	2100      	movs	r1, #0
 8004d24:	f8c4 1298 	str.w	r1, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d28:	460b      	mov	r3, r1
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f000 fe35 	bl	800599c <USBD_LL_PrepareReceive>
 8004d32:	e7bf      	b.n	8004cb4 <USBD_LL_DataInStage+0x20>
            pdev->pClass->EP0_TxSent(pdev);
 8004d34:	4620      	mov	r0, r4
 8004d36:	4798      	blx	r3
 8004d38:	e7da      	b.n	8004cf0 <USBD_LL_DataInStage+0x5c>
      pdev->dev_test_mode = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
  return USBD_OK;
 8004d40:	4628      	mov	r0, r5
 8004d42:	e7bc      	b.n	8004cbe <USBD_LL_DataInStage+0x2a>
  else if ((pdev->pClass->DataIn != NULL) &&
 8004d44:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	b133      	cbz	r3, 8004d5a <USBD_LL_DataInStage+0xc6>
 8004d4c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8004d50:	2a03      	cmp	r2, #3
 8004d52:	d104      	bne.n	8004d5e <USBD_LL_DataInStage+0xca>
    pdev->pClass->DataIn(pdev, epnum);
 8004d54:	4798      	blx	r3
  return USBD_OK;
 8004d56:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8004d58:	e7b1      	b.n	8004cbe <USBD_LL_DataInStage+0x2a>
    return USBD_FAIL;
 8004d5a:	2002      	movs	r0, #2
 8004d5c:	e7af      	b.n	8004cbe <USBD_LL_DataInStage+0x2a>
 8004d5e:	2002      	movs	r0, #2
 8004d60:	e7ad      	b.n	8004cbe <USBD_LL_DataInStage+0x2a>

08004d62 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004d62:	b570      	push	{r4, r5, r6, lr}
 8004d64:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d66:	2340      	movs	r3, #64	; 0x40
 8004d68:	2200      	movs	r2, #0
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	f000 fdcc 	bl	8005908 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004d70:	2501      	movs	r5, #1
 8004d72:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d76:	2640      	movs	r6, #64	; 0x40
 8004d78:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004d7c:	4633      	mov	r3, r6
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2180      	movs	r1, #128	; 0x80
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 fdc0 	bl	8005908 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004d88:	61a5      	str	r5, [r4, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004d8a:	6266      	str	r6, [r4, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d8c:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8004d96:	6063      	str	r3, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004d98:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4

  if (pdev->pClassData)
 8004d9c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004da0:	b12b      	cbz	r3, 8004dae <USBD_LL_Reset+0x4c>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004da2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2100      	movs	r1, #0
 8004daa:	4620      	mov	r0, r4
 8004dac:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004dae:	2000      	movs	r0, #0
 8004db0:	bd70      	pop	{r4, r5, r6, pc}

08004db2 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004db2:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004db4:	2000      	movs	r0, #0
 8004db6:	4770      	bx	lr

08004db8 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004db8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004dbc:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004dc0:	2304      	movs	r3, #4
 8004dc2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	4770      	bx	lr

08004dca <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004dca:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004dce:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004dd0:	bf04      	itt	eq
 8004dd2:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004dd6:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8004dda:	2000      	movs	r0, #0
 8004ddc:	4770      	bx	lr

08004dde <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004dde:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004de0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004de4:	2b03      	cmp	r3, #3
 8004de6:	d001      	beq.n	8004dec <USBD_LL_SOF+0xe>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8004de8:	2000      	movs	r0, #0
 8004dea:	bd08      	pop	{r3, pc}
    if (pdev->pClass->SOF != NULL)
 8004dec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f8      	beq.n	8004de8 <USBD_LL_SOF+0xa>
      pdev->pClass->SOF(pdev);
 8004df6:	4798      	blx	r3
 8004df8:	e7f6      	b.n	8004de8 <USBD_LL_SOF+0xa>

08004dfa <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest = *(uint8_t *)(pdata);
 8004dfa:	780b      	ldrb	r3, [r1, #0]
 8004dfc:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004dfe:	784b      	ldrb	r3, [r1, #1]
 8004e00:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004e02:	78ca      	ldrb	r2, [r1, #3]
 8004e04:	788b      	ldrb	r3, [r1, #2]
 8004e06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004e0a:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004e0c:	794a      	ldrb	r2, [r1, #5]
 8004e0e:	790b      	ldrb	r3, [r1, #4]
 8004e10:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004e14:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8004e16:	79ca      	ldrb	r2, [r1, #7]
 8004e18:	798b      	ldrb	r3, [r1, #6]
 8004e1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004e1e:	80c3      	strh	r3, [r0, #6]

}
 8004e20:	4770      	bx	lr

08004e22 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004e22:	b510      	push	{r4, lr}
 8004e24:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8004e26:	2180      	movs	r1, #128	; 0x80
 8004e28:	f000 fd81 	bl	800592e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4620      	mov	r0, r4
 8004e30:	f000 fd7d 	bl	800592e <USBD_LL_StallEP>
}
 8004e34:	bd10      	pop	{r4, pc}
	...

08004e38 <USBD_StdDevReq>:
{
 8004e38:	b530      	push	{r4, r5, lr}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	4605      	mov	r5, r0
 8004e3e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e40:	780b      	ldrb	r3, [r1, #0]
 8004e42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d005      	beq.n	8004e56 <USBD_StdDevReq+0x1e>
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d003      	beq.n	8004e56 <USBD_StdDevReq+0x1e>
 8004e4e:	b15b      	cbz	r3, 8004e68 <USBD_StdDevReq+0x30>
      USBD_CtlError(pdev, req);
 8004e50:	f7ff ffe7 	bl	8004e22 <USBD_CtlError>
      break;
 8004e54:	e005      	b.n	8004e62 <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8004e56:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	4628      	mov	r0, r5
 8004e60:	4798      	blx	r3
}
 8004e62:	2000      	movs	r0, #0
 8004e64:	b003      	add	sp, #12
 8004e66:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8004e68:	784b      	ldrb	r3, [r1, #1]
 8004e6a:	2b09      	cmp	r3, #9
 8004e6c:	f200 8197 	bhi.w	800519e <USBD_StdDevReq+0x366>
 8004e70:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004e74:	0183015f 	.word	0x0183015f
 8004e78:	017a0195 	.word	0x017a0195
 8004e7c:	00c90195 	.word	0x00c90195
 8004e80:	0195000a 	.word	0x0195000a
 8004e84:	00ee0140 	.word	0x00ee0140
  uint16_t len = 0U;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8004e8e:	884a      	ldrh	r2, [r1, #2]
 8004e90:	0a13      	lsrs	r3, r2, #8
 8004e92:	3b01      	subs	r3, #1
 8004e94:	2b06      	cmp	r3, #6
 8004e96:	f200 80a4 	bhi.w	8004fe2 <USBD_StdDevReq+0x1aa>
 8004e9a:	e8df f003 	tbb	[pc, r3]
 8004e9e:	1804      	.short	0x1804
 8004ea0:	86a2a22c 	.word	0x86a2a22c
 8004ea4:	93          	.byte	0x93
 8004ea5:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004ea6:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f10d 0106 	add.w	r1, sp, #6
 8004eb0:	7c00      	ldrb	r0, [r0, #16]
 8004eb2:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8004eb4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004eb8:	2a00      	cmp	r2, #0
 8004eba:	f000 809f 	beq.w	8004ffc <USBD_StdDevReq+0x1c4>
 8004ebe:	88e3      	ldrh	r3, [r4, #6]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f040 8092 	bne.w	8004fea <USBD_StdDevReq+0x1b2>
      (void)USBD_CtlSendStatus(pdev);
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 fac1 	bl	800544e <USBD_CtlSendStatus>
 8004ecc:	e7c9      	b.n	8004e62 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ece:	7c03      	ldrb	r3, [r0, #16]
 8004ed0:	b943      	cbnz	r3, 8004ee4 <USBD_StdDevReq+0xac>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004ed2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	f10d 0006 	add.w	r0, sp, #6
 8004edc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ede:	2302      	movs	r3, #2
 8004ee0:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004ee2:	e7e7      	b.n	8004eb4 <USBD_StdDevReq+0x7c>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004ee4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	f10d 0006 	add.w	r0, sp, #6
 8004eee:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004ef4:	e7de      	b.n	8004eb4 <USBD_StdDevReq+0x7c>
      switch ((uint8_t)(req->wValue))
 8004ef6:	b2d2      	uxtb	r2, r2
 8004ef8:	2a05      	cmp	r2, #5
 8004efa:	d852      	bhi.n	8004fa2 <USBD_StdDevReq+0x16a>
 8004efc:	e8df f002 	tbb	[pc, r2]
 8004f00:	2a1d1003 	.word	0x2a1d1003
 8004f04:	4437      	.short	0x4437
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004f06:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	b123      	cbz	r3, 8004f18 <USBD_StdDevReq+0xe0>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004f0e:	f10d 0106 	add.w	r1, sp, #6
 8004f12:	7c00      	ldrb	r0, [r0, #16]
 8004f14:	4798      	blx	r3
  if (err != 0U)
 8004f16:	e7cd      	b.n	8004eb4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004f18:	4621      	mov	r1, r4
 8004f1a:	f7ff ff82 	bl	8004e22 <USBD_CtlError>
  if (err != 0U)
 8004f1e:	e7a0      	b.n	8004e62 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004f20:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	b123      	cbz	r3, 8004f32 <USBD_StdDevReq+0xfa>
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004f28:	f10d 0106 	add.w	r1, sp, #6
 8004f2c:	7c00      	ldrb	r0, [r0, #16]
 8004f2e:	4798      	blx	r3
  if (err != 0U)
 8004f30:	e7c0      	b.n	8004eb4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004f32:	4621      	mov	r1, r4
 8004f34:	f7ff ff75 	bl	8004e22 <USBD_CtlError>
  if (err != 0U)
 8004f38:	e793      	b.n	8004e62 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004f3a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	b123      	cbz	r3, 8004f4c <USBD_StdDevReq+0x114>
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004f42:	f10d 0106 	add.w	r1, sp, #6
 8004f46:	7c00      	ldrb	r0, [r0, #16]
 8004f48:	4798      	blx	r3
  if (err != 0U)
 8004f4a:	e7b3      	b.n	8004eb4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	f7ff ff68 	bl	8004e22 <USBD_CtlError>
  if (err != 0U)
 8004f52:	e786      	b.n	8004e62 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004f54:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	b123      	cbz	r3, 8004f66 <USBD_StdDevReq+0x12e>
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004f5c:	f10d 0106 	add.w	r1, sp, #6
 8004f60:	7c00      	ldrb	r0, [r0, #16]
 8004f62:	4798      	blx	r3
  if (err != 0U)
 8004f64:	e7a6      	b.n	8004eb4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004f66:	4621      	mov	r1, r4
 8004f68:	f7ff ff5b 	bl	8004e22 <USBD_CtlError>
  if (err != 0U)
 8004f6c:	e779      	b.n	8004e62 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004f6e:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	b123      	cbz	r3, 8004f80 <USBD_StdDevReq+0x148>
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004f76:	f10d 0106 	add.w	r1, sp, #6
 8004f7a:	7c00      	ldrb	r0, [r0, #16]
 8004f7c:	4798      	blx	r3
  if (err != 0U)
 8004f7e:	e799      	b.n	8004eb4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004f80:	4621      	mov	r1, r4
 8004f82:	f7ff ff4e 	bl	8004e22 <USBD_CtlError>
  if (err != 0U)
 8004f86:	e76c      	b.n	8004e62 <USBD_StdDevReq+0x2a>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004f88:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	b123      	cbz	r3, 8004f9a <USBD_StdDevReq+0x162>
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004f90:	f10d 0106 	add.w	r1, sp, #6
 8004f94:	7c00      	ldrb	r0, [r0, #16]
 8004f96:	4798      	blx	r3
  if (err != 0U)
 8004f98:	e78c      	b.n	8004eb4 <USBD_StdDevReq+0x7c>
            USBD_CtlError(pdev, req);
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	f7ff ff41 	bl	8004e22 <USBD_CtlError>
  if (err != 0U)
 8004fa0:	e75f      	b.n	8004e62 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	f7ff ff3d 	bl	8004e22 <USBD_CtlError>
  if (err != 0U)
 8004fa8:	e75b      	b.n	8004e62 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004faa:	7c03      	ldrb	r3, [r0, #16]
 8004fac:	b933      	cbnz	r3, 8004fbc <USBD_StdDevReq+0x184>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004fae:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb4:	f10d 0006 	add.w	r0, sp, #6
 8004fb8:	4798      	blx	r3
  if (err != 0U)
 8004fba:	e77b      	b.n	8004eb4 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8004fbc:	4621      	mov	r1, r4
 8004fbe:	f7ff ff30 	bl	8004e22 <USBD_CtlError>
  if (err != 0U)
 8004fc2:	e74e      	b.n	8004e62 <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fc4:	7c03      	ldrb	r3, [r0, #16]
 8004fc6:	b943      	cbnz	r3, 8004fda <USBD_StdDevReq+0x1a2>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004fc8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	f10d 0006 	add.w	r0, sp, #6
 8004fd2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004fd4:	2307      	movs	r3, #7
 8004fd6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004fd8:	e76c      	b.n	8004eb4 <USBD_StdDevReq+0x7c>
        USBD_CtlError(pdev, req);
 8004fda:	4621      	mov	r1, r4
 8004fdc:	f7ff ff21 	bl	8004e22 <USBD_CtlError>
  if (err != 0U)
 8004fe0:	e73f      	b.n	8004e62 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	f7ff ff1d 	bl	8004e22 <USBD_CtlError>
    return;
 8004fe8:	e73b      	b.n	8004e62 <USBD_StdDevReq+0x2a>
      len = MIN(len, req->wLength);
 8004fea:	429a      	cmp	r2, r3
 8004fec:	bf28      	it	cs
 8004fee:	461a      	movcs	r2, r3
 8004ff0:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004ff4:	4601      	mov	r1, r0
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	f000 f9fd 	bl	80053f6 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8004ffc:	88e3      	ldrh	r3, [r4, #6]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f47f af2f 	bne.w	8004e62 <USBD_StdDevReq+0x2a>
 8005004:	e75f      	b.n	8004ec6 <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005006:	888b      	ldrh	r3, [r1, #4]
 8005008:	b9eb      	cbnz	r3, 8005046 <USBD_StdDevReq+0x20e>
 800500a:	88cb      	ldrh	r3, [r1, #6]
 800500c:	b9db      	cbnz	r3, 8005046 <USBD_StdDevReq+0x20e>
 800500e:	884b      	ldrh	r3, [r1, #2]
 8005010:	2b7f      	cmp	r3, #127	; 0x7f
 8005012:	d818      	bhi.n	8005046 <USBD_StdDevReq+0x20e>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005014:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8005018:	2a03      	cmp	r2, #3
 800501a:	d00d      	beq.n	8005038 <USBD_StdDevReq+0x200>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800501c:	b2dc      	uxtb	r4, r3
      pdev->dev_address = dev_addr;
 800501e:	f880 429e 	strb.w	r4, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005022:	4621      	mov	r1, r4
 8005024:	f000 fcaa 	bl	800597c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005028:	4628      	mov	r0, r5
 800502a:	f000 fa10 	bl	800544e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800502e:	b134      	cbz	r4, 800503e <USBD_StdDevReq+0x206>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005030:	2302      	movs	r3, #2
 8005032:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8005036:	e714      	b.n	8004e62 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8005038:	f7ff fef3 	bl	8004e22 <USBD_CtlError>
 800503c:	e711      	b.n	8004e62 <USBD_StdDevReq+0x2a>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800503e:	2301      	movs	r3, #1
 8005040:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8005044:	e70d      	b.n	8004e62 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8005046:	4621      	mov	r1, r4
 8005048:	4628      	mov	r0, r5
 800504a:	f7ff feea 	bl	8004e22 <USBD_CtlError>
 800504e:	e708      	b.n	8004e62 <USBD_StdDevReq+0x2a>
  cfgidx = (uint8_t)(req->wValue);
 8005050:	788b      	ldrb	r3, [r1, #2]
 8005052:	4a54      	ldr	r2, [pc, #336]	; (80051a4 <USBD_StdDevReq+0x36c>)
 8005054:	7013      	strb	r3, [r2, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005056:	2b01      	cmp	r3, #1
 8005058:	d80d      	bhi.n	8005076 <USBD_StdDevReq+0x23e>
    switch (pdev->dev_state)
 800505a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800505e:	2a02      	cmp	r2, #2
 8005060:	d00c      	beq.n	800507c <USBD_StdDevReq+0x244>
 8005062:	2a03      	cmp	r2, #3
 8005064:	d020      	beq.n	80050a8 <USBD_StdDevReq+0x270>
        USBD_CtlError(pdev, req);
 8005066:	f7ff fedc 	bl	8004e22 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800506a:	4b4e      	ldr	r3, [pc, #312]	; (80051a4 <USBD_StdDevReq+0x36c>)
 800506c:	7819      	ldrb	r1, [r3, #0]
 800506e:	4628      	mov	r0, r5
 8005070:	f7ff fd98 	bl	8004ba4 <USBD_ClrClassConfig>
        break;
 8005074:	e6f5      	b.n	8004e62 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8005076:	f7ff fed4 	bl	8004e22 <USBD_CtlError>
 800507a:	e6f2      	b.n	8004e62 <USBD_StdDevReq+0x2a>
        if (cfgidx)
 800507c:	b18b      	cbz	r3, 80050a2 <USBD_StdDevReq+0x26a>
          pdev->dev_config = cfgidx;
 800507e:	2101      	movs	r1, #1
 8005080:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005082:	2303      	movs	r3, #3
 8005084:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005088:	f7ff fd7f 	bl	8004b8a <USBD_SetClassConfig>
 800508c:	2802      	cmp	r0, #2
 800508e:	d003      	beq.n	8005098 <USBD_StdDevReq+0x260>
          USBD_CtlSendStatus(pdev);
 8005090:	4628      	mov	r0, r5
 8005092:	f000 f9dc 	bl	800544e <USBD_CtlSendStatus>
 8005096:	e6e4      	b.n	8004e62 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 8005098:	4621      	mov	r1, r4
 800509a:	4628      	mov	r0, r5
 800509c:	f7ff fec1 	bl	8004e22 <USBD_CtlError>
            return;
 80050a0:	e6df      	b.n	8004e62 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 80050a2:	f000 f9d4 	bl	800544e <USBD_CtlSendStatus>
 80050a6:	e6dc      	b.n	8004e62 <USBD_StdDevReq+0x2a>
        if (cfgidx == 0U)
 80050a8:	b18b      	cbz	r3, 80050ce <USBD_StdDevReq+0x296>
        else if (cfgidx != pdev->dev_config)
 80050aa:	6841      	ldr	r1, [r0, #4]
 80050ac:	2901      	cmp	r1, #1
 80050ae:	d01e      	beq.n	80050ee <USBD_StdDevReq+0x2b6>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80050b0:	b2c9      	uxtb	r1, r1
 80050b2:	f7ff fd77 	bl	8004ba4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80050b6:	4b3b      	ldr	r3, [pc, #236]	; (80051a4 <USBD_StdDevReq+0x36c>)
 80050b8:	7819      	ldrb	r1, [r3, #0]
 80050ba:	6069      	str	r1, [r5, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80050bc:	4628      	mov	r0, r5
 80050be:	f7ff fd64 	bl	8004b8a <USBD_SetClassConfig>
 80050c2:	2802      	cmp	r0, #2
 80050c4:	d00e      	beq.n	80050e4 <USBD_StdDevReq+0x2ac>
          USBD_CtlSendStatus(pdev);
 80050c6:	4628      	mov	r0, r5
 80050c8:	f000 f9c1 	bl	800544e <USBD_CtlSendStatus>
 80050cc:	e6c9      	b.n	8004e62 <USBD_StdDevReq+0x2a>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80050ce:	2302      	movs	r3, #2
 80050d0:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80050d4:	2100      	movs	r1, #0
 80050d6:	6041      	str	r1, [r0, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80050d8:	f7ff fd64 	bl	8004ba4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80050dc:	4628      	mov	r0, r5
 80050de:	f000 f9b6 	bl	800544e <USBD_CtlSendStatus>
 80050e2:	e6be      	b.n	8004e62 <USBD_StdDevReq+0x2a>
            USBD_CtlError(pdev, req);
 80050e4:	4621      	mov	r1, r4
 80050e6:	4628      	mov	r0, r5
 80050e8:	f7ff fe9b 	bl	8004e22 <USBD_CtlError>
            return;
 80050ec:	e6b9      	b.n	8004e62 <USBD_StdDevReq+0x2a>
          USBD_CtlSendStatus(pdev);
 80050ee:	f000 f9ae 	bl	800544e <USBD_CtlSendStatus>
 80050f2:	e6b6      	b.n	8004e62 <USBD_StdDevReq+0x2a>
  if (req->wLength != 1U)
 80050f4:	88cb      	ldrh	r3, [r1, #6]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d10a      	bne.n	8005110 <USBD_StdDevReq+0x2d8>
    switch (pdev->dev_state)
 80050fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d909      	bls.n	8005116 <USBD_StdDevReq+0x2de>
 8005102:	2b03      	cmp	r3, #3
 8005104:	d108      	bne.n	8005118 <USBD_StdDevReq+0x2e0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005106:	2201      	movs	r2, #1
 8005108:	1d01      	adds	r1, r0, #4
 800510a:	f000 f974 	bl	80053f6 <USBD_CtlSendData>
        break;
 800510e:	e6a8      	b.n	8004e62 <USBD_StdDevReq+0x2a>
    USBD_CtlError(pdev, req);
 8005110:	f7ff fe87 	bl	8004e22 <USBD_CtlError>
 8005114:	e6a5      	b.n	8004e62 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8005116:	b923      	cbnz	r3, 8005122 <USBD_StdDevReq+0x2ea>
        USBD_CtlError(pdev, req);
 8005118:	4621      	mov	r1, r4
 800511a:	4628      	mov	r0, r5
 800511c:	f7ff fe81 	bl	8004e22 <USBD_CtlError>
        break;
 8005120:	e69f      	b.n	8004e62 <USBD_StdDevReq+0x2a>
        pdev->dev_default_config = 0U;
 8005122:	4601      	mov	r1, r0
 8005124:	2300      	movs	r3, #0
 8005126:	f841 3f08 	str.w	r3, [r1, #8]!
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800512a:	2201      	movs	r2, #1
 800512c:	f000 f963 	bl	80053f6 <USBD_CtlSendData>
        break;
 8005130:	e697      	b.n	8004e62 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8005132:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8005136:	3b01      	subs	r3, #1
 8005138:	2b02      	cmp	r3, #2
 800513a:	d812      	bhi.n	8005162 <USBD_StdDevReq+0x32a>
      if (req->wLength != 0x2U)
 800513c:	88cb      	ldrh	r3, [r1, #6]
 800513e:	2b02      	cmp	r3, #2
 8005140:	d10c      	bne.n	800515c <USBD_StdDevReq+0x324>
      if (pdev->dev_remote_wakeup)
 8005142:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf14      	ite	ne
 800514a:	2303      	movne	r3, #3
 800514c:	2301      	moveq	r3, #1
 800514e:	4601      	mov	r1, r0
 8005150:	f841 3f0c 	str.w	r3, [r1, #12]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005154:	2202      	movs	r2, #2
 8005156:	f000 f94e 	bl	80053f6 <USBD_CtlSendData>
      break;
 800515a:	e682      	b.n	8004e62 <USBD_StdDevReq+0x2a>
        USBD_CtlError(pdev, req);
 800515c:	f7ff fe61 	bl	8004e22 <USBD_CtlError>
        break;
 8005160:	e67f      	b.n	8004e62 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8005162:	f7ff fe5e 	bl	8004e22 <USBD_CtlError>
      break;
 8005166:	e67c      	b.n	8004e62 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005168:	884b      	ldrh	r3, [r1, #2]
 800516a:	2b01      	cmp	r3, #1
 800516c:	f47f ae79 	bne.w	8004e62 <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 8005170:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005174:	f000 f96b 	bl	800544e <USBD_CtlSendStatus>
 8005178:	e673      	b.n	8004e62 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 800517a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800517e:	3b01      	subs	r3, #1
 8005180:	2b02      	cmp	r3, #2
 8005182:	d809      	bhi.n	8005198 <USBD_StdDevReq+0x360>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005184:	884b      	ldrh	r3, [r1, #2]
 8005186:	2b01      	cmp	r3, #1
 8005188:	f47f ae6b 	bne.w	8004e62 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005192:	f000 f95c 	bl	800544e <USBD_CtlSendStatus>
 8005196:	e664      	b.n	8004e62 <USBD_StdDevReq+0x2a>
      USBD_CtlError(pdev, req);
 8005198:	f7ff fe43 	bl	8004e22 <USBD_CtlError>
      break;
 800519c:	e661      	b.n	8004e62 <USBD_StdDevReq+0x2a>
          USBD_CtlError(pdev, req);
 800519e:	f7ff fe40 	bl	8004e22 <USBD_CtlError>
          break;
 80051a2:	e65e      	b.n	8004e62 <USBD_StdDevReq+0x2a>
 80051a4:	20000420 	.word	0x20000420

080051a8 <USBD_StdItfReq>:
{
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4605      	mov	r5, r0
 80051ac:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051ae:	780b      	ldrb	r3, [r1, #0]
 80051b0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80051b4:	2a40      	cmp	r2, #64	; 0x40
 80051b6:	d006      	beq.n	80051c6 <USBD_StdItfReq+0x1e>
 80051b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80051bc:	d003      	beq.n	80051c6 <USBD_StdItfReq+0x1e>
      USBD_CtlError(pdev, req);
 80051be:	f7ff fe30 	bl	8004e22 <USBD_CtlError>
}
 80051c2:	2000      	movs	r0, #0
 80051c4:	bd38      	pop	{r3, r4, r5, pc}
      switch (pdev->dev_state)
 80051c6:	f895 329c 	ldrb.w	r3, [r5, #668]	; 0x29c
 80051ca:	3b01      	subs	r3, #1
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d816      	bhi.n	80051fe <USBD_StdItfReq+0x56>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80051d0:	7923      	ldrb	r3, [r4, #4]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d80e      	bhi.n	80051f4 <USBD_StdItfReq+0x4c>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051d6:	f8d5 32b4 	ldr.w	r3, [r5, #692]	; 0x2b4
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	4621      	mov	r1, r4
 80051de:	4628      	mov	r0, r5
 80051e0:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80051e2:	88e3      	ldrh	r3, [r4, #6]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1ec      	bne.n	80051c2 <USBD_StdItfReq+0x1a>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d1ea      	bne.n	80051c2 <USBD_StdItfReq+0x1a>
              USBD_CtlSendStatus(pdev);
 80051ec:	4628      	mov	r0, r5
 80051ee:	f000 f92e 	bl	800544e <USBD_CtlSendStatus>
 80051f2:	e7e6      	b.n	80051c2 <USBD_StdItfReq+0x1a>
            USBD_CtlError(pdev, req);
 80051f4:	4621      	mov	r1, r4
 80051f6:	4628      	mov	r0, r5
 80051f8:	f7ff fe13 	bl	8004e22 <USBD_CtlError>
 80051fc:	e7e1      	b.n	80051c2 <USBD_StdItfReq+0x1a>
          USBD_CtlError(pdev, req);
 80051fe:	4621      	mov	r1, r4
 8005200:	4628      	mov	r0, r5
 8005202:	f7ff fe0e 	bl	8004e22 <USBD_CtlError>
          break;
 8005206:	e7dc      	b.n	80051c2 <USBD_StdItfReq+0x1a>

08005208 <USBD_StdEPReq>:
{
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 800520c:	888a      	ldrh	r2, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800520e:	780b      	ldrb	r3, [r1, #0]
 8005210:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005214:	2b20      	cmp	r3, #32
 8005216:	d005      	beq.n	8005224 <USBD_StdEPReq+0x1c>
 8005218:	2b40      	cmp	r3, #64	; 0x40
 800521a:	d003      	beq.n	8005224 <USBD_StdEPReq+0x1c>
 800521c:	b14b      	cbz	r3, 8005232 <USBD_StdEPReq+0x2a>
      USBD_CtlError(pdev, req);
 800521e:	f7ff fe00 	bl	8004e22 <USBD_CtlError>
      break;
 8005222:	e004      	b.n	800522e <USBD_StdEPReq+0x26>
      pdev->pClass->Setup(pdev, req);
 8005224:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	4620      	mov	r0, r4
 800522c:	4798      	blx	r3
}
 800522e:	2000      	movs	r0, #0
 8005230:	bd38      	pop	{r3, r4, r5, pc}
  ep_addr  = LOBYTE(req->wIndex);
 8005232:	b2d0      	uxtb	r0, r2
      switch (req->bRequest)
 8005234:	784b      	ldrb	r3, [r1, #1]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d031      	beq.n	800529e <USBD_StdEPReq+0x96>
 800523a:	2b03      	cmp	r3, #3
 800523c:	d005      	beq.n	800524a <USBD_StdEPReq+0x42>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d056      	beq.n	80052f0 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8005242:	4620      	mov	r0, r4
 8005244:	f7ff fded 	bl	8004e22 <USBD_CtlError>
          break;
 8005248:	e7f1      	b.n	800522e <USBD_StdEPReq+0x26>
          switch (pdev->dev_state)
 800524a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800524e:	2b02      	cmp	r3, #2
 8005250:	d005      	beq.n	800525e <USBD_StdEPReq+0x56>
 8005252:	2b03      	cmp	r3, #3
 8005254:	d013      	beq.n	800527e <USBD_StdEPReq+0x76>
              USBD_CtlError(pdev, req);
 8005256:	4620      	mov	r0, r4
 8005258:	f7ff fde3 	bl	8004e22 <USBD_CtlError>
              break;
 800525c:	e7e7      	b.n	800522e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800525e:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8005262:	d008      	beq.n	8005276 <USBD_StdEPReq+0x6e>
                USBD_LL_StallEP(pdev, ep_addr);
 8005264:	4601      	mov	r1, r0
 8005266:	4620      	mov	r0, r4
 8005268:	f000 fb61 	bl	800592e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	4620      	mov	r0, r4
 8005270:	f000 fb5d 	bl	800592e <USBD_LL_StallEP>
 8005274:	e7db      	b.n	800522e <USBD_StdEPReq+0x26>
                USBD_CtlError(pdev, req);
 8005276:	4620      	mov	r0, r4
 8005278:	f7ff fdd3 	bl	8004e22 <USBD_CtlError>
 800527c:	e7d7      	b.n	800522e <USBD_StdEPReq+0x26>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800527e:	884b      	ldrh	r3, [r1, #2]
 8005280:	b923      	cbnz	r3, 800528c <USBD_StdEPReq+0x84>
                if ((ep_addr != 0x00U) &&
 8005282:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8005286:	d001      	beq.n	800528c <USBD_StdEPReq+0x84>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005288:	88cb      	ldrh	r3, [r1, #6]
 800528a:	b11b      	cbz	r3, 8005294 <USBD_StdEPReq+0x8c>
              USBD_CtlSendStatus(pdev);
 800528c:	4620      	mov	r0, r4
 800528e:	f000 f8de 	bl	800544e <USBD_CtlSendStatus>
              break;
 8005292:	e7cc      	b.n	800522e <USBD_StdEPReq+0x26>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005294:	4601      	mov	r1, r0
 8005296:	4620      	mov	r0, r4
 8005298:	f000 fb49 	bl	800592e <USBD_LL_StallEP>
 800529c:	e7f6      	b.n	800528c <USBD_StdEPReq+0x84>
          switch (pdev->dev_state)
 800529e:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d005      	beq.n	80052b2 <USBD_StdEPReq+0xaa>
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d013      	beq.n	80052d2 <USBD_StdEPReq+0xca>
              USBD_CtlError(pdev, req);
 80052aa:	4620      	mov	r0, r4
 80052ac:	f7ff fdb9 	bl	8004e22 <USBD_CtlError>
              break;
 80052b0:	e7bd      	b.n	800522e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052b2:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80052b6:	d008      	beq.n	80052ca <USBD_StdEPReq+0xc2>
                USBD_LL_StallEP(pdev, ep_addr);
 80052b8:	4601      	mov	r1, r0
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 fb37 	bl	800592e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80052c0:	2180      	movs	r1, #128	; 0x80
 80052c2:	4620      	mov	r0, r4
 80052c4:	f000 fb33 	bl	800592e <USBD_LL_StallEP>
 80052c8:	e7b1      	b.n	800522e <USBD_StdEPReq+0x26>
                USBD_CtlError(pdev, req);
 80052ca:	4620      	mov	r0, r4
 80052cc:	f7ff fda9 	bl	8004e22 <USBD_CtlError>
 80052d0:	e7ad      	b.n	800522e <USBD_StdEPReq+0x26>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052d2:	884b      	ldrh	r3, [r1, #2]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1aa      	bne.n	800522e <USBD_StdEPReq+0x26>
                if ((ep_addr & 0x7FU) != 0x00U)
 80052d8:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 80052dc:	d103      	bne.n	80052e6 <USBD_StdEPReq+0xde>
                USBD_CtlSendStatus(pdev);
 80052de:	4620      	mov	r0, r4
 80052e0:	f000 f8b5 	bl	800544e <USBD_CtlSendStatus>
 80052e4:	e7a3      	b.n	800522e <USBD_StdEPReq+0x26>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80052e6:	4601      	mov	r1, r0
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 fb28 	bl	800593e <USBD_LL_ClearStallEP>
 80052ee:	e7f6      	b.n	80052de <USBD_StdEPReq+0xd6>
          switch (pdev->dev_state)
 80052f0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d005      	beq.n	8005304 <USBD_StdEPReq+0xfc>
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d018      	beq.n	800532e <USBD_StdEPReq+0x126>
              USBD_CtlError(pdev, req);
 80052fc:	4620      	mov	r0, r4
 80052fe:	f7ff fd90 	bl	8004e22 <USBD_CtlError>
              break;
 8005302:	e794      	b.n	800522e <USBD_StdEPReq+0x26>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005304:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 8005308:	d003      	beq.n	8005312 <USBD_StdEPReq+0x10a>
                USBD_CtlError(pdev, req);
 800530a:	4620      	mov	r0, r4
 800530c:	f7ff fd89 	bl	8004e22 <USBD_CtlError>
                break;
 8005310:	e78d      	b.n	800522e <USBD_StdEPReq+0x26>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005312:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005316:	bf14      	ite	ne
 8005318:	f104 0114 	addne.w	r1, r4, #20
 800531c:	f504 71aa 	addeq.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8005320:	2300      	movs	r3, #0
 8005322:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005324:	2202      	movs	r2, #2
 8005326:	4620      	mov	r0, r4
 8005328:	f000 f865 	bl	80053f6 <USBD_CtlSendData>
              break;
 800532c:	e77f      	b.n	800522e <USBD_StdEPReq+0x26>
              if ((ep_addr & 0x80U) == 0x80U)
 800532e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005332:	d11b      	bne.n	800536c <USBD_StdEPReq+0x164>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005334:	f000 030f 	and.w	r3, r0, #15
 8005338:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800533c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005340:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8005344:	b333      	cbz	r3, 8005394 <USBD_StdEPReq+0x18c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005346:	f000 037f 	and.w	r3, r0, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800534a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800534e:	eb04 0583 	add.w	r5, r4, r3, lsl #2
 8005352:	f505 75aa 	add.w	r5, r5, #340	; 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005356:	f010 0f7f 	tst.w	r0, #127	; 0x7f
 800535a:	d01f      	beq.n	800539c <USBD_StdEPReq+0x194>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800535c:	4601      	mov	r1, r0
 800535e:	4620      	mov	r0, r4
 8005360:	f000 faf5 	bl	800594e <USBD_LL_IsStallEP>
 8005364:	3800      	subs	r0, #0
 8005366:	bf18      	it	ne
 8005368:	2001      	movne	r0, #1
 800536a:	e018      	b.n	800539e <USBD_StdEPReq+0x196>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800536c:	f000 030f 	and.w	r3, r0, #15
 8005370:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005374:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	b13b      	cbz	r3, 800538c <USBD_StdEPReq+0x184>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800537c:	f000 057f 	and.w	r5, r0, #127	; 0x7f
 8005380:	3501      	adds	r5, #1
 8005382:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8005386:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800538a:	e7e4      	b.n	8005356 <USBD_StdEPReq+0x14e>
                  USBD_CtlError(pdev, req);
 800538c:	4620      	mov	r0, r4
 800538e:	f7ff fd48 	bl	8004e22 <USBD_CtlError>
                  break;
 8005392:	e74c      	b.n	800522e <USBD_StdEPReq+0x26>
                  USBD_CtlError(pdev, req);
 8005394:	4620      	mov	r0, r4
 8005396:	f7ff fd44 	bl	8004e22 <USBD_CtlError>
                  break;
 800539a:	e748      	b.n	800522e <USBD_StdEPReq+0x26>
 800539c:	2000      	movs	r0, #0
                pep->status = 0x0000U;
 800539e:	6028      	str	r0, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80053a0:	2202      	movs	r2, #2
 80053a2:	4629      	mov	r1, r5
 80053a4:	4620      	mov	r0, r4
 80053a6:	f000 f826 	bl	80053f6 <USBD_CtlSendData>
              break;
 80053aa:	e740      	b.n	800522e <USBD_StdEPReq+0x26>

080053ac <USBD_GetString>:
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;

  if (desc != NULL)
 80053ac:	b310      	cbz	r0, 80053f4 <USBD_GetString+0x48>
{
 80053ae:	b510      	push	{r4, lr}
 80053b0:	4684      	mov	ip, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80053b2:	7803      	ldrb	r3, [r0, #0]
 80053b4:	b143      	cbz	r3, 80053c8 <USBD_GetString+0x1c>
 80053b6:	f1c0 0e01 	rsb	lr, r0, #1
  {
    len++;
 80053ba:	eb00 030e 	add.w	r3, r0, lr
 80053be:	b2db      	uxtb	r3, r3
  while (*buf != '\0')
 80053c0:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80053c4:	2c00      	cmp	r4, #0
 80053c6:	d1f8      	bne.n	80053ba <USBD_GetString+0xe>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	3302      	adds	r3, #2
 80053cc:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80053ce:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80053d0:	2303      	movs	r3, #3
 80053d2:	704b      	strb	r3, [r1, #1]
    while (*desc != '\0')
 80053d4:	f89c 0000 	ldrb.w	r0, [ip]
 80053d8:	b158      	cbz	r0, 80053f2 <USBD_GetString+0x46>
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80053da:	2302      	movs	r3, #2
      unicode[idx++] =  0U;
 80053dc:	2400      	movs	r4, #0
      unicode[idx++] = *desc++;
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	54c8      	strb	r0, [r1, r3]
      unicode[idx++] =  0U;
 80053e4:	3302      	adds	r3, #2
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	548c      	strb	r4, [r1, r2]
    while (*desc != '\0')
 80053ea:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d1f5      	bne.n	80053de <USBD_GetString+0x32>
}
 80053f2:	bd10      	pop	{r4, pc}
 80053f4:	4770      	bx	lr

080053f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80053f6:	b508      	push	{r3, lr}
 80053f8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80053fa:	2202      	movs	r2, #2
 80053fc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005400:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;
 8005402:	6203      	str	r3, [r0, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005404:	460a      	mov	r2, r1
 8005406:	2100      	movs	r1, #0
 8005408:	f000 fac0 	bl	800598c <USBD_LL_Transmit>

  return USBD_OK;
}
 800540c:	2000      	movs	r0, #0
 800540e:	bd08      	pop	{r3, pc}

08005410 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005410:	b508      	push	{r3, lr}
 8005412:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005414:	460a      	mov	r2, r1
 8005416:	2100      	movs	r1, #0
 8005418:	f000 fab8 	bl	800598c <USBD_LL_Transmit>

  return USBD_OK;
}
 800541c:	2000      	movs	r0, #0
 800541e:	bd08      	pop	{r3, pc}

08005420 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005420:	b508      	push	{r3, lr}
 8005422:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005424:	2203      	movs	r2, #3
 8005426:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800542a:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800542e:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005432:	460a      	mov	r2, r1
 8005434:	2100      	movs	r1, #0
 8005436:	f000 fab1 	bl	800599c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800543a:	2000      	movs	r0, #0
 800543c:	bd08      	pop	{r3, pc}

0800543e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800543e:	b508      	push	{r3, lr}
 8005440:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005442:	460a      	mov	r2, r1
 8005444:	2100      	movs	r1, #0
 8005446:	f000 faa9 	bl	800599c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800544a:	2000      	movs	r0, #0
 800544c:	bd08      	pop	{r3, pc}

0800544e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800544e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005450:	2304      	movs	r3, #4
 8005452:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005456:	2300      	movs	r3, #0
 8005458:	461a      	mov	r2, r3
 800545a:	4619      	mov	r1, r3
 800545c:	f000 fa96 	bl	800598c <USBD_LL_Transmit>

  return USBD_OK;
}
 8005460:	2000      	movs	r0, #0
 8005462:	bd08      	pop	{r3, pc}

08005464 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005464:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005466:	2305      	movs	r3, #5
 8005468:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800546c:	2300      	movs	r3, #0
 800546e:	461a      	mov	r2, r3
 8005470:	4619      	mov	r1, r3
 8005472:	f000 fa93 	bl	800599c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005476:	2000      	movs	r0, #0
 8005478:	bd08      	pop	{r3, pc}
	...

0800547c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800547c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800547e:	2200      	movs	r2, #0
 8005480:	490f      	ldr	r1, [pc, #60]	; (80054c0 <MX_USB_DEVICE_Init+0x44>)
 8005482:	4810      	ldr	r0, [pc, #64]	; (80054c4 <MX_USB_DEVICE_Init+0x48>)
 8005484:	f7ff fb5e 	bl	8004b44 <USBD_Init>
 8005488:	b970      	cbnz	r0, 80054a8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800548a:	490f      	ldr	r1, [pc, #60]	; (80054c8 <MX_USB_DEVICE_Init+0x4c>)
 800548c:	480d      	ldr	r0, [pc, #52]	; (80054c4 <MX_USB_DEVICE_Init+0x48>)
 800548e:	f7ff fb70 	bl	8004b72 <USBD_RegisterClass>
 8005492:	b960      	cbnz	r0, 80054ae <MX_USB_DEVICE_Init+0x32>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005494:	490d      	ldr	r1, [pc, #52]	; (80054cc <MX_USB_DEVICE_Init+0x50>)
 8005496:	480b      	ldr	r0, [pc, #44]	; (80054c4 <MX_USB_DEVICE_Init+0x48>)
 8005498:	f7ff fb0c 	bl	8004ab4 <USBD_CDC_RegisterInterface>
 800549c:	b950      	cbnz	r0, 80054b4 <MX_USB_DEVICE_Init+0x38>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800549e:	4809      	ldr	r0, [pc, #36]	; (80054c4 <MX_USB_DEVICE_Init+0x48>)
 80054a0:	f7ff fb6e 	bl	8004b80 <USBD_Start>
 80054a4:	b948      	cbnz	r0, 80054ba <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80054a6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80054a8:	f7fb fa3c 	bl	8000924 <Error_Handler>
 80054ac:	e7ed      	b.n	800548a <MX_USB_DEVICE_Init+0xe>
    Error_Handler();
 80054ae:	f7fb fa39 	bl	8000924 <Error_Handler>
 80054b2:	e7ef      	b.n	8005494 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 80054b4:	f7fb fa36 	bl	8000924 <Error_Handler>
 80054b8:	e7f1      	b.n	800549e <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 80054ba:	f7fb fa33 	bl	8000924 <Error_Handler>
}
 80054be:	e7f2      	b.n	80054a6 <MX_USB_DEVICE_Init+0x2a>
 80054c0:	20000188 	.word	0x20000188
 80054c4:	20000424 	.word	0x20000424
 80054c8:	2000005c 	.word	0x2000005c
 80054cc:	2000016c 	.word	0x2000016c

080054d0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80054d0:	2000      	movs	r0, #0
 80054d2:	4770      	bx	lr

080054d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80054d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d8:	4607      	mov	r7, r0
 80054da:	4688      	mov	r8, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80054dc:	4c25      	ldr	r4, [pc, #148]	; (8005574 <CDC_Receive_FS+0xa0>)
 80054de:	4601      	mov	r1, r0
 80054e0:	4620      	mov	r0, r4
 80054e2:	f7ff faf6 	bl	8004ad2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80054e6:	4620      	mov	r0, r4
 80054e8:	f7ff fb13 	bl	8004b12 <USBD_CDC_ReceivePacket>
  //COBS decode
  for(uint32_t i=0;i<*Len;i++)
 80054ec:	f8d8 3000 	ldr.w	r3, [r8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d03b      	beq.n	800556c <CDC_Receive_FS+0x98>
 80054f4:	1e7c      	subs	r4, r7, #1
  {
	zero_count--;
 80054f6:	4d20      	ldr	r5, [pc, #128]	; (8005578 <CDC_Receive_FS+0xa4>)
        //reset
        zero_count=0;
      }
      data_index=0;
    }else{
      if(is_first==1){
 80054f8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005584 <CDC_Receive_FS+0xb0>
    	DecodedData[data_index]=0x00;
        zero_count=Buf[i];
      }else{
    	DecodedData[data_index]=Buf[i];
      }
      data_index++;
 80054fc:	4e1f      	ldr	r6, [pc, #124]	; (800557c <CDC_Receive_FS+0xa8>)
 80054fe:	e00d      	b.n	800551c <CDC_Receive_FS+0x48>
    	usb_process(DecodedData,data_index);
 8005500:	7831      	ldrb	r1, [r6, #0]
 8005502:	481f      	ldr	r0, [pc, #124]	; (8005580 <CDC_Receive_FS+0xac>)
 8005504:	f7fa ffc2 	bl	800048c <usb_process>
      data_index=0;
 8005508:	2300      	movs	r3, #0
 800550a:	7033      	strb	r3, [r6, #0]
  for(uint32_t i=0;i<*Len;i++)
 800550c:	f10a 0a02 	add.w	sl, sl, #2
 8005510:	ebaa 0a07 	sub.w	sl, sl, r7
 8005514:	f8d8 3000 	ldr.w	r3, [r8]
 8005518:	4553      	cmp	r3, sl
 800551a:	d927      	bls.n	800556c <CDC_Receive_FS+0x98>
	zero_count--;
 800551c:	782b      	ldrb	r3, [r5, #0]
 800551e:	3b01      	subs	r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	702b      	strb	r3, [r5, #0]
    if(Buf[i]=='\0'){
 8005524:	46a2      	mov	sl, r4
 8005526:	3401      	adds	r4, #1
 8005528:	7822      	ldrb	r2, [r4, #0]
 800552a:	b93a      	cbnz	r2, 800553c <CDC_Receive_FS+0x68>
      is_first = 1;
 800552c:	2201      	movs	r2, #1
 800552e:	f889 2000 	strb.w	r2, [r9]
      if(zero_count==0){
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0e4      	beq.n	8005500 <CDC_Receive_FS+0x2c>
        zero_count=0;
 8005536:	2300      	movs	r3, #0
 8005538:	702b      	strb	r3, [r5, #0]
 800553a:	e7e5      	b.n	8005508 <CDC_Receive_FS+0x34>
      if(is_first==1){
 800553c:	f899 0000 	ldrb.w	r0, [r9]
 8005540:	2801      	cmp	r0, #1
 8005542:	d00a      	beq.n	800555a <CDC_Receive_FS+0x86>
      if(zero_count==0){
 8005544:	b973      	cbnz	r3, 8005564 <CDC_Receive_FS+0x90>
    	DecodedData[data_index]=0x00;
 8005546:	7833      	ldrb	r3, [r6, #0]
 8005548:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <CDC_Receive_FS+0xac>)
 800554a:	2000      	movs	r0, #0
 800554c:	54d0      	strb	r0, [r2, r3]
        zero_count=Buf[i];
 800554e:	7823      	ldrb	r3, [r4, #0]
 8005550:	702b      	strb	r3, [r5, #0]
      data_index++;
 8005552:	7833      	ldrb	r3, [r6, #0]
 8005554:	3301      	adds	r3, #1
 8005556:	7033      	strb	r3, [r6, #0]
 8005558:	e7d8      	b.n	800550c <CDC_Receive_FS+0x38>
    	  zero_count = Buf[i];
 800555a:	702a      	strb	r2, [r5, #0]
    	  is_first = 0;
 800555c:	2300      	movs	r3, #0
 800555e:	f889 3000 	strb.w	r3, [r9]
    	  continue;
 8005562:	e7d3      	b.n	800550c <CDC_Receive_FS+0x38>
    	DecodedData[data_index]=Buf[i];
 8005564:	7833      	ldrb	r3, [r6, #0]
 8005566:	4906      	ldr	r1, [pc, #24]	; (8005580 <CDC_Receive_FS+0xac>)
 8005568:	54ca      	strb	r2, [r1, r3]
 800556a:	e7f2      	b.n	8005552 <CDC_Receive_FS+0x7e>
    }
  }
  
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800556c:	2000      	movs	r0, #0
 800556e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005572:	bf00      	nop
 8005574:	20000424 	.word	0x20000424
 8005578:	20000184 	.word	0x20000184
 800557c:	20000f28 	.word	0x20000f28
 8005580:	200006e8 	.word	0x200006e8
 8005584:	20000f29 	.word	0x20000f29

08005588 <CDC_Control_FS>:
{
 8005588:	b510      	push	{r4, lr}
 800558a:	460c      	mov	r4, r1
  switch(cmd)
 800558c:	2820      	cmp	r0, #32
 800558e:	d003      	beq.n	8005598 <CDC_Control_FS+0x10>
 8005590:	2821      	cmp	r0, #33	; 0x21
 8005592:	d019      	beq.n	80055c8 <CDC_Control_FS+0x40>
}
 8005594:	2000      	movs	r0, #0
 8005596:	bd10      	pop	{r4, pc}
    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 8005598:	2201      	movs	r2, #1
 800559a:	2120      	movs	r1, #32
 800559c:	4815      	ldr	r0, [pc, #84]	; (80055f4 <CDC_Control_FS+0x6c>)
 800559e:	f7fc f86d 	bl	800167c <HAL_GPIO_WritePin>
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80055a2:	4a15      	ldr	r2, [pc, #84]	; (80055f8 <CDC_Control_FS+0x70>)
 80055a4:	7861      	ldrb	r1, [r4, #1]
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80055a6:	78a3      	ldrb	r3, [r4, #2]
 80055a8:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80055aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80055ae:	7821      	ldrb	r1, [r4, #0]
 80055b0:	430b      	orrs	r3, r1
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 80055b2:	78e1      	ldrb	r1, [r4, #3]
 80055b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80055b8:	6013      	str	r3, [r2, #0]
      linecoding.format     = pbuf[4];
 80055ba:	7923      	ldrb	r3, [r4, #4]
 80055bc:	7113      	strb	r3, [r2, #4]
      linecoding.paritytype = pbuf[5];
 80055be:	7963      	ldrb	r3, [r4, #5]
 80055c0:	7153      	strb	r3, [r2, #5]
      linecoding.datatype   = pbuf[6];
 80055c2:	79a3      	ldrb	r3, [r4, #6]
 80055c4:	7193      	strb	r3, [r2, #6]
    break;
 80055c6:	e7e5      	b.n	8005594 <CDC_Control_FS+0xc>
    	HAL_GPIO_WritePin(GPIOB,LED_GREEN_Pin,GPIO_PIN_SET);
 80055c8:	2201      	movs	r2, #1
 80055ca:	2120      	movs	r1, #32
 80055cc:	4809      	ldr	r0, [pc, #36]	; (80055f4 <CDC_Control_FS+0x6c>)
 80055ce:	f7fc f855 	bl	800167c <HAL_GPIO_WritePin>
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <CDC_Control_FS+0x70>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	7022      	strb	r2, [r4, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	0a12      	lsrs	r2, r2, #8
 80055dc:	7062      	strb	r2, [r4, #1]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 80055de:	885a      	ldrh	r2, [r3, #2]
 80055e0:	70a2      	strb	r2, [r4, #2]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 80055e2:	78da      	ldrb	r2, [r3, #3]
 80055e4:	70e2      	strb	r2, [r4, #3]
      pbuf[4] = linecoding.format;
 80055e6:	791a      	ldrb	r2, [r3, #4]
 80055e8:	7122      	strb	r2, [r4, #4]
      pbuf[5] = linecoding.paritytype;
 80055ea:	795a      	ldrb	r2, [r3, #5]
 80055ec:	7162      	strb	r2, [r4, #5]
      pbuf[6] = linecoding.datatype;
 80055ee:	799b      	ldrb	r3, [r3, #6]
 80055f0:	71a3      	strb	r3, [r4, #6]
    break;
 80055f2:	e7cf      	b.n	8005594 <CDC_Control_FS+0xc>
 80055f4:	48000400 	.word	0x48000400
 80055f8:	2000017c 	.word	0x2000017c

080055fc <CDC_Init_FS>:
{
 80055fc:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80055fe:	4c06      	ldr	r4, [pc, #24]	; (8005618 <CDC_Init_FS+0x1c>)
 8005600:	2200      	movs	r2, #0
 8005602:	4906      	ldr	r1, [pc, #24]	; (800561c <CDC_Init_FS+0x20>)
 8005604:	4620      	mov	r0, r4
 8005606:	f7ff fa5c 	bl	8004ac2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800560a:	4905      	ldr	r1, [pc, #20]	; (8005620 <CDC_Init_FS+0x24>)
 800560c:	4620      	mov	r0, r4
 800560e:	f7ff fa60 	bl	8004ad2 <USBD_CDC_SetRxBuffer>
}
 8005612:	2000      	movs	r0, #0
 8005614:	bd10      	pop	{r4, pc}
 8005616:	bf00      	nop
 8005618:	20000424 	.word	0x20000424
 800561c:	20000b28 	.word	0x20000b28
 8005620:	20000728 	.word	0x20000728

08005624 <CDC_Transmit_FS>:
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <CDC_Transmit_FS+0x28>)
 8005626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
  if (hcdc->TxState != 0){
 800562a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800562e:	b10b      	cbz	r3, 8005634 <CDC_Transmit_FS+0x10>
    return USBD_BUSY;
 8005630:	2001      	movs	r0, #1
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
  /* USER CODE END 7 */
  return result;
}
 8005632:	4770      	bx	lr
{
 8005634:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005636:	4c05      	ldr	r4, [pc, #20]	; (800564c <CDC_Transmit_FS+0x28>)
 8005638:	460a      	mov	r2, r1
 800563a:	4601      	mov	r1, r0
 800563c:	4620      	mov	r0, r4
 800563e:	f7ff fa40 	bl	8004ac2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005642:	4620      	mov	r0, r4
 8005644:	f7ff fa4b 	bl	8004ade <USBD_CDC_TransmitPacket>
}
 8005648:	bd10      	pop	{r4, pc}
 800564a:	bf00      	nop
 800564c:	20000424 	.word	0x20000424

08005650 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005650:	2312      	movs	r3, #18
 8005652:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8005654:	4800      	ldr	r0, [pc, #0]	; (8005658 <USBD_FS_DeviceDescriptor+0x8>)
 8005656:	4770      	bx	lr
 8005658:	200001a4 	.word	0x200001a4

0800565c <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800565c:	2304      	movs	r3, #4
 800565e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8005660:	4800      	ldr	r0, [pc, #0]	; (8005664 <USBD_FS_LangIDStrDescriptor+0x8>)
 8005662:	4770      	bx	lr
 8005664:	200001b8 	.word	0x200001b8

08005668 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8005668:	b1b2      	cbz	r2, 8005698 <IntToUnicode+0x30>
 800566a:	1c4b      	adds	r3, r1, #1
 800566c:	f102 3cff 	add.w	ip, r2, #4294967295
 8005670:	fa5f fc8c 	uxtb.w	ip, ip
 8005674:	3103      	adds	r1, #3
 8005676:	eb01 014c 	add.w	r1, r1, ip, lsl #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 800567a:	f04f 0c00 	mov.w	ip, #0
    if (((value >> 28)) < 0xA)
 800567e:	0f02      	lsrs	r2, r0, #28
 8005680:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 8005684:	bf34      	ite	cc
 8005686:	3230      	addcc	r2, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005688:	3237      	addcs	r2, #55	; 0x37
 800568a:	f803 2c01 	strb.w	r2, [r3, #-1]
    value = value << 4;
 800568e:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8005690:	f803 cb02 	strb.w	ip, [r3], #2
  for (idx = 0; idx < len; idx++)
 8005694:	428b      	cmp	r3, r1
 8005696:	d1f2      	bne.n	800567e <IntToUnicode+0x16>
  }
}
 8005698:	4770      	bx	lr
	...

0800569c <USBD_FS_SerialStrDescriptor>:
{
 800569c:	b538      	push	{r3, r4, r5, lr}
  *length = USB_SIZ_STRING_SERIAL;
 800569e:	231a      	movs	r3, #26
 80056a0:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80056a2:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <USBD_FS_SerialStrDescriptor+0x38>)
 80056a4:	f8d3 07ac 	ldr.w	r0, [r3, #1964]	; 0x7ac
  deviceserial0 += deviceserial2;
 80056a8:	f8d3 37b4 	ldr.w	r3, [r3, #1972]	; 0x7b4
  if (deviceserial0 != 0)
 80056ac:	18c0      	adds	r0, r0, r3
 80056ae:	d101      	bne.n	80056b4 <USBD_FS_SerialStrDescriptor+0x18>
}
 80056b0:	4809      	ldr	r0, [pc, #36]	; (80056d8 <USBD_FS_SerialStrDescriptor+0x3c>)
 80056b2:	bd38      	pop	{r3, r4, r5, pc}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80056b4:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <USBD_FS_SerialStrDescriptor+0x38>)
 80056b6:	f8d3 57b0 	ldr.w	r5, [r3, #1968]	; 0x7b0
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80056ba:	4c07      	ldr	r4, [pc, #28]	; (80056d8 <USBD_FS_SerialStrDescriptor+0x3c>)
 80056bc:	2208      	movs	r2, #8
 80056be:	1ca1      	adds	r1, r4, #2
 80056c0:	f7ff ffd2 	bl	8005668 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80056c4:	2204      	movs	r2, #4
 80056c6:	f104 0112 	add.w	r1, r4, #18
 80056ca:	4628      	mov	r0, r5
 80056cc:	f7ff ffcc 	bl	8005668 <IntToUnicode>
 80056d0:	e7ee      	b.n	80056b0 <USBD_FS_SerialStrDescriptor+0x14>
 80056d2:	bf00      	nop
 80056d4:	1ffff000 	.word	0x1ffff000
 80056d8:	200001bc 	.word	0x200001bc

080056dc <USBD_FS_ProductStrDescriptor>:
{
 80056dc:	b508      	push	{r3, lr}
 80056de:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80056e0:	4902      	ldr	r1, [pc, #8]	; (80056ec <USBD_FS_ProductStrDescriptor+0x10>)
 80056e2:	4803      	ldr	r0, [pc, #12]	; (80056f0 <USBD_FS_ProductStrDescriptor+0x14>)
 80056e4:	f7ff fe62 	bl	80053ac <USBD_GetString>
}
 80056e8:	4800      	ldr	r0, [pc, #0]	; (80056ec <USBD_FS_ProductStrDescriptor+0x10>)
 80056ea:	bd08      	pop	{r3, pc}
 80056ec:	20000f2c 	.word	0x20000f2c
 80056f0:	08005ac4 	.word	0x08005ac4

080056f4 <USBD_FS_ManufacturerStrDescriptor>:
{
 80056f4:	b510      	push	{r4, lr}
 80056f6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80056f8:	4c03      	ldr	r4, [pc, #12]	; (8005708 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80056fa:	4621      	mov	r1, r4
 80056fc:	4803      	ldr	r0, [pc, #12]	; (800570c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80056fe:	f7ff fe55 	bl	80053ac <USBD_GetString>
}
 8005702:	4620      	mov	r0, r4
 8005704:	bd10      	pop	{r4, pc}
 8005706:	bf00      	nop
 8005708:	20000f2c 	.word	0x20000f2c
 800570c:	08005adc 	.word	0x08005adc

08005710 <USBD_FS_ConfigStrDescriptor>:
{
 8005710:	b508      	push	{r3, lr}
 8005712:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005714:	4902      	ldr	r1, [pc, #8]	; (8005720 <USBD_FS_ConfigStrDescriptor+0x10>)
 8005716:	4803      	ldr	r0, [pc, #12]	; (8005724 <USBD_FS_ConfigStrDescriptor+0x14>)
 8005718:	f7ff fe48 	bl	80053ac <USBD_GetString>
}
 800571c:	4800      	ldr	r0, [pc, #0]	; (8005720 <USBD_FS_ConfigStrDescriptor+0x10>)
 800571e:	bd08      	pop	{r3, pc}
 8005720:	20000f2c 	.word	0x20000f2c
 8005724:	08005ae0 	.word	0x08005ae0

08005728 <USBD_FS_InterfaceStrDescriptor>:
{
 8005728:	b508      	push	{r3, lr}
 800572a:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800572c:	4902      	ldr	r1, [pc, #8]	; (8005738 <USBD_FS_InterfaceStrDescriptor+0x10>)
 800572e:	4803      	ldr	r0, [pc, #12]	; (800573c <USBD_FS_InterfaceStrDescriptor+0x14>)
 8005730:	f7ff fe3c 	bl	80053ac <USBD_GetString>
}
 8005734:	4800      	ldr	r0, [pc, #0]	; (8005738 <USBD_FS_InterfaceStrDescriptor+0x10>)
 8005736:	bd08      	pop	{r3, pc}
 8005738:	20000f2c 	.word	0x20000f2c
 800573c:	08005aec 	.word	0x08005aec

08005740 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8005740:	b120      	cbz	r0, 800574c <USBD_Get_USB_Status+0xc>
    break;
    case HAL_ERROR :
      usb_status = USBD_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005742:	2802      	cmp	r0, #2
 8005744:	bf14      	ite	ne
 8005746:	2002      	movne	r0, #2
 8005748:	2001      	moveq	r0, #1
 800574a:	4770      	bx	lr
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 800574c:	4770      	bx	lr
	...

08005750 <HAL_PCD_MspInit>:
{
 8005750:	b510      	push	{r4, lr}
 8005752:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005754:	2300      	movs	r3, #0
 8005756:	9303      	str	r3, [sp, #12]
 8005758:	9304      	str	r3, [sp, #16]
 800575a:	9305      	str	r3, [sp, #20]
 800575c:	9306      	str	r3, [sp, #24]
 800575e:	9307      	str	r3, [sp, #28]
  if(pcdHandle->Instance==USB)
 8005760:	6802      	ldr	r2, [r0, #0]
 8005762:	4b1a      	ldr	r3, [pc, #104]	; (80057cc <HAL_PCD_MspInit+0x7c>)
 8005764:	429a      	cmp	r2, r3
 8005766:	d001      	beq.n	800576c <HAL_PCD_MspInit+0x1c>
}
 8005768:	b008      	add	sp, #32
 800576a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800576c:	4c18      	ldr	r4, [pc, #96]	; (80057d0 <HAL_PCD_MspInit+0x80>)
 800576e:	6963      	ldr	r3, [r4, #20]
 8005770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005774:	6163      	str	r3, [r4, #20]
 8005776:	6963      	ldr	r3, [r4, #20]
 8005778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005780:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005784:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005786:	2302      	movs	r3, #2
 8005788:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800578a:	2303      	movs	r3, #3
 800578c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800578e:	230e      	movs	r3, #14
 8005790:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005792:	a903      	add	r1, sp, #12
 8005794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005798:	f7fb fe96 	bl	80014c8 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 800579c:	69e3      	ldr	r3, [r4, #28]
 800579e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057a2:	61e3      	str	r3, [r4, #28]
 80057a4:	69e3      	ldr	r3, [r4, #28]
 80057a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057aa:	9302      	str	r3, [sp, #8]
 80057ac:	9b02      	ldr	r3, [sp, #8]
    __HAL_REMAPINTERRUPT_USB_ENABLE();
 80057ae:	4a09      	ldr	r2, [pc, #36]	; (80057d4 <HAL_PCD_MspInit+0x84>)
 80057b0:	6813      	ldr	r3, [r2, #0]
 80057b2:	f043 0320 	orr.w	r3, r3, #32
 80057b6:	6013      	str	r3, [r2, #0]
    HAL_NVIC_SetPriority(USB_LP_IRQn, 1, 0);
 80057b8:	2200      	movs	r2, #0
 80057ba:	2101      	movs	r1, #1
 80057bc:	204b      	movs	r0, #75	; 0x4b
 80057be:	f7fb fe2b 	bl	8001418 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80057c2:	204b      	movs	r0, #75	; 0x4b
 80057c4:	f7fb fe5e 	bl	8001484 <HAL_NVIC_EnableIRQ>
}
 80057c8:	e7ce      	b.n	8005768 <HAL_PCD_MspInit+0x18>
 80057ca:	bf00      	nop
 80057cc:	40005c00 	.word	0x40005c00
 80057d0:	40021000 	.word	0x40021000
 80057d4:	40010000 	.word	0x40010000

080057d8 <HAL_PCD_SetupStageCallback>:
{
 80057d8:	b508      	push	{r3, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80057da:	f500 712c 	add.w	r1, r0, #688	; 0x2b0
 80057de:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80057e2:	f7ff f9e6 	bl	8004bb2 <USBD_LL_SetupStage>
}
 80057e6:	bd08      	pop	{r3, pc}

080057e8 <HAL_PCD_DataOutStageCallback>:
{
 80057e8:	b508      	push	{r3, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80057ea:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80057ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80057f2:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 80057f6:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 80057fa:	f7ff fa07 	bl	8004c0c <USBD_LL_DataOutStage>
}
 80057fe:	bd08      	pop	{r3, pc}

08005800 <HAL_PCD_DataInStageCallback>:
{
 8005800:	b508      	push	{r3, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005802:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8005806:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800580a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800580c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005810:	f7ff fa40 	bl	8004c94 <USBD_LL_DataInStage>
}
 8005814:	bd08      	pop	{r3, pc}

08005816 <HAL_PCD_SOFCallback>:
{
 8005816:	b508      	push	{r3, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005818:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800581c:	f7ff fadf 	bl	8004dde <USBD_LL_SOF>
}
 8005820:	bd08      	pop	{r3, pc}

08005822 <HAL_PCD_ResetCallback>:
{
 8005822:	b510      	push	{r4, lr}
 8005824:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005826:	6883      	ldr	r3, [r0, #8]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d109      	bne.n	8005840 <HAL_PCD_ResetCallback+0x1e>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800582c:	2101      	movs	r1, #1
 800582e:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 8005832:	f7ff fabe 	bl	8004db2 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005836:	f8d4 02e8 	ldr.w	r0, [r4, #744]	; 0x2e8
 800583a:	f7ff fa92 	bl	8004d62 <USBD_LL_Reset>
}
 800583e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8005840:	f7fb f870 	bl	8000924 <Error_Handler>
 8005844:	e7f2      	b.n	800582c <HAL_PCD_ResetCallback+0xa>
	...

08005848 <HAL_PCD_SuspendCallback>:
{
 8005848:	b510      	push	{r4, lr}
 800584a:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800584c:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 8005850:	f7ff fab2 	bl	8004db8 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8005854:	69a3      	ldr	r3, [r4, #24]
 8005856:	b123      	cbz	r3, 8005862 <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005858:	4a02      	ldr	r2, [pc, #8]	; (8005864 <HAL_PCD_SuspendCallback+0x1c>)
 800585a:	6913      	ldr	r3, [r2, #16]
 800585c:	f043 0306 	orr.w	r3, r3, #6
 8005860:	6113      	str	r3, [r2, #16]
}
 8005862:	bd10      	pop	{r4, pc}
 8005864:	e000ed00 	.word	0xe000ed00

08005868 <HAL_PCD_ResumeCallback>:
{
 8005868:	b508      	push	{r3, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800586a:	f8d0 02e8 	ldr.w	r0, [r0, #744]	; 0x2e8
 800586e:	f7ff faac 	bl	8004dca <USBD_LL_Resume>
}
 8005872:	bd08      	pop	{r3, pc}

08005874 <USBD_LL_Init>:
{
 8005874:	b510      	push	{r4, lr}
 8005876:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8005878:	481d      	ldr	r0, [pc, #116]	; (80058f0 <USBD_LL_Init+0x7c>)
 800587a:	f8c0 42e8 	str.w	r4, [r0, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800587e:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.Instance = USB;
 8005882:	4b1c      	ldr	r3, [pc, #112]	; (80058f4 <USBD_LL_Init+0x80>)
 8005884:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005886:	2308      	movs	r3, #8
 8005888:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800588a:	2302      	movs	r3, #2
 800588c:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800588e:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005890:	2300      	movs	r3, #0
 8005892:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005894:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005896:	f7fb ff05 	bl	80016a4 <HAL_PCD_Init>
 800589a:	bb30      	cbnz	r0, 80058ea <USBD_LL_Init+0x76>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800589c:	2318      	movs	r3, #24
 800589e:	2200      	movs	r2, #0
 80058a0:	4611      	mov	r1, r2
 80058a2:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80058a6:	f7fc febf 	bl	8002628 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80058aa:	2358      	movs	r3, #88	; 0x58
 80058ac:	2200      	movs	r2, #0
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80058b4:	f7fc feb8 	bl	8002628 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80058b8:	23c0      	movs	r3, #192	; 0xc0
 80058ba:	2200      	movs	r2, #0
 80058bc:	2181      	movs	r1, #129	; 0x81
 80058be:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80058c2:	f7fc feb1 	bl	8002628 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80058c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80058ca:	2200      	movs	r2, #0
 80058cc:	2101      	movs	r1, #1
 80058ce:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80058d2:	f7fc fea9 	bl	8002628 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80058d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058da:	2200      	movs	r2, #0
 80058dc:	2182      	movs	r1, #130	; 0x82
 80058de:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80058e2:	f7fc fea1 	bl	8002628 <HAL_PCDEx_PMAConfig>
}
 80058e6:	2000      	movs	r0, #0
 80058e8:	bd10      	pop	{r4, pc}
    Error_Handler( );
 80058ea:	f7fb f81b 	bl	8000924 <Error_Handler>
 80058ee:	e7d5      	b.n	800589c <USBD_LL_Init+0x28>
 80058f0:	2000112c 	.word	0x2000112c
 80058f4:	40005c00 	.word	0x40005c00

080058f8 <USBD_LL_Start>:
{
 80058f8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80058fa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80058fe:	f7fb ff35 	bl	800176c <HAL_PCD_Start>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005902:	f7ff ff1d 	bl	8005740 <USBD_Get_USB_Status>
}
 8005906:	bd08      	pop	{r3, pc}

08005908 <USBD_LL_OpenEP>:
{
 8005908:	b508      	push	{r3, lr}
 800590a:	4694      	mov	ip, r2
 800590c:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800590e:	4663      	mov	r3, ip
 8005910:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005914:	f7fc fd6a 	bl	80023ec <HAL_PCD_EP_Open>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005918:	f7ff ff12 	bl	8005740 <USBD_Get_USB_Status>
}
 800591c:	bd08      	pop	{r3, pc}

0800591e <USBD_LL_CloseEP>:
{
 800591e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005920:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005924:	f7fc fd9b 	bl	800245e <HAL_PCD_EP_Close>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005928:	f7ff ff0a 	bl	8005740 <USBD_Get_USB_Status>
}
 800592c:	bd08      	pop	{r3, pc}

0800592e <USBD_LL_StallEP>:
{
 800592e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005930:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005934:	f7fc fe08 	bl	8002548 <HAL_PCD_EP_SetStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005938:	f7ff ff02 	bl	8005740 <USBD_Get_USB_Status>
}
 800593c:	bd08      	pop	{r3, pc}

0800593e <USBD_LL_ClearStallEP>:
{
 800593e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005940:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005944:	f7fc fe35 	bl	80025b2 <HAL_PCD_EP_ClrStall>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005948:	f7ff fefa 	bl	8005740 <USBD_Get_USB_Status>
}
 800594c:	bd08      	pop	{r3, pc}

0800594e <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800594e:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  if((ep_addr & 0x80) == 0x80)
 8005952:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005956:	d108      	bne.n	800596a <USBD_LL_IsStallEP+0x1c>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8005958:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800595c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005960:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005964:	f893 016a 	ldrb.w	r0, [r3, #362]	; 0x16a
}
 8005968:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800596a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800596e:	3101      	adds	r1, #1
 8005970:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005974:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005978:	7898      	ldrb	r0, [r3, #2]
 800597a:	4770      	bx	lr

0800597c <USBD_LL_SetUSBAddress>:
{
 800597c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800597e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005982:	f7fb ff0c 	bl	800179e <HAL_PCD_SetAddress>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005986:	f7ff fedb 	bl	8005740 <USBD_Get_USB_Status>
}
 800598a:	bd08      	pop	{r3, pc}

0800598c <USBD_LL_Transmit>:
{
 800598c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800598e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005992:	f7fc fdb8 	bl	8002506 <HAL_PCD_EP_Transmit>
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005996:	f7ff fed3 	bl	8005740 <USBD_Get_USB_Status>
}
 800599a:	bd08      	pop	{r3, pc}

0800599c <USBD_LL_PrepareReceive>:
{
 800599c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800599e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80059a2:	f7fc fd8e 	bl	80024c2 <HAL_PCD_EP_Receive>
  usb_status =  USBD_Get_USB_Status(hal_status);
 80059a6:	f7ff fecb 	bl	8005740 <USBD_Get_USB_Status>
}
 80059aa:	bd08      	pop	{r3, pc}

080059ac <USBD_LL_GetRxDataSize>:
{
 80059ac:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80059ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80059b2:	f7fc fd9f 	bl	80024f4 <HAL_PCD_EP_GetRxCount>
}
 80059b6:	bd08      	pop	{r3, pc}

080059b8 <USBD_static_malloc>:
}
 80059b8:	4800      	ldr	r0, [pc, #0]	; (80059bc <USBD_static_malloc+0x4>)
 80059ba:	4770      	bx	lr
 80059bc:	20001418 	.word	0x20001418

080059c0 <USBD_static_free>:
}
 80059c0:	4770      	bx	lr

080059c2 <HAL_PCDEx_SetConnectionState>:
{
 80059c2:	b508      	push	{r3, lr}
  if (state == 1)
 80059c4:	2901      	cmp	r1, #1
	 HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_SET);
 80059c6:	bf0c      	ite	eq
 80059c8:	2201      	moveq	r2, #1
	  HAL_GPIO_WritePin(USB_PULLUP_GPIO_Port,USB_PULLUP_Pin,GPIO_PIN_RESET);
 80059ca:	2200      	movne	r2, #0
 80059cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80059d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059d4:	f7fb fe52 	bl	800167c <HAL_GPIO_WritePin>
}
 80059d8:	bd08      	pop	{r3, pc}

080059da <memset>:
 80059da:	4402      	add	r2, r0
 80059dc:	4603      	mov	r3, r0
 80059de:	4293      	cmp	r3, r2
 80059e0:	d100      	bne.n	80059e4 <memset+0xa>
 80059e2:	4770      	bx	lr
 80059e4:	f803 1b01 	strb.w	r1, [r3], #1
 80059e8:	e7f9      	b.n	80059de <memset+0x4>
	...

080059ec <__libc_init_array>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	4d0d      	ldr	r5, [pc, #52]	; (8005a24 <__libc_init_array+0x38>)
 80059f0:	4c0d      	ldr	r4, [pc, #52]	; (8005a28 <__libc_init_array+0x3c>)
 80059f2:	1b64      	subs	r4, r4, r5
 80059f4:	10a4      	asrs	r4, r4, #2
 80059f6:	2600      	movs	r6, #0
 80059f8:	42a6      	cmp	r6, r4
 80059fa:	d109      	bne.n	8005a10 <__libc_init_array+0x24>
 80059fc:	4d0b      	ldr	r5, [pc, #44]	; (8005a2c <__libc_init_array+0x40>)
 80059fe:	4c0c      	ldr	r4, [pc, #48]	; (8005a30 <__libc_init_array+0x44>)
 8005a00:	f000 f818 	bl	8005a34 <_init>
 8005a04:	1b64      	subs	r4, r4, r5
 8005a06:	10a4      	asrs	r4, r4, #2
 8005a08:	2600      	movs	r6, #0
 8005a0a:	42a6      	cmp	r6, r4
 8005a0c:	d105      	bne.n	8005a1a <__libc_init_array+0x2e>
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a14:	4798      	blx	r3
 8005a16:	3601      	adds	r6, #1
 8005a18:	e7ee      	b.n	80059f8 <__libc_init_array+0xc>
 8005a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1e:	4798      	blx	r3
 8005a20:	3601      	adds	r6, #1
 8005a22:	e7f2      	b.n	8005a0a <__libc_init_array+0x1e>
 8005a24:	08005afc 	.word	0x08005afc
 8005a28:	08005afc 	.word	0x08005afc
 8005a2c:	08005afc 	.word	0x08005afc
 8005a30:	08005b04 	.word	0x08005b04

08005a34 <_init>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	bf00      	nop
 8005a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a3a:	bc08      	pop	{r3}
 8005a3c:	469e      	mov	lr, r3
 8005a3e:	4770      	bx	lr

08005a40 <_fini>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr
